syntax = "proto3";
package hunt;

import "client/common.proto";


// =================狩猎大陆==========================
message HuntLandUser {
    int64				UserID 			  	= 1; // 用户ID
    int32       SlotId        	= 2; // 位置ID
    common.SimpleUser Info 	 			  	= 3; // 用户信息
    int64 			BaseIncome 			= 4; // 基础收益
    int64       ProtectEndTime 	= 5; // 保护时间
    int32 			Plus				   	= 6; // 加成比列，万分比
    int64 			JoinTime				= 7; // 加入房间时间
}

message HuntLandUserSimpleInfo {
    int64				UserID 			= 1; // 用户ID
    int32  			Icon 				= 2;  // 头像ID
    int32       IconFrame   = 3; // 头像框 ID
}

message HuntLandRoomDetailInfo {
    HuntLandRoomPreviewInfo PreviewInfo = 1; // 房间预览信息
    repeated HuntLandUser 	UserList 		= 2; // 参与者列表
}

message HuntLandRoomPreviewInfo {
    int64 		ID           															= 1; // 组织ID 唯一ID 全局
    int64 		CreatorUid   															= 2; // 创建者UID 判定是否==自己
    int64 		EndTime      															= 3; // 到期时间
    int64 		CreateTime   															= 4; // 创建时间(秒)
    repeated 	HuntLandUserSimpleInfo SimpleUserList  		= 5; // 参与者列表
    int32 		LandId																		= 6; // 地块id
    int64 		BaseIncome																= 7; // 房间基础收益
}

// 狩猎收益信息
message HuntLandUserRewardInfo {
    common.SimpleUser KickUser 		= 1; // 踢出者
    common.SimpleUser CreatorUser  = 2; // 创建者
    int64 BaseIncome 				= 3; // 基础收益
    int32 Plus        			= 4; // 加成比列，万分比
    int64 Income 						= 5; // 总收益
    int64 HuntTime 					= 6; // 狩猎时间
}

message SyncUserHuntLandNtf {
    int32 LandId 											= 1; // 正在参与狩猎的地块id ==0表示没有
    int64 ID 													= 2; // 房间id
    HuntLandUserRewardInfo RewardInfo = 3; // 奖励信息，空表示没有
}

message SyncHuntLandRoomFinishNtf {
    int32 ID  												= 1; // 房间id
    HuntLandUserRewardInfo RewardInfo = 2; // 奖励信息
}

// 创建
message HuntLandCrateRoomReq {
    int32 LandId = 1; // 地块id
    int32 Count  = 2; // 时长数量，多少个单位时长(使用多少个道具)
}

message HuntLandJoinRoomReq {
    int32 Id 		= 1; // 房间id
    int32 SlotId  = 2 ; // 位置
}

message HuntLandGetRoomInfoReq {
    int32 Id = 1; // 房间id
}
message HuntLandKickReq {
    int32 Id     	= 1; // 房间id
    int64 SlotId  = 2; // 踢出者位置
    int64 Uid  		= 3; // 踢出者UID
}

message HuntLandKickAck {
    int32 Id     			= 1; // 房间id
    int64 SlotId  		= 2; // 踢出者位置
    int64 Uid  				= 3; // 踢出者UID
    bool  Result 			= 4; // 挑战结果
    int64 Properties 	= 5; // 对方总属性，不是房主踢人，且结果失败时返回
}

message HuntLandProtectReq {
    int32 Id      = 1; // 房间id
    int64 SlotId  = 2; // 位置
    int64 Uid     = 3; // 被保护者UID
    int32 Count 	= 4;// 时长数量，多少个单位时长(使用多少个道具)
}

message HuntLandProtectAck {
    int32 Id      		   = 1; // 房间id
    int64 SlotId  		   = 2; // 位置
    int64 Uid     		   = 3; // 被保护者UID
    int32 Count 			   = 4; // 时长数量，多少个单位时长(使用多少个道具)
    int64 ProtectEndTime = 5; // 保护时间结束(秒)
}

message HuntLandSearchReq {
    int64 Uid     		= 1; // UID
}

message HuntLandSearchAck {
    int64 									Uid     		= 1; // UID
    HuntLandRoomPreviewInfo PreviewInfo = 2; // 房间预览信息，空表示没有
}

enum HuntLandRecordType {
    HuntLandRecordTypeNone 					= 0; // 无
    HuntLandRecordTypeCreateFinish 	= 1; // 自己创建并结束
    HuntLandRecordTypeKick 					= 2; // 参与他人被踢
    HuntLandRecordTypeJoinFinish 		= 3; // 参与他人正常结束
    HuntLandRecordTypeProtect 			= 4; // 被人保护
}

message HuntLandRecordInfo {
    HuntLandRecordType 	Type 				= 1; // 类型
    int64 							Timestamp 	= 2; // 事件记录时间
    int64 							HuntTime 		= 3; // 狩猎时间(秒)
    int64 							ProtectTime = 4; // 事件记录时间(秒)
    int64 							Income 			= 5; // 总收益
    int64 							CreatorUid	= 6; // 创建者UID
    int64 							KickUid			= 7; // 踢人UID
    int64 							ProtectUid	= 8; // 保护者UID
}

message HuntLandGetRecordAck {
    repeated HuntLandRecordInfo RecordList = 1; // 记录列表
    repeated common.SimpleUser UserInfos 				 = 2; // 玩家信息
}

message HuntLandGetIncomeAck {
    int64 Income = 1; // 总收益
}

// 获取大陆上的所有地块的预览信息
message HuntLandGetPreviewInfoReq {
    int32 MainlandId = 1; // 大陆id
}

message HuntLandGetPreviewInfoAck {
    int32 	 MainlandId 														 = 1; // 大陆id
    repeated HuntLandRoomPreviewInfo PreviewInfoList = 2; // 预览信息列表
}

message HuntLandGetNextLandRoomDetailInfoReq {
    int32 LandId = 1;
    int32 Dir 	 = 2; // 1 上一个，2 下一个
}

message HuntLandGetNextLandRoomDetailInfoAck {
    int32 								 LandId 		= 1; // 满足条件的大陆id，为0表示没有
    HuntLandRoomDetailInfo DetailInfo = 2;
}
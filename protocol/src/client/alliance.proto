syntax = "proto3";
package alliance;

import "client/common.proto";

// ================== 新的联盟协议 ====================

enum NewAllianceConditionType {
    NewAllianceConditionTypeNone  = 0;
    NewAllianceConditionTypeDeny  = 1; // 拒绝加入
    NewAllianceConditionTypeApply = 2; // 申请加入
    NewAllianceConditionTypeFree  = 3; // 自动加入
}

// 联盟加入条件配置
message NewAllianceConditionSetup {
    NewAllianceConditionType Type = 1; // 加入条件
    int32 									Level = 2; // 用户等级限制>= ==0 表示不限制
    int64 									Power = 3; // 国力/战力/市值 >=  ==0 表示不限制
}

// 联盟每日贡献信息
message NewAllianceDonate {
    repeated common.ProItemInfo DayLimitRes = 1; // 每日获取的资源数据(上限,经验用来领取进度奖励)
    int64 DayScore                   = 2; // 积分进度
}

message NewAllianceUserDonateTimes {
    int32 BaseId = 1; // 捐献类型配置ID
    int32 Times  = 2; // 已经捐献次数(每日刷新)
    int64 NextTime = 3; // 下次的时间 0==没有
}

// 联盟用户信息(除了公共数据外 个人的数据下发)
message NewAllianceUserData {
    repeated NewAllianceUserDonateTimes Times    = 1; // 每日捐献次数
    repeated int32             DayDonateRewarded = 2; // 每日捐献box已领取的
}

// 成员列表的信息
message NewAllianceMemberListInfo {
    common.SimpleUser User        = 1; // 用户信息
    int32      Post  			 = 2; // 职位(ID 1=盟主,2=???...)
    int64      DonateTotal = 3; // 个人贡献(总)
    int64      DonateSeven = 4; // 个人贡献(近7日)
}

message NewAllianceCreateReq {
    int32     AllianceIcon          = 1; // 图标(旗帜ID)
    string 		Name 					        = 2; // 联盟名字(本服不可重复)
    string    ShortName             = 3; // 联盟短名(本服不可重复)
    string    Slogan                = 4; // 宣言
    string    Announce              = 5; // 联盟公告
}

message NewAllianceModifyInfoReq {
    int32     AllianceIcon          = 1; // 图标(旗帜ID>0 表示更换)
    string 		Name 					        = 2; // 联盟名字(!=空 表示更换, 需要消耗)
    string    ShortName             = 3; // 联盟短名(!=空 表示更换, 需要消耗)
    string    Slogan                = 4; // 宣言(!=空 表示更换)
    string    Announce              = 5; // 联盟公告(!=空 表示更换)
    NewAllianceConditionSetup Setup = 6; // 加入条件设置(!=空 表示更换 全数据替换)
}

// 返回相同请求
message NewAllianceModifyInfoAck {
    int32     AllianceIcon          = 1; // 图标(旗帜ID>0 表示更换)
    string 		Name 					        = 2; // 联盟名字(!=空 表示更换, 需要消耗)
    string    ShortName             = 3; // 联盟短名(!=空 表示更换, 需要消耗)
    string    Slogan                = 4; // 宣言(!=空 表示更换)
    string    Announce              = 5; // 联盟公告(!=空 表示更换)
    NewAllianceConditionSetup Setup = 6; // 加入条件设置(!=空 表示更换 全数据替换)
}

message NewAllianceSearchListReq {
    int64 		AllianceID 		        = 1; // 联盟ID // 如果有表示搜索ID 否则返回全列表
}

message LotteryRewardCard {
    int32 CardId 						= 1; // 获得的卡牌ID(如果非转换 就自动加入到卡牌背包里)
    common.ProItemInfo ChangeItem 	= 2; // 转换道具信息 ID,count 如果为空表示不转换
}

message SyncCollectCardsPackageLotteryNtf {
    repeated LotteryRewardCard RewardCards  = 1; // 卡牌获取数据
}
message NewAllianceSearchListAck {
    repeated common.SimpleAlliance List = 1; // 联盟列表 // 带Applied,不带内部联盟信息
}

message NewAllianceGetApplyListAck {
    repeated common.SimpleUser List = 1; // 申请列表 // 申请的用户信息 无排序规则按照ID或者市值排序都行
}

message NewAllianceApplyOperReq {
    int32 Oper = 1; // ==0表示同意 ==1表示拒绝
    int64 Uid  = 2; // uid==0 表示全部操作 如果是全部操作 不会返回错误码 会回复ack信息
}

message NewAllianceApplyOperAck {
    repeated int64 Uids = 1; // 加入成功的uids 操作完后 请从列表中删除掉(重新打开页面后请求列表即可)
}

message NewAllianceGetMemberListAck {
    repeated NewAllianceMemberListInfo List = 1; // 成员列表
}

enum NewAllianceMemberOper {
    NewAllianceMemberOperNone = 0;
    NewAllianceMemberOperPost = 1; // 任命职位 id=1表示盟主(转让) 99=>表示普通成员
    NewAllianceMemberOperKick = 2; // 踢出
}

// 联盟成员操作
message NewAllianceMemberOperReq {
    NewAllianceMemberOper Oper = 1;
    int64 Uid                  = 2; // 成员的uid
    int32 Post                 = 3; // 职位(如果oper类型是任命职位 则需要传入职位)
}

// 回复请求内容
message NewAllianceMemberOperAck {
    NewAllianceMemberOper Oper = 1;
    int64 Uid                  = 2; // 成员的uid
    int32 Post                 = 3; // 职位(如果oper类型是任命职位 则需要传入职位)
}

message NewAllianceUserDonateReq {
    int32 BaseId = 1; // 捐献类型配置ID
}

message NewAllianceUserDonateAck {
    int32 BaseId   = 1; // 捐献类型配置ID
    int64 NextTime = 2; // 下一次的时间
    int32 Times    = 3; // 已经得次数总量
}

enum NewAllianceMsgNtfType {
    NewAllianceMsgNtfTypeNone 			   = 0; // 从上到下 从全体分发到个人
    NewAllianceMsgNtfTypeInfoChange 	 = 1; // (全员)有联盟信息变动(名称/图标/公告/宣言/等级) 仅返回 基础信息
    NewAllianceMsgNtfTypeMember 	     = 2; // (全员)有成员数量变动(加入/减少) 仅返回 MemberCount,Power 可用于显示人数
    NewAllianceMsgNtfTypeDonate 	     = 3; // (全员)捐赠资源每日数据变动 仅返回 Donate 和 Res 捐赠信息和资源数据同步 用于领奖和联盟数据显示
    NewAllianceMsgNtfTypeLeaderChange  = 4; // (全员)盟主变动(自动/转让) 仅返回 Leader
    NewAllianceMsgNtfTypeDismiss       = 5; // (全员)联盟解散.. 同被T的处理即可
    NewAllianceMsgNtfTypeNewApply 	   = 6; // (权限人)有新的申请 仅返回 ApplyCount 可用于红点显示
    NewAllianceMsgNtfTypeUserJoin 	   = 7; // (个人)加入联盟成功的推送 全部信息
    NewAllianceMsgNtfTypeUserPost 	   = 8; // (个人)个人职位变动推送 仅返回 个人职位 NewAllianceUserData.Post(如果被转成盟主 则会同时收到3)
    NewAllianceMsgNtfTypeUserBeKick    = 9; // (个人)被T了... 没有其他信息 直接处理退出联盟界面就行了(自己退出走协议就行了)
    NewAllianceMsgNtfTypeUserDayReset  = 10; //(个人)跨天notify信息
}

// 里面的数据 仅返回了部分数据 不能做全量数据同步
message SyncNewAllianceMsgNtf {
    NewAllianceMsgNtfType Type = 1; // 通知类型
    common.SimpleAlliance Info        = 2; // 通用的信息数据
}

message NewAllianceGetInfoAck {
    common.SimpleAlliance Info        									= 1; // 联盟信息
    repeated NewAllianceMemberListInfo Members 	= 2; // 成员列表
}

// ================== 新的联盟协议 END ====================

message SyncCollectCardsNtf {
    repeated common.CommonIntKV Cards   = 1; // 新增卡牌信息(全量 同一个cardID的全量count)
    repeated common.CommonIntKV AddShow = 2; // 新增卡牌信息获取信息 用于显示新增量
}

message GsReportUserInfoGM {
    int64 	Uid      	= 1; // 用户id
    int32 	ServerID 	= 2; // 服务器id
    string 	UserInfo  = 3;
    string 	Account 	= 4;
}


message SyncUserFirstPayInfoNtf {
    bool 					 Pay = 1; // 是否已经充值
    int32 				 Day = 2; // 当前进度天数
    repeated int32 Get = 3; // 已经领取的天数
}

// 首充奖励领取
message UserFirstPayGetReq {
    int32 Day = 1; // 第几天
}

message UserFirstPayGetAck {
    int32 Day = 1; // 第几天
}

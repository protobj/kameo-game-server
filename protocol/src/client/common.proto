syntax = "proto3";
package common;

//import "client/alliance.proto";

// 31000 - 32000 定义内部活动服务之间的CMD
///////////////////////////////基础结构体 Begin//////////////////////////////////////////
/***************************************
***************认证相关协议*************
***************************************/

/***************************************
*****************登录相关协议**********
***************************************/
message UserLocalInfo{
    string IP					= 1;   // IP
    string CltVersion			= 2;   // 客户端版本号，Build版本号
    string OsVersion			= 3;   // 客户端Os版本
    string DeviceName			= 4;   // 设备名称
    string DeviceID				= 5;   // 设备ID
    string    Locale			= 6;   // 语言, 见宏LANG_XXX
    string OpenUDID				= 7;   //
    int32	PlatformID			= 8;   // 客户端设备类型:  宏定义PLATFORM_XXX,
    int32	Mode				= 9;    //
    int32  DeviceIDType			= 10;   //
    int32  ProxyPriority		= 11;	// 登陆所采用加速节点的访问优先级
    string BundleID				= 12; 	    // 包名
    string MACAddress 			= 13; 	// MAC地址
    string NetType 				= 14; 	// 网络类型 wifi/3g/4g
    string Channel 				= 15; 	// GP
    string AdvID 				= 16; 	// 广告ID
    string AndroidID           	= 17;	// 作废 --- 安卓设备的独立识别码,
    string LocaleCountry		= 18;	// 国家编码
    string ThirdPartDeviceId	= 19;	// 填appsflyer的appsflyer_device_id
    int32  IapType 				= 20; 	// 支付渠道
    bool   IsCN					= 21;	// 是否是国内的包
    string ResCltVersion        = 22;   // 热更后客户端上的CltVersion不会变，新加一个来区分
    string UtcOffset			= 23;	// 时间偏移
    string QQPf 				= 24;   //qq平台用
    string SDKPlatform = 25;
    string GameId = 26;
    bool InternalPlayer = 27; // 是否是内玩
}

message LoginInfo
{
    int32		AccountType		= 1;
    string 		Account			= 2; 		// 帐号信息
    string 		Token			= 3;
    int64		UserID			= 4;
    UserLocalInfo Local 		= 5;
    int32 		ServerID 		= 6; 		// 创建角色有用
    string 		UserName 		= 7; 		// 角色名字
}

// Gate ===> GS的协议
message GTLoginInfo
{
    string 			Account			= 1;
    int64			UserID			= 2;
    int32 			State 			= 3;
    UserLocalInfo 	Local 			= 4;
    int32 			RoleCount		= 5;
    int32 			HomeServerID 	= 6;
    string 			UserName 		= 7; 	// 角色名字
    bool 			NeedCreate 		= 8; 	// 是否需要创建
    bool 			IsRobot 		= 9; 	// 是否是机器人
    bool 			RollFlag 		= 10; 	// 滚服玩家
    string 			BindPhoneNum	= 11;	// 账号绑定的手机号
    string			SDKPlatform		= 12;	// sdk登录传过来的platform
    int64           FirstRegisterMs = 13;   // 第一个角色注册的时间
    int64           FirstUserID     = 14;   // 第一个角色的userID
    string 			Token			= 15;
}


message ProItem
{
    int32 	BaseID					= 1;
    int32 	Count					= 2;
    int64 	AuctionEndMs 			= 3; 	// 允许被寄售的寄售截至时间
}

message PropKeyValue
{
    int32 	PropKey 				= 1; 	// 属性
    int64 	PropValue 				= 2; 	// 属性值
}

message ProWear{
    int32 		ObjectID 				= 1; 	// 對象ID
    int32 		BaseID 					= 2;
    int32 		Level 					= 3;
    int32 		Exp 					= 4; 	// 經驗信息
    int32 		StaffObjectID 			= 5; 	// 雇员ObjectID 客户端使用
}

//还原装备操作
message WearResetOper {
    int32 						StaffObjectID 	= 1; 		// 雇員ObjectID
    int32 						WearObjectID 	= 2; 		// 裝備ID
}

//装备列表
message WearObjIdList {
    repeated int32 WearList = 1;//装备列表
}
//传单额外奖励列表
message AdvertisingExtraAward{
    repeated ProBagItem ItemList = 1;//获得的物品列表
}

message CommonGetItem{
    repeated ProBagItem ItemList = 1;//获得的物品列表
    int32 	 GetSource  = 2;//获得的请求来源
}

message OptItems{
    int32 Serial    = 1;            //序号,组别
    repeated ProBagItem List = 2;   //下行可选项/上行选择项
}

message ProBagItem{
    int32 		Type 			= 1;
    int32       BaseId          = 2;    // ID
    int32       Count           = 3;    // 数量
    ProWear 	WearInfo 		= 4; 	// 裝備信息
    bool 		Double 			= 5; 	// 是否双倍
}

// 服务器之间消息透传始终用这个结构， 对应Gd里的ItemInfo
// 给客户端时，全部走ProBagItem
message ProItemInfo {
    int32       BaseId          = 1;    //
    int64       Count           = 2;    // 如果是货币，单位用分
}

message UDIDWriteBackInfo
{
    string UserName			= 1;
    string UIDID				= 2;
}


message SimpleRes{
    int32 		Type 		= 1;
    int64 		Value 		= 2;
}

message UserRes{
    repeated 	SimpleRes 	ResList 	= 1; 		// 资源列表
}

message MovePoint{
    int32 		BaseID 			= 1;
    int32 		Status 			= 2; 	// BUS_STATUS_NORMAL等
    int64 		MoveStartMs 	= 3; 	// 移动开始时间
    int64 		MoveEndMs 		= 4; 	// 移动结束时间
    bool 		Won 			= 5; 	// 是否已经胜过
    int32 		PreBusID 		= 6; 	// 前一等级BUSID
    repeated    ProBagItem      EventSpecialDrop  = 7;   // 活动期间的额外掉落
}

message StallEvent{
    int32 		SrcObjectID 	= 1; 	// 事件发起者
    int32 		EventID 		= 2; 	// 事件ID
    int32 		SrcNameID 		= 3; 	// 发起者
    int32 		DstNameID 		= 4; 	// 对方名字
    int32 		SchooolID 		= 5;
    int32 		CompanyID 		= 6; 	// 公司ID
}

message StallPoint{
    int32 		BaseID 			= 1;
    int64 		NeedCount 		= 2;
    int32 		Status 			= 3; 	// STALL_STATUS_BE_MARCHING等
    StallEvent 	Event 			= 4; 	// 摊位挂接的事件
}

message DungeonPoint{
    int32 		DungeonID 		= 1;
    int32 		Status 			= 2; 	// BUS_STATUS_NORMAL等
    int64 		MoveStartMs 	= 3; 	// 移动开始时间
    int64 		MoveEndMs 		= 4; 	// 移动结束时间
}

message MapUser{
    int64 		UserID 			= 1;
    string 		UserName  		= 2;
    bool        IsRobot         = 3;    // 机器人标记
}

// 外卖点
message FoodTakeOutPoint {
    int32 		BaseID 			= 1;    //
    repeated    ProOrderItem  	Orders = 2; // 订单信息
    int32 		Status 			= 3; 	// STALL_STATUS_BE_MARCHING等
    StallEvent 	Event 			= 4; 	// 挂接的事件
}

message JobBeachCar{
    int32 		JobBeachCarID		= 1;	// 职业沙滩车ID
    bool 	 	Open  				= 2; 	// 开放
}

message MapPoint{
    int32 	 	BaseID 			= 1;
    int32 		Type 		 	= 2; 		// 點位類型 MAP_POINT_BUS等
    MovePoint 	Bus 			= 3; 		// 大巴汽車
    StallPoint 	Stall 			= 4; 		// 攤位點
    MapUser 	User 			= 5; 		// 用戶信息
    MovePoint  	Dungeon 		= 6; 		// 副本信息
    int32 		TimeCost 		= 7; 		// 配置消耗时间
    int64		RefreshMs		= 8;		// 刷新时间戳
    int32 		Level 			= 9;  		// 大巴等级  摊位等级  副本ID 人的等级
    int64		UnLockMs		= 10;		// 解锁时间
    FoodTakeOutPoint  TakeOutPoint 	= 11; 	// 外卖数据
    JobBeachCar BeachCar 		= 12;		// 职业沙滩车
    int32 M_RestaurantImage = 13;
}

// 用户信息 LOGIN_ACK
message UserInfo
{
    SimpleUser	User								= 1;
    UserRes 		Res 								= 2;
    repeated 		ProBagItem 	 	List 	= 3;    		// 道具背包数据
    int32  			VipLevel        		= 4;   			// vip等级
    int32  			ChapterID       		= 5;    		// 章节id
    int64 			RegisterMs  				= 7; 				// 注册时间
    bool 				IsNew 							= 8; 				// 是否新建角色
    bool 				FirstPayed 					= 9; 				// 是否已经完成首次支付
    int32       BluemapVerCode      = 10;       // 蓝图版本号，编译值
    int32 			BonusIndex 	 				= 11; 			// 店铺评价下标
    string			BindPhoneNum				= 12;				// 账号绑定手机号
    int32 			TotalWearGrid				= 13;				//总装备格子
    int32 			TotalStaffGrid			= 14;				// 总雇员格子

    string          YIDUNTransHost        = 15;               // 转发域名
    string          YIDUNTransIP          = 16;               // 转发IP
    int32           YIDUNTransPort        = 17;               // 端口
    string          YIDUNForwardURI       = 18;               // 中转地址
    int32 M_ServerEnv = 19;

    UserPayInfo 						Pay 				= 20; // 支付信息
    repeated UserFigureInfo FigureList 	= 21; // 时装道具列表
    NewGsServerInfo 							ServerInfo 	= 22; // 服务器信息
    repeated CommonIntKV   CollectCards = 23; // 卡牌收藏背包信息(ID,count)
}


message SyncBagItems{
    int32 		Type 	= 1;
    repeated 	ProBagItem 	 	List 	= 2;    // 同步数据
}


/***************************************
*****************公共协议**********
***************************************/
message SingleInt32
{
    int32			Param		= 1;	// 32位能描述的ID
}

message SingleInt64
{
    int64			Param		= 1;	// 64位能描述的ID
}

message SingleUserID
{
    int64	UserID		= 1;	// 用户ID
}


message SingleSessionID
{
    int64	SessionID	= 1;	// SessionID
}

message SingleString
{
    string Content		= 1;	// 字符串内容
}


message TilePos
{
    int32		XPos	= 1;
    int32		YPos	= 2;
}


/***************************************
*****************功能部分**********
***************************************/
message ProxySearchNameInfo
{
    int64 UserID  				= 1;
    string Name   				= 2;
    string ServerID   			= 3;
}

message SyncResNtf{
    repeated 	SimpleRes 	List 		= 1;
}

message GetRoleListInfo
{
    repeated RoleInfo Roles				= 1;
}

message SyncSimpleAsListReq{
    int32 	ServerID 		= 1;
    repeated 	int32	ASIDList		= 2;	// 联盟列表
}

message SyncSimpleAsListAck{
    repeated SimpleAlliance	MinList		= 1;	// 联盟列表
}

//用户信息
message MoreSimpleUser
{
    int64	UserID			= 1;
    string	Name			= 2;
    int32	ServerID		= 3;
    int32	GuestServerID		= 4;
}

message ServerTilePos
{
    int32	ServerID			= 1;
    TilePos Pos				= 2;
}

message SimpleMapUser
{
    int64	UserID			= 1;
    string Name			= 2;
    TilePos Pos			= 3;
}

message GetSimpleUserList
{
    repeated int64	Users			= 1;
    int32  ServerID 					= 2; 	//服务器ID
    int64  RequestUserID 			= 3; 	// 服务器填写
}

// SimpleAlliance 简单联盟信息 只对外的信息 公共信息
message SimpleAlliance {
    int64 		AllianceID 		        = 1; // 联盟ID
    string 		Name 					        = 2; // 联盟名字(本服不可重复)
    int32 		Level 				        = 3; // 联盟等级
    int32     AllianceIcon          = 4; // 图标(旗帜ID)
    string    Announce              = 5; // 联盟公告
    int32     MemberCount           = 6; // 人数(用于未获取成员列表显示人数)
    repeated ProItemInfo Res        = 7; // 联盟资源(经验,金币等都在资源里)
    string    ShortName             = 8; // 联盟短名(本服不可重复)
    string    Slogan                = 9; // 宣言
//    alliance.NewAllianceConditionSetup Setup = 10; // 加入设置
    int64     Power            			= 11; // 联盟总国力/市值
    bool      Applied               = 12; // (限制,对外)对user个人信息 在申请状态中, 列表(详情)数据中返回, AllianceID==0才有(已经进联盟的不需要这个状态了)
//    alliance.NewAllianceDonate Donate        = 13; // (限制,对内)联盟捐献信息(全局), 只在本盟信息里返回. 对外数据不返回  AllianceID>0才有
//    alliance.NewAllianceUserData UserData    = 14; // (限制,对内)个人联盟数据, 只在个人登录(获取)信息里返回 AllianceID>0才有
    int32 ApplyCount                = 15; // (限制,对内)申请人数量,只在个人登录(获取)信息里返回, 作为外部提示显示红点或者数量  AllianceID>0才有
    int64 Leader                    = 16; // 盟主uid
    int32                     Post  = 17; // 在他人用户信息里的联盟的职位(ID 1=盟主,2=???...)
    int64 IncomeSpeed               = 18; // 收益速度 每秒收益/s 联盟所有成员合
    SimpleUser LeaderUser           = 19; // 盟主信息
    int32     AsEntrustNum   										= 100; //deprecated 联盟求助委托个数
    int64     JionMiddleNightMs  								= 101; //deprecated 玩家加入联盟的下一个零点时间 用于联盟副本判断
    int64     AllianceFunsNum    								= 102; //deprecated 联盟粉丝数量
    repeated  PropKeyValue  AsValueableItemInfo = 103; //deprecated 联盟贵重物品信息，物品id-》等级  服务器专用 客户端不用管
}


message AsMemberEntrustNum{

}

message RankSimpleUser{
    int32 			Rank 			= 1;
    int64			UserID			= 2;
    int32  			Level  			= 3;
    string 			Name			= 4;
    int64			Power			= 5;
    int32  			Icon 			= 6;
    int32 			IconFram 		= 7;
    int32 			NameColor  		= 8;
    string 			Avatar          = 9;
    int32 			AllianceID 	 	= 10;
    int32 			UserStar	    = 11;//店铺星级
    int32           BlueVipLevel    = 12; // 蓝钻等级
    int32           BlueVipType     = 13; // 蓝钻种类


}

message SimpleUser
{
    int64				UserID												= 1;  // 用户ID
    string 			Name											  = 2;  // 用户名称
    int64				Power													= 3;  // 战力(可不用)
    int32  			Icon 													= 4;  // 头像ID
    string 			Avatar          							= 5;  // deprecated
    int32  			HomeServerID									= 6;  // 当前服务器ID
    int32  			RegisterServerID							= 7;  // deprecated 注册服务器ID
    SimpleAlliance SimpleAS 									= 8;  // 联盟简要信息
    int32       Level           							= 9;  // 玩家等级
    int32       IconFrame       							= 10; // 头像框 ID
    int32       Sex             							= 11; // 性别
    string      Announce         							= 12; // deprecated 等陆时不需要，拉信息时单独确认
    int32       SLevel          							= 13; // deprecated 餐厅等级
    int64       ShowGoldIncome  							= 14; // deprecated 同步每小时收益，计算值
    int32       ServiceTableLevel 						= 15; // deprecated 服务台等级
    bool				IsBind			  								= 16;	// deprecated 是否绑定
    int64       BeLikeTotalCount  						= 17; // deprecated 被点赞总数
    int32 			CustomersPerHour  						= 18; // deprecated 每小时客人数
    int32  			ColorfulUserName  						= 19;	// deprecated 玩家彩色名字
    int32 			MaxFinishedLevel  						= 20; // deprecated 当年前完成等级
    int64				Contributes		 								= 21;	// deprecated 联盟贡献
    bool				IsAwardBindPhone 							= 22;	// deprecated 是否领过绑定手机的奖励
    int32       ShowTopPureAvgServiceScore 		= 23; // deprecated 完全是为了客户端看别人信息时展示，不用于同步
    int32       EventCookbookDailyLimitItemId = 24; // deprecated 这个值只有从User身上取才有效，CU上没有
    int32       BubbleBox        							= 25; // deprecated 聊天气泡框
    int64       NextMiddleNightMs   					= 26; // deprecated 下一个零点时间戳
    string      ServerName          					= 27; // deprecated 玩家所在的服务器名字
    int32				RestaurantStar	    					= 28;	// deprecated 餐厅星级
    int32       IsWearAutoDecompose 					= 29;	// deprecated 装备是否自动分解标记 0不自动分解 1自动分解
    int32       StrongestStaffID              = 30; // deprecated 玩家最强雇员id
    int32       CurPlotChapterID              = 31; // 玩家当前主线剧情章节id
    int32				BonusIndex										= 32; // deprecated 玩家当前评级下标
    int64				EnvironmentScore							= 33; // deprecated玩家当前环境评分
    bool				IsLike												= 34; // deprecated 标识收到某个玩家信息时，是否给该玩家点赞
    int32       UserRoleImage                 = 35; // deprecated 玩家角色半身像
    int64       ShowTotalServiceScore         = 36; // 总属性
    int32       BlueVipLevel                  = 37; // deprecated 蓝钻等级
    int32       BlueVipType                   = 38; // deprecated 蓝钻种类
    int32       UserClickEffect               = 39; // deprecated 点击效果
    UserSkin 		skin 													= 40; // 皮肤相关信息
    int32      	Vip                           = 41; // VIP等级
    repeated  int32  Titles										= 42; // 称号列表
    int64 IncomeSpeed                         = 43; // 收益速度 每秒收益/s
    int64 	LastLoginMs 											= 44; // 最后登录时间
    int64 	LastLogoutMs 											= 45; // 最后离线时间 (这两个用于是否在线的判定)
    bool    IsOnline         									= 46; // 在线状态
}

message UserSkin {
    int32 Title = 1; // 装备的称号ID Title表的ID
    int32 Style = 2; // 选定的风格ID 在切换风格的时候更改
    int32 Skin  = 3; // 皮肤ID skin表的ID -> 决定最终的显示立绘
}

message UserDetail {
    SimpleUser   Info   = 1;     //
//	repeated int32 StaffIDs = 2;// 主力店员id列表
//	repeated SimpleStaffInfo ShowStaffInfo = 3;  // 展示主力店员的信息
//	bool        IsPostLike  = 4; // 是否被我点赞 false：未点赞 true：已点赞
}

message SimpleUserList
{
    repeated SimpleUser List		= 1;
}

message GetSimpleAllianceList
{
    repeated int32	List			= 1;
    int32	ServerID		= 2;
    int64	RequestUserID	= 3;
}

message SimpleAllianceList
{
    repeated SimpleAlliance List		= 1;
}


message BatchGetUserSimpleInfoReq
{
    repeated int64  UidList   = 1; // 玩家的uid列表
    int64    SrcUid           = 2; // 服务器用
    int32    OptType          = 3; // 操作类型
}

message BatchGetUserSimpleInfoAck
{
    repeated UserDetail Details  = 1; // 玩家的uid列表，只打包基础信息没有雇员
    int32    OptType    = 2;          // 操作类型
}

// 联盟部分协议
//
message SimpleRank
{
    int32	RankFounds		= 1;
    int32	RegionRank		= 2;
    int32	ServerRank		= 3;
}


///////////////////////////////基础结构体 End//////////////////////////////////////////

message ProxySearchNameReqInfo
{
    int64 Ctx   				= 1;
    string Name   				= 2;
}

message ProxySearchNameAckInfo
{
    int64 Ctx   				= 1;
    repeated ProxySearchNameInfo Users	= 2;
}

message ProxyRoleInfo
{
    int64 Ctx   				= 1;
    int32 Api 					= 2;
    repeated int64 Users 				= 3;
}

message ProxyRoleAckInfo
{
    int64 Ctx   				= 1;
    GetRoleListInfo Msg 		= 2;
}

message ProxyGmCmdReqInfo
{
    int64 UserID 				= 1;
    int32 ServerID 			= 2;
    int64 Ctx 					= 3;
    string Cmd 				= 4;
}

//网关gm指令回复
message ProxyGmCmdAckInfo
{
    int64 Ctx 					= 1;
    int32 Code 				= 2;
    string Result 				= 3;
}

message GSGMMailInfo
{
    repeated int64 UserIDs 				= 1;
    int32 ServerID 			= 2;
    string Title 				= 3;
    string Content 			= 4;
    bool IsTemplate            = 6;
    int32 TemplateParamType    = 7;   // 模板类型， 后面用来扩参数
    int32 Flag                 = 8;   // 特殊标记
    int32 ReceiverLevel        = 9;   // 接收者等级
}


message CommOption
{
    int64	UserID				= 1;	//服务器自动填写
    int32	AllianceID			= 2;	//服务器自动填写
}


//
message SearchByNameReq
{
    string Prefix			= 1;
    int32	Type			= 2;	// 参数说明 0名字查找 1简写查找
    int32	Mode			= 3;	// 参数说明 0前缀查找 1精准查找
    CommOption Option		= 4;
}

// 空包
message NullMsg
{
}


message ChannelInfo
{
    int32 ChannelID 				= 1;
    string ChannelJID 				= 2;
}


message ClientConfigDetail
{
    string Key						= 1;
    int32 Value					= 2;
}

//客户端功能性开关
message ClientConfigInfo
{
    repeated ClientConfigDetail List  		= 1;
}


//通知当前vip信息
message VIPNtfInfo
{
    int32 CurPoint					= 2;
    int32 CurLevel					= 3;
    int32 NextLoginPoint			= 4;
    int32 CloginDays				= 5;
    repeated int32 BoughtLevel 				= 6; //已经购买的Vip宝箱
}

message TimeNtfInfo
{
    int64		T				= 1;
    int64   	PingMs 			= 2; 	// 客户端上报的PingMs
}

message GSUserInfoAckInfo
{
    int64	SrcUserID			= 1;
    int32	Code				= 2;
    UserInfo Info				= 3;
}

// 新的请求服务器列表的消息
message ServerListRequest
{
    string Account 			= 1; 	// 账号信息
    int64 	UserID 				= 2;	//
}
// GS信息
message ProServerInfo
{
    int32 	ID					= 1;
    int32 	Stat					= 2;
    int64 	OpenTime				= 3;
    int32 	Population			= 4;
    TilePos Min				= 5;
    TilePos Max				= 6;
    int32 	Flag					= 7;
    int32 	MiniVersion			= 8;
    string  ServerName      =   9;
}

message ServerListInfo
{
    repeated ProServerInfo List			= 1;
}


//通用回复 10000
message CommonAckInfo
{
    int32 	Api				    = 1;
    int32	Code			    = 2;
    string Msg				    = 3;
    repeated string ExtraStrs   = 5;   // 客户端用来做替换的字符串
};

//10011
message SessionTokenInfo
{
    uint32 Key1				= 1;
    uint32 Key2				= 2;
}

message ConfigToClientInfo
{
    bool AutoTranslateOpen		= 1;
    bool FreeTranslateOpen		= 2;
    bool BaiduFreeTranslate	= 3;
    bool GoogleFreeTranslate	= 4;
    string ClientKeepStr		= 5;
    bool UseNewGameDate		= 6;
    bool IapOpenFlag        = 7; // 支付开启开关
    int64 RobotUid          = 8; //
    bool BindPhoneOpen		= 9; //是否开放绑定手机功能
    bool IsIOSVerify        = 10;//是否是审核费
}


message GSGroupCastInfo
{
    int32 	ServerID			= 1;
    repeated int64 	UserList			= 2;
    string Msg					= 3;
}

message ForwardMsgInfo
{
    int64	Size				= 1;
    int32	SessionID			= 2;
    int64 	UserID				= 3;
    int32	Api					= 4;
    bytes	Msg					= 5;
}

message GroupForwardMsgInfo
{
    int64	Size				= 1;
    int32	SessionID			= 2;
    repeated int64 	UserIDList			= 3;
    int32	Api					= 4;
    string	Msg					= 5;
}
message ForwardGSMsgInfo
{
    int64	Size				= 1;
    int32	SessionID			= 2;
    int64 	UserID				= 3;
    int32	FromServerID		= 4;
    int32	ToServerID			= 5;
    string	Msg					= 6;
}


message GSBroadCastInfo
{
    int32	ServerID			= 1;
    bytes Msg					= 2;
}

message ServerConnectedInfo{
    int32  Func 				= 1;
    int32 	ServerID 			= 2;
}

message GSConnectedInfo
{
    repeated int32 ServerList	= 1;
}

message MailConnectedInfo
{
    int32 	ServerID			= 1;
}

message GSCommonAckInfo
{
    int64	UserID				= 1;
    int32	Api					= 2;
    int32	Code				= 3;
}

message CenterGetRoleListReqInfo
{
    int32	Api					= 1;
    repeated int64	Users				= 2;
    ServerListInfo ServerInfo		= 3; //服务器列表
    int64   RequestUid          = 4;      // 请求的UID
}

message RoleInfo
{
    int64	UserID				= 1;
    int32	ServerID			= 2;
    string UserName			= 3;
    int32	Icon				= 4;
    int64 	Power				= 5;
    SimpleAlliance Alliance	= 6;
    string	Avatar				= 7;
    bool	Forbidden			= 8;
}

message UdidWhiteList
{
    string Udid						= 1;
    int64  ExpireMSec					= 2;//绑定过期时间
}


message GSLoginErrInfo
{
    int32	SessionID			= 1;
    GTLoginInfo Msg			= 2;
}

message GSLoginSyncReqInfo
{
    int64	UserID				= 1;
    int32 	ServerID 			= 2;  	//用户登录的服务器ID
    GTLoginInfo Info			= 3;
    int32	SessionID			= 4;
    int32	Status				= 5;
}

message GSLoginSyncInfo{
    int32	Code				= 1;
    GSLoginSyncReqInfo Cache	= 2;
}


message ProxyServerListInfo
{
    string Region				= 1;
    ServerListInfo Info		= 2;
    int32	DefGS				= 3;
    int64 Ctx					= 4;
}

message ProxyServerListReqInfo
{
    int32 RegionID				= 1;
}

message ProxyServerListAckInfo
{
    int32	Code				= 1;
    int32	RegionID			= 2;
    ServerListInfo	ServerList	= 3;		// 需要修改的内容
}

// 用于外部用户信息 简单信息
message MiniUser
{
    int64	  UserID						= 1;  // 用户UID
    string  Name							= 2;  // 名称
    int32 	ServerID 					= 3;  // 当前所在服务器
    int32 	HomeServerID 			= 4;  // 原始服务器
    int32   Vip               = 5;  // VIP等级
    int32 	Level 						= 6;  // 等级
    int32   Icon              = 7;  // Icon头像
    int32   IconFrame         = 8;  // IconFrame
    UserSkin 		skin 				  = 9;  // 皮肤相关信息
    int64 		AllianceID 		  = 10; // 联盟ID // >0=有 =0没有
    string    ShortName       = 11; // 联盟短名 // 没有联盟为空
    int64 IncomeSpeed         = 12; // 收益速度 每秒收益/s
    int64 	LastLoginMs 			= 13; // 最后登录时间
    int64 	LastLogoutMs 			= 14; // 最后离线时间 (这两个用于是否在线的判定)
}

message SyncMiniUser
{
    bool		CheckName		= 1;
    MiniUser	UserInfo		= 2;
    bool       IsLogin         = 3;
}


message UserSessionInfo
{
    int64	UserID 				 = 1;
    int32	SessionID 		 = 2;
    int32	AllianceID 		 = 3;
    int32	ServerID 			 = 4;
    int32 	CloseReason  = 5; // 断开连接才有意义
    SimpleUser UserInfo  = 6; // 打包好的用户信息 用于其他场景直接返回
}


message ShutDownMessage
{
    string	Message				= 1; //内容
}

//跑马灯
message MarqueeLedMessage
{
    string	Message						  = 1; //内容
    int32   InsertFlag          = 2; //插入标志 0：表示不插入 1：表示插入
    int32   Type                = 3; // 类型: 原来GM过来的跑马灯, MARQUEE_LED_TYPE_GM，直接使用Message；MARQUEE_LED_TYPE_TEMPLATE，模板类跑马灯， 用MarqueeLedId去表里找
    int32   MarqueeLedId        = 4; // 跑马灯模板IDU
    repeated string  TemplateParam = 5; // 跑马灯参数
}

message GSUserInfoReqInfo
{
    int64	SrcUserID		= 1;
    int64	DstUserID		= 2;

}


message UserAccountInfo
{
    int64	RegisterTime		= 1;
}

// 更新push设备信息
message UpdatePushInfo
{
    int32	PushType		= 1;
    string Token			= 2;
}

//绑定
message BindInfo
{
    string	Token			= 1;
    string UserName		= 2;
    string Password		= 3;
    int32	EnterType		= 4;
}


//GS广播消息
message BroadCastMsg2GSInfo
{
    string Msg				= 1;
    repeated int32	ServerList		= 2;
}

// 联盟等级同步
message GSASLevelNtf
{
    int32	AllianceID		= 1;
    int32	Level			= 2;
}

// 延时执行的GM指令
message PendingCmdInfo
{
    int32	GMID			= 1;
    int64	UserID			= 2;
    int32	ServerID		= 3;
    int64	Expire			= 4;
    string Cmd			= 5;
}

message PendingCmdNtfInfo
{
    repeated PendingCmdInfo CmdList		= 1;
}


message GSCenterRankingInfo
{
    int32	ServerID		= 1;
    int32	Type			= 2;
    int32 	AllianceID		= 3;
    int32	SubType			= 4;
    int64	Number			= 5;
}

message SignatureCheckInfo
{
    int64	UserID			= 1;
    string Signature		= 2;
}

message SignatureCheckInfoAck
{
    int64	UserID			= 1;
    string Signature		= 2;
    int32	Flag			= 3;
}

message MapBoxIDInfo
{
    int32	ID			= 1;
}


message UserStaticsInfo
{
    int32	Type			= 1;
    int64	Value			= 2;
}

message UserStaticsAckInfo
{
    int64	UserID			= 1;
    repeated UserStaticsInfo Infos		= 2;
}

message TwoUserID
{
    int64	SrcUserID		= 1;
    int64	DstUserID		= 2;
}
message GSUserStaticAckInfo
{
    TwoUserID Users		= 1;
    int32	Code			= 2;
    repeated UserStaticsInfo Infos		= 3;
}

message GateMessageInfo
{
    string EndPointToken		= 1;
    string EndPointType		= 2;
    string Msg			= 3;
}


message GSParamInfo
{
    int32 	Pos			= 1;
    int32	Type			= 2;
    string	Value			= 3;
}

message GSGovernmentReqInfo
{
    int64	UserID			= 1;
    int32	ServerID		= 2;
    int32  ClientFlag      = 3;
}

message GSHandleAchievementInfo
{
    int64	UserID			= 1;
    int32	Class			= 2;
    int64	Count			= 3;
}


//保存玩家纠错
message TranslateInfo
{
    int32	ServerID		= 1;	// SS之间透传
    int64	UserID			= 2;	// SS之间填写
    int32	OrgServerID		= 3;
    string Lang			= 4;
    string Context			= 5;
    string ContextID		= 6;
    string OrgContext		= 7;
    string	EnContext		= 8;
}

//搜索结果信息
message SearchNode
{
    string Name			= 1;
    int64	ID				= 2;
}

//搜索回复
message SearchNameInfo
{
    int32	Type			= 1;
    repeated SearchNode List		= 2;
}


message SettingNode
{
    int32	Key			= 1;
    bool	Value			= 2;
}

message SettingInfo
{
    repeated SettingNode Nodes		= 1;
}

message UserIDList
{
    repeated int64	Users			= 1;
}


message ClientSwitchInfo
{
    int32 SwitchKey	= 1;
    int32 SwitchValue	= 2;
}
message ClientSwitchNtf
{
    repeated ClientSwitchInfo SwitchInfo   	= 1;
}

message TranslateStandardFileInfo
{
    string TransFileName		= 1;
    string CDNPath			= 2;
    string SecTransFileName	= 3;
    string SecCDNPath		= 4;
}


message RandNameAck
{
    int64 UserID 				= 1;
    string RandName 			= 2;//随机的
}

message CompressedInfo
{
    int32 	OrigSize			= 1;
    int32	API			= 2;
    string 	Data 			= 3;
}

//拉在线用户信息:
message OnlineUsersReq
{
    int32	Type			= 1;	// 0 获取已经登陆的用户 1 获取Guest账号 3
    int32	ServerID		= 2;
}

//在线用户列表
message OnlineUsersList
{
    repeated MoreSimpleUser List		= 1;
}


message OnlineBriefInfo
{
    int32	LoginedCnt		= 1;	//登陆数量
    int32	UnloginedCnt		= 2;
}

message GateCleanUpUserReqInfo
{
    repeated int64 UserIDs 				= 1;
    int32 ServerID 			= 2;
    int32 CleanOption 			= 3;
}
//Gate发给主协程的消息
message GateKickUserLocal
{
    repeated int64 UserIDs 				= 1;
}
message SimpleSummonInfo{
    int32 		FighterID 	= 1; 	// 配置ID
    repeated 	int32 		ObjectList 	= 2;
}


message UseItemInfo{
    int32 				ItemID 			= 1;
    int32 				Count 			= 2;
    repeated	int32	ExtParams		= 3;
}

message UseItemAck {
    repeated ProBagItem     FinalItems      = 1; // 最重获得的物品
}

message ChangeNameReq{
    string 				Name 			= 1;
}

message ChangeNameAck{
    int32               Result          = 1;
    string 				Name 			= 2;
}

message ChangeBlueMapName{
    int32 BlueID = 1;
    string Name = 2;
}

message ChangeBlueMapResult{
    int32 Result = 1;
    ChangeBlueMapName ReturnInfo = 2;
}

message GetIconListReq {}

message ProIconInfo{
    int32    IconFrameID = 1; //头像或头像框的id
    int64    ExpireMs    = 2; //过期时间 0表示永不过期    >0 表示过期时间
    int32 M_IconType = 3;
}

message GetIconListAck {
    repeated   ProIconInfo       SysIcons          = 1; // 已有的系统头像列表
    repeated   ProIconInfo       SysIconFrames     = 2; // 已有的系统头像狂列表
    repeated   ProIconInfo       NameColorList     = 3; // 名字映射列表
    repeated   ProIconInfo       BubbleBoxList     = 4; // 气泡框列表
    repeated   ProIconInfo       RoleImageList     = 5; // 角色形象列表
    repeated   ProIconInfo       ClickEffectList   = 6; // 点击效果列表
}

message ChangeSexReq {
    int32      Sex          = 1;  //性别
}

message ChangeSexAck {
    int32      Result       = 1;  // 结果
    int32      Sex          = 2;  // 性别
}

// 只支持Icon/IconFrame/BubbleBox  每次只对一个字段进行赋值 从上到下依次检查
// 填道具ID 检查玩家形象道具背包里是否有对应道具 即解锁
message ChangeUserIconReq {
    int32      Icon         	= 1;  // 头像
    int32      IconFrame    	= 2;  // 头像框
    string     Avatar       	= 3;  // 三方头像
    int32 	   NameColorIcon  	= 4;  // 名字颜色Icon
    int32      BubbleBox        = 5;  // 聊天气泡框
    int32      RoleImage        = 6;  // 角色形象
    int32      ClickEffect      = 7;  // 点击效果
    int32 M_RestaurantImage = 8;
}
message ChangeUserIconAck {
    int32      Result           = 1;  // 结果
    int32      Icon             = 2;  // 头像
    int32      IconFrame        = 3;  // 头像框
    string     Avatar           = 4;  // 三方头像
    int32 	   NameColorIcon  	= 5;  // 名字颜色Icon
    int32      BubbleBox        = 6;  // 聊天气泡框
    int32      RoleImage        = 7;  // 角色形象
    int32      ClickEffect      = 8;  // 点击效果
    int32 M_RestaurantImage = 9;
}

message ModifyAnnounceReq {
    string     Announce     = 1;  // 修改描述
}
message ModifyAnnounceAck {
    int32      Result       = 1;  // 结果
    string     Announce     = 2;  // 修改描述
}

message GetAllianceSimpleInfoReq{
    int64      UserID          = 1;//玩家UID(服务器用)
    int64      TargetUserID    = 2;//查询的目标玩家UID
}

message GetAllianceSimpleInfoAck{
    int32 		AllianceID 	    = 1; // 自己的联盟ID
    MiddleAlliance AllianceInfo     = 2;  // 联盟简要信息
    AllianceSimpleUser 	CaptainerInfo= 3; //盟主信息
}

message GetUserSimpleInfoReq {
    int64      Uid          = 1;  // 请求的角色信息, 自己可以不用填
    int32 	   ClientParam  = 2;  // 客户端透传参数
}

message GetUserSimpleInfoAck {
    UserDetail  Detail      = 1;  // 信息
    int32 	   ClientParam  = 2;  // 客户端透传参数
}


message ReviveActor{
    int32 				ObjectID 		= 1;
    int64 				HP 				= 2;
    TilePos 			Pos 			= 3;
}


message CommonNotice
{
    int32					Type 		= 1;
    repeated 	string					Params		= 2;
}

message StopServerSuspension
{
    int64 MaintainBeginTime   = 1;	//维护开始时间
    int64 MaintainSustainTime = 2;	//维护持续时间
    string MaintainTxt				= 3;	//维护展示文本
    int32  Notice_Type				=	4;	//悬浮窗类型
}

message UserMove{
    int64 				UserID 			= 1;
    int64 				ScenceID 		= 2;
    //	TilePos 			SrcPos 			= 3;
    TilePos 			DstPos  		= 4;
    int32 				MoveSpeed 		= 5; 		// 移动速度
    int32				TeamID 			= 6;
    int64 	  			StartMs 		= 7; 		// 开始时间 客户端上行无需填写
    int64 				EndMs 			= 8; 		// 预期结束时间 客户端上行消耗时间  服务器下行截止时间
}

message StateEquip{
    int32 				Quality 		= 1; 		// 品质
    int32 				Count 			= 2; 		// 数量
}


//奖励获得通知消息
message ReceiveReward
{
    repeated ProBagItem RewardInfo = 1;//物品列表
    int32        Reason = 2; // 奖励获取原因
}



// 支付相关协议
// 拉去商品列表请求
message IAPListReq
{
    int32	IAPType				= 1;
    int32	Locale				= 2;
    int64   ToUserID            = 3;//赠送对象ID
}
//主类型
message IAPItemMain{
    int32		MainType					 = 1; //主类型 0-IAP_MAIN_TYPE_HOT_SALE-热销 1-IAP_MAIN_TYPE_MONTH_CARD-月卡 2-IAP_MAIN_TYPE_SEASON-赛季 3-IAP_MAIN_TYPE_RECOMMEND-推荐 4-IAP_MAIN_TYPE_DIAMONDS-钻石
    repeated 	IAPItemShowInfo ItemShowList = 2; //展示物件列表
}

message IAPItemShowInfo{
    int32		ID						= 1;
    int32		Belong					= 2;	//属于哪个主类型
    int32		ShowType				= 3;	//展示类型 0-IAP_SHOW_TYPE_RECTANGLE-长方形 1-IAP_SHOW_TYPE_SQUARE-正方形
    string		Title					= 4;	//标题
    string		Title_Sub				= 5;	//副标题
    string		Pic						= 6;	//图片
    string      PicAltas                = 7;    //
    repeated    IAPItemInfo IapItemList	= 8;	//包列表
    int64 		EndMs 					= 9;	//截止时间戳
    bool  		FinishShow 				= 10;	//相关包买完后是否结束展示
    string  	MainUIShowAltas			= 11;	//主界面展示图标集
    string		MainUIShowIcon 			= 12;	//主界面图标名
    string		AdvertisingIcon			= 13; 	// 广告条上当前售卖礼包的推广图标位展示什么图片
    string		AdvertisingIconAltas 	= 14;	// 广告条上当前售卖礼包的推广图标位展示什么图片图集
    int32		UIType					= 15;	//内页的样式
    int32		SeasonType				= 16;	//战令类型
    string      CaesarCardRewardTerm    = 17;   //馈赠卡第X天获得道具 间隔天数#奖励道具ID#奖励数量
    string      CaesarCardRewardLifelong = 18;  //永久卡第X天获得道具 间隔天数#奖励道具ID#奖励数量
    bool        IsShowOpen            = 19;   //show是否开放
    bool        HideDisplay             = 20;   //是否展示在付费墙
    string 			ExtraShow							= 21;
    int32 			TaskStatus						= 22;
    int64 			EvObjID								= 23;
    int32       Priority                = 24;   //优先级，从大到小
    int64       ClientEndMs             = 25;   //给客户端判断是否删除的结束时间
}

//商品信息
message IAPItemInfo
{
    int32					ID					= 1;
    int32					Type				= 2;		// 0-IAP_BASE_TYPE_NORMAL-普通包 1-IAP_BASE_TYPE_MONTH_CARD-月卡 2-IAP_BASE_TYPE_WEEK_CARD-周卡 3-IAP_BASE_TYPE_PUSH-推送类 4-IAP_BASE_TYPE_ACTIVITY-活动礼包
    repeated ProBagItem 	ItemList		    = 3; 		// 产出物品
    repeated ProBagItem		DailyReward			= 4;		// 月卡周卡每日给与的道具#ID
    string					PlatformProductID	= 5;		// 平台商品价格ID
    string					Title				= 6;		// 礼包的说明
    string					Title_Sub			= 7;		// 礼包的额外展示
    string					Title_Pic			= 8;		// 礼包用的图片
    string					Title_PicAltas		= 9;		// 礼包用的图片
    int32					LimitedNum			= 10;		// 限购次数
    int64					ResetMs				= 11;		// 重置的时间戳
    string					AdvertisingIcon		= 12; 		// 广告条上当前售卖礼包的推广图标位展示什么图片
    string					AdvertisingIconAltas = 13;		// 广告条上当前售卖礼包的推广图标位展示什么图片图集
    int32					Discount			= 14;		// 折扣
    int32					PriceID				= 15;		// 价格ID
    int32					Recommendation		= 16;		// 底色
    int32                   TotalServerLimitCnt = 17;       // 服务器总的可购买数量
    int32                   CurServerLimitCnt   = 18;       // 当前服务器可购买数量
    repeated ProBagItem 	PayItems		    = 19; 		// 物品支付
    int32 					ResetType		    = 20; 		// 重置类型
    int32                   SignGroupID         = 21;       // 签到ID
    int32                   Priority            = 22;       // 优先级
    int32                   Kind                = 23;       // 同一类型只推送一个
    repeated OptItems 	    OptItemList		    = 24; 		// 自选物品
    string                  FriendAtlas         = 25;       //好友赠礼显示图集
    string                  FriendIcon          = 26;       //好友赠礼显示图标
    string                  FriendTitle         = 27;       //好友赠礼显示名称
    repeated ProBagItem     ClientShowAwardItems = 28;      // 客户端特殊展示的礼包奖励
}

message IAPPushInfo
{
    int32		ShowId					= 1;
    string		Title					= 2;	//标题
    int32		ShowType				= 3;	//展示类型 0-IAP_SHOW_TYPE_RECTANGLE-长方形 1-IAP_SHOW_TYPE_SQUARE-正方形
    int64 		EndMs 					= 4;	//截止时间戳(秒)
    string 		PushPic					= 5;
    string 		PushPicAtlas			= 6;
    string		PushPic1				= 7;	//另外一个图
    string		PushPicAtlas1			= 8;	//另外一个图集
    int32		MainShowType			= 9;
    int32		MainTxtType				= 10;
    string		MainTxt					= 11;
    int32		PushShow				= 12; 	//是否自动弹出礼包
    int32       M_AwardCnt                = 13;   //这个推送包下可领取的奖励
}

message IAPPushInfos
{
    repeated IAPPushInfo Infos					= 1;
}

//拉取商品列表
message IAPListInfo
{
    int32 Type 							= 1; 	// 目前类型可以不用
    repeated IAPItemMain List			= 2;
    int64    ToUserID                   = 3;//赠送对象ID
}

//所有的productId信息
message IAPProductIdInfo
{
    int32  PriceId						= 1;
    string ProductId					= 2;
    string Display						= 3;
    int64  Price						= 4;
}

message IAPProductIdNtf
{
    repeated IAPProductIdInfo Infos			= 1;
}

//请求生成订单
message IAPCommonReq
{
    int32				PackageID			= 1;
    string				ProductID			= 2;
    int64				ToUserID			= 3;
    string 				ExtData				= 4;
    int64				Price				= 5;
    string				Currency			= 6;//币种 "CNY"
    repeated	int32	SelectIndex			= 7;//自选礼包选择
    int32               BuyNum              = 8;//购买的数量
    repeated  OptItems  OptItemList		    = 9;//自选道具
    string				PfKey				= 10;//QQ游戏Pfkey
    int32               TemplateID          = 11;//寄语模板
    string              YDToken             = 12;//易盾token
}

//请求生成订单响应
message IAPCommonRsp
{
    int32				Code				= 1;
    string 				OrderID 			= 2;
    string 				Url					= 3; 		// 请求支付需要回调的地址
    string				ExtData				= 4;
    int32 				PackageID			= 5;
    string				ProductID			= 6;
    string				Title				= 7;
    repeated	int32	SelectIndex			= 8;//自选礼包选择(废弃)
    string 				UrlParams 			= 9;//在下一步调用前端JS API时，应用需要将url_params传递过去，以便在支付窗口中显示具体的购买物品的数量以及应付金额
    int64				ToUserID			= 10;//赠送对象
}

//支付结果校验
message IAPFinishInfo
{
    int64 				UserID 				= 1;    // Server填写SS之间使用
    string 			OrderID 			= 2; 	// 本地订单号 有可能无法回传
    int32				PackageID			= 3;	// IAP配置ID
    string 			ProductID			= 4;	// 支付平台商品配置ID 不同平台，同一PackageID对应的ProductID可能不一致
    string 			TransactionID		= 5;	// 三方交易订单号
    int32				ClientPaySeq		= 8;	// 客户端支配序列号
    int32				CurrencyType		= 9;
    int32				Price				= 10;	// 单位分
    string				Token				= 11;
    string 			Receipt				= 12;
    string 			Signature			= 13;
    string				CardID				= 14; 	// 特殊渠道需要填写的卡号
    string				CardPwd				= 15; 	// 特殊渠道需要填写的密码  等同于Token的作用
    int32			ServerID				= 16;
    int64			PayTime					= 17;
    string			PayChannel				= 18;
    string 			ThirdUid				= 19;	//平台Uid
    int32			IAPType					= 20;
    string			GameID					= 21;
    string          PayExt                  = 22;
    QQPayInfo Info 							= 23;//QQ平台才需要
}

message QQPayInfo
{
    string PayItem = 1;
    string Billno  = 2;
    string ZoneID  = 3;
    string ProvideErrno = 4;
    string Amt 	   = 5;
    string PayamtCoins = 6;
    string TokenID = 7;
}

message IAPFinishRsp
{
    string				Receipt				= 1;
    int32               PackageId           = 2;
    IAPItemShowInfo 	ShowInfo			= 3;
    int32				PackageCount		= 4;
    string 				TransactionID       = 5;
    int32 				Code 				= 6;	//错误码
    repeated ProBagItem ShowItemList        = 7;	//客户端展示的物品
    string 				OrderID      		= 8;	//本地订单号
    bool 				FirstOrder 			= 9;
    int32 				Price 				= 10; 	// 价格信息
    int32 				Type 				= 11;	// IAP的类型 暂用后面改为客户端自己从Cache数据中读取
    bool                IsItemPay           = 12;   // 是否用的是道具購買
    int64				ToUserID			= 13;   // 赠送对象

    UserPayInfo UserPay = 14; // 支付信息
}

message GetIapShowInfoReq
{
    int32               ShowID              = 1;
}

message GetIapShowInfoAck
{
    IAPItemShowInfo       Info                = 1; //
}

message IapShowInfoChgNtf
{
    repeated IAPItemShowInfo       Infos                = 1; //
}


message SyncOtherOperatingNoticeMsg
{
    int32       Index    = 1;//客户端只用这个，通知的id
    int32       ServerID = 2; // 服务器用
    int64       UserID   = 3; // 服务器用
    repeated    string   Params   = 4; // 参数
}


//网关上下文
message ProxyCtxInfo
{
    int64	Ctx			= 1;
}


message CreateAlliance{
    int64 			UserID 		= 1; 	// 用户ID 服务器填写
    string 		ASName 		= 2; 	// 联盟名字
    int32 			ServerID 	= 4; 	// 服务器填写
    int32 			UserLevel 	= 5; 	// 服务器填写
    int32 			Code  		= 6; 	// 返回错误
    int32 			AllianceID 	= 7; 	// 联盟ID
    string 		Announce 	= 8; 	// 行会公告
    int32         AllianceLogo    = 9;    // 联盟图标
    bool 			NeedConfirm = 10; 	// 审批类型
    int32           ApplyType  = 11;
}

message MemberChange{
    int32 			AllianceID 	= 1; 	// 联盟ID
    int64 			SrcUserID 	= 2; 	// 源成员
    int64 			TargetUserID= 3; 	// 目标成员
    string 		TargetName  = 4; 	// 目标成员名字
    int32  		Oper 		= 5; 	// 加入 退出 被踢出
    int32       JoinNum     = 6;    //加入联盟次数 要配合SrcUserID和Oper判断
}

message AllianceBaseOper{
    int64 			UserID 		= 1; 	// 用户ID 服务器填写
    int32 			AllianceID 	= 2; 	// 联盟ID
    int32 			Oper 		= 3; 	// 加入 退出 解散ALLIANCE_OPER_APPLY
    int32 			Code  		= 4; 	// 返回结果 响应使用
    int32 			FinTimes 	= 5; 	// 副本已经完成次数
    AlliancePOPInfo PopInfo     = 6;    //联盟推广信息
}

message BatchApply{
    int64 			UserID 		= 1; 	// 用户ID 服务器填写
    repeated int32 			ApplyList 	= 2; 	// 批量申请列表
    int32 			Code  		= 3; 	// 返回结果 响应使用
}

message GetAllianceListMsg{
    int64 			UserID 		= 1;
    int32 			ServerID 	= 2;
    int64 			MyPower 	= 3;
    int32           Index       = 4;   //第几页
    int32           Size        = 5;   //每页的条数
    int64           RobotID     = 6;   // 自动创建联盟的工具人
}

message MiddleAlliance{
    SimpleAlliance Simple 		= 1;
    int32 			MemCount 	= 2;
    int32 			MaxMemCount = 3;
    AllianceSimpleUser 	    CaptainerInfo= 4;
    bool 			NeedConfirm = 5; 	// 审批类型
    int64 			MinPower 	= 6; 	// 最低战力要求
    int32 			Rank 		= 7; 	// 排名
    int64 			TotalPower  = 8; 	// 战力
	//string 		    CaptainName = 9; 	// 团长名字
    int32           Activity   = 10; //活跃度
    int32           IsApply    = 11; //是否已申请 0 表示未申请，1 表示已申请
	//int64           CaptainerID = 12; //队长id
    int32           ApplyType  = 13;//联盟审核方式 0：都可加入 1：需要申请 2：不能加入
    int32           AsState    = 14; //联盟状态 0 ：正常，1：推荐
}

message AllianceList{
    repeated MiddleAlliance List 		= 1;
    int32           Index       = 2;   //第几页
    int32           Size        = 3;   //每页的条数
}

message ClearUserApplyList{
    int64 			UserID 		= 1;
    repeated int32 			ApplyList 	= 2;
}


message AllianceApplyConfirm{
    int32 			AllianceID 	= 1; 	// 联盟ID
    int64 			SrcUserID 	= 2; 	// 源成员
    int64 			TargetUserID= 3; 	// 目标成员
    int32  		Action 		= 4; 	// ALLIANCE_CONFIRM_AGREE
}

message AllianceSimpleUser{
    int64 			UserID 		= 1;
    string  		Name 		= 2;
    int64			Power 		= 3;
    int32 			Level 		= 4;
    int32  		Icon 			= 5;
    string 		Avatar          = 6;
    int32  		HomeServerID	= 7;
    int32  		RegisterServerID= 8;
    int32       IconFrame       = 9;   // 头像框
    int32       Sex             = 10;   // 性别
    string      Announce         = 11;   // 等陆时不需要，拉信息时单独确认
    bool 			Online 				= 12; 		// 在线标记
    int64 			LastLogoutMs 		= 13; 		// 最后离线时间
    int32       NameColor        = 14; //名字颜色
    int64       LikedNum         = 15; //被点赞数
    bool        IsRobot          = 16;  // 是否是机器人标记，用来替换掉联盟成员的名字
    int32       RestaurantStar   = 17;  //玩家咖啡店星级
    int64       TotalServiceScore = 18;//玩家总厨艺
    int32       BlueVipLevel = 19; // 蓝钻等级
    int32       BlueVipType  = 20; // 蓝钻种类
    int32 M_RestaurantImage = 21;
}

message AllianceMember{
    AllianceSimpleUser 	SimpleMem 			= 1;
    int64 				Contributes 		= 2; 		// 周贡献值
    int32 				Post 				= 3; 		// 职位信息
    int32		    	MapPointID			= 4;		// 联盟成员地图点
    repeated  int32 	CharacterDungeonList= 5; 		// 成员性格列表
    int32 M_RestaurantImage = 6;
}

message AllianceApplistInfo
{
    repeated AllianceSimpleUser AppList = 1; 	// 申请者列表
    int64    UserID     = 2;   //服务器用
}


//工会建筑等级
message BuildingLevel
{
    int32 BuildingID = 1; //建筑id
    int32 BuildingLevel = 2; //建筑等级
}

message AllianceMoreInfo{
    repeated BuildingLevel	BuildingsLevel 		= 1;        //建筑等级
    int64 			CaptainID 			= 2;
    string  		CaptainName 		= 3;
    int32 			CaptainLevel        = 4;
    int32 			HookExpRate 		= 5; 		// 挂机加成
    string 		Announce 			= 6; 		// 行会公告
    bool 		    NeedConfirm        	= 7; 		// 申请类型
    int64 			MinPower 			= 8; 		// 最低战力
    int32          DonateNum           = 9;       // 此成员当日的捐赠次数
    int64          TotalPower          = 10;      // 总战力
    int32           Activity           = 11; //活跃度
    int32           ApplyType          = 12; //联盟审核方式 0：都可加入 1：需要申请 2：不能加入
    bool            CaptainIsRobot     = 13;  // 盟主是否是机器人，是用策划多语言的模板替换盟主名字
}

message AllianceDetail{
    SimpleAlliance Simple 		= 1; 	// 简要信息
    AllianceMoreInfo More 		= 2;  	// 其他信息
    repeated AllianceMember MemList 	= 3; 	// 成员列表
	//repeated AllianceSimpleUser AppList = 4; 	// 申请者列表

}

message ProAllianceDetailExtrendInfoForLua{
    int32 AsId      = 1;
    int64 FansNum   = 2; //粉丝数
    repeated PropKeyValue  AllianceBuff = 3; //联盟buff列表
    repeated PropKeyValue  UserAllianceBuffs = 4; //联盟成员的buff 针对联盟玩法的buff
    int64  UserID   = 5; //联盟成员id
    int32  CanSigneNum = 6; //当天可打卡次数
    repeated ProBagItem SigneAwards = 7; //签到奖励
    bool IsAllianceBurdenEvent = 8;   //聯盟减负活动
    int64  CurAllianceActiveExpToday   = 9; //当天贡献联盟经验累计值
    int64  MaxAllianceActiveExpToday   = 10; //最大贡献联盟经验值
}

message GetAllianceMemberList
{
    int64 UserID     = 1;  //服务器用
    int32 AllianceID = 2;  //服务器用
    repeated AllianceMember MemList 	= 3; 	// 成员列表
}


//修改联盟信息
message ModifyAllianceAnnounce{
    int64 			UserID 		= 1;
    int32 			AllianceID  = 2;
    string 		Announce 	= 3; 		// 修改公告
    int32       Oper        = 4;        //操作id   1：修改公告和审核方式   2：改头像 3：改名字
    int32       Icon        = 5;        // 头像id
    string      Name        = 6;        //联盟名字
    int32       ApplyType   = 7;        //联盟审核方式 0：都可加入 1：需要申请 2：不能加入
    int32       Code        = 8;        //center返回码 用于返回gs处理
}

//修改联盟最小战力条件 是否自动审批
message AllianceMinPower{
    int64 			UserID 		= 1;
    int32 			AllianceID  = 2;
    bool 			NeedConfirm = 3;
    int64 			MinPower 	= 4;
    int32           ApplyType  = 5;
}

message AllianceApplyApproval{
    int64      UserID          = 1;    // 联盟审批人员，客户端不用填写
    int32      AllianceID      = 2;    // 联盟ID，客户端不用填写
    int64      TargetUserID    = 3;    // 申请人ID
    int32      Action          = 4;    // 是否同意
}

message AllianceKickout{
    int64      UserID          = 1;    // 联盟审批人员，客户端不用填写
    int32      AllianceID      = 2;    // 联盟ID，客户端不用填写
    int64      TargetUserID    = 3;    // 被踢的人
}

message AllianceAppoint {
    int64      UserID          = 1;    // 联盟审批人员，客户端不用填写
    int32      AllianceID      = 2;    // 联盟ID，客户端不用填写
    int64      TargetUserID    = 3;    // 任命的人
    int32      Post            = 4;    // 职位等级
}

//同步联盟成员职位变化
message SyncAllianceMemPostChgNtf
{
    int64    UserID  = 1;
    int32    Post    = 2;
}


//联盟升级
message AllianceUpLevel
{
    int32 AllianceID = 1; //联盟id     由服务器填写
    int32 Level      = 2; //等级 由服务器填写
    int64 Exp     = 3;  // 联盟经验
    int64 UserID     = 4; //申请人ID  由服务器填写
}

//联盟贵重物品部件信息
message AllianceValueablePartInfo{
    int32 BaseID  = 1;//部件道具id
    int32 Num     = 2;  //数量
}

//联盟贵重物品
message AllianceValueableItemInfo{
    int32 BaseID   = 1;  //贵重物品的baseID
    repeated AllianceValueablePartInfo PartInfo	= 2;  //物品部件信息
}

//联盟贵重物品信息集合
message GetAllianceValueableItemsInfo{
    repeated AllianceValueableItemInfo AsValueableItems = 1;
    int64    UserID = 2;     //成员id 服务器用
    int32    AllianceID = 3;  //联盟id 服务器用
}

//捐赠记录信息
message GetAllianceValueableItemDonateRecord{
    int64    UserID = 1;     //成员id 服务器用
    int32    AllianceID = 2;  //联盟id 服务器用
    repeated ProAllianceValueableItemDonateRecord Records = 3; //捐赠记录
}

message SyncAllianceValueableItemRecordAddNtf{
    repeated ProAllianceValueableItemDonateRecord Records = 3; //新的捐赠记录
}

message ProAllianceValueableItemDonateRecord{
    RankSimpleUser UserInfo = 1; //玩家信息
    int32  VaItemId = 2; //贵重物品id
    int32  PartId = 3; //碎片id
    int32  PartNum = 4; //碎片数量
    int64  DonateMs = 5; //捐赠时间
}

//行会捐献
message AllianceMemberDonate
{
    PropKeyValue CostItem = 1; //捐赠的道具
    int64        LastDonateTime = 2; //最后捐赠时间
    int64        UserID    = 3; //成员id 服务器用
    int32        AllianceID = 4; //联盟id 服务器用
    int32        Code       = 5; //center返回码
    int32        AsValueableItemId = 6; //联盟贵重物品id
    int32        AsValueableItemLevel = 7; //贵重物品等级
    PropKeyValue  AsValueablePartInfo = 8; //贵重物品碎片的信息 id ，总数
}

message AllianceValueableItemAllDonate{
    repeated PropKeyValue CostItems = 1; //捐赠的道具
    int64        LastDonateTime = 2; //最后捐赠时间
    int64        UserID    = 3; //成员id 服务器用
    int32        AllianceID = 4; //联盟id 服务器用
}

//推送捐赠的增量信息
message SyncAllianceValueableItemAddNtf{
    repeated AllianceValueableItemInfo AsValueableItems = 1;//新增的贵重物品信息
}

//行会捐赠排行榜
message AllianceDonateRank
{
    repeated  AllianceMemberDonate DonateRank = 1; //捐赠排行
    int64 UserID                    = 2; //请求玩家id 中心服需要
    int32 AllianceID                = 3; //联盟id 服务器用
}


message SyncUserApplyList{
    int64 		UserID 			= 1;
    repeated int32 		AllianceList 	= 2; 	// 申请成功的联盟
}

//未发放的红包,自己身上
message RedPacket{
    int64 SelfObjectID  = 1;//自身红包ID
    int64 ObjectID      = 2;//联盟红包ID
    int32 ConfID        = 3;//红包类型
    int64 Time          = 4;//红包获得时间
    int64 SendTime      = 5;//红包发放时间
}

//红包玩家信息
message RedPacketUserInfo{
    int64 UserID            = 1;//玩家ID
    string Name             = 2;//玩家名字
    int32 ColorfulUserName  = 3;//玩家彩色名字
    int32 Icon              = 4;//玩家头像
    int32 IconFrame         = 5;//玩家头像框
}

//抢红包记录
message RedPacketDetail{
    RedPacketUserInfo user  = 1;//领取者信息
    int32 Diamond           = 2;//抢得的金额
    int64 Time              = 3;//抢红包的时间
}

//已发放的红包,联盟身上
message AllianceRedPacket{
    int64 ObjectID    = 1;//联盟红包ID
    int32 ConfID      = 2;//红包类型
    int64 Time        = 3;//红包发放时间
    RedPacketUserInfo SenderUser  = 4;//红包发放者信息
    int32 State       = 5;//状态   0-不可领取 1-可以领取 2-已领取
    repeated RedPacketDetail List = 6;//抢红包记录
}

//联盟红包红点
message AllianceRedPacketRed{
    bool IsView                                             = 1;//[红点]当日查看 false-未查看 true-已查看
    bool IsNotice                                           = 2;//[红点]当日提醒 false-提醒   true-关闭提醒
}

//联盟红包详情
message AllianceRedPacketInfo{
    int64 UserID 		                                    = 1;//玩家ID(服务器用)
    repeated RedPacket MyRedPacket                          = 2;//拥有的红包
    repeated AllianceRedPacket AllianceRedPacketList        = 3;//联盟当前已发放的红包
    int32 RedPacketNum                                      = 4;//当天已经抢的红包数
    int32 SendRedPacketNum                                  = 5;//当天已经发的红包数
    int32 DiamondTotal                                      = 6;//当天已经抢的金额总数
    bool IsView                                             = 7;//[红点]当日查看 false-未查看 true-已查看
    bool IsNotice                                           = 8;//[红点]当日提醒 false-提醒   true-关闭提醒
    int64 LimitTime = 9;
}

//联盟红包操作请求(发红包,查看详情,抢红包)
message AllianceRedPacketOperReq{
    int64 UserID 		= 1;//
    int64 SelfObjectID  = 2;//玩家身上红包ID
    int64 ObjectID      = 3;//联盟红包ID
    int32 ConfID        = 4;//红包类型ID(服务器用)
    int32 Action        = 5;// 1-发红包  2-抢红包 3-查看红包详情
}

//联盟红包操作回复
message AllianceRedPacketOperRes{
    AllianceRedPacket allianceRedPacket = 1;//操作红包的信息
    int32 Action                        = 2;// 1-发红包  2-抢红包 3-查看红包
    int64 UserID 		                = 3;//玩家ID(服务器用)
    int64 SelfObjectID                  = 4;//玩家身上红包ID
    bool  Result                        = 5;//操作结果 true-抢红包成功  false-抢红包失败
}

//红包推送
message AllianceRedPacketDetailRes{
    AllianceRedPacket allianceRedPacket = 1;
}

message AlliancePOPGameData{
    int32 ID                    = 1;//本轮随机到的ID
    int32 Male                  = 2;//男性
    int32 Female                = 3;//女性
    int32 Age1                  = 4;//年龄段1
    int32 Age2                  = 5;//年龄段2
    int32 Age3                  = 6;//年龄段3
    int32 Age4                  = 7;//年龄段4
    int32 Age5                  = 8;//年龄段5
    int32 Savor1                = 9;//茶艺口味偏好
    int32 Savor2                = 10;//咖啡口味偏好
    int32 Savor3                = 11;//甜品口味偏好
    int32 Savor4                = 12;//蛋糕口味偏好
    repeated int32 StaffObjIds  = 13;//员工
    repeated int32 CookBaseIds  = 14;//菜品
    repeated int32 ADTypes      = 15;//宣传方式
    repeated int32 CustomerChances  = 16;//特殊顾客滑块个数
}

message AllianceAdvertiseActiveRankInfo{
    int32 AllianceID = 1;               //联盟ID
    repeated int64 MemberUserIDs = 2;   //成员列表
    int64 ChapterUserID = 3;            //盟主ID
    int32 Rank = 4;                     //排行
    int64 Score = 5;                    //分数
}

message AllianceAdvertiseActiveReward
{
    repeated AllianceAdvertiseActiveRankInfo List = 1;
}

//联盟推广详情
message AlliancePOPInfo
{
    int64 UserID                    = 1; //请求玩家id 中心服需要
    int64 Count                     = 2; //剩余推广次数
    int64 SelfFans                  = 3; //自己贡献粉丝数量
    int64 Fans                      = 4; //联盟粉丝数量
    int64 DayFans                   = 5; //联盟粉丝当日增加数量
    int64 RefreshTime               = 6; //剩余推广次数刷新时间
    int32 UserRoleImage             = 7; //玩家角色半身像
    repeated ProItemInfo Items      = 8; //可能的奖励物品,活动期间额外奖励
    AlliancePOPGameData GameData    = 9; //游戏数据
    bool  IsActive                  = 10;//是否联盟推广活动期间 false-关闭 true-开启
    int64 ActiveEndTime             = 11;//本轮活动结束时间
    int64 ActiveFans                = 12;//联盟活动期间粉丝数量
    int64 ActiveSelfFans            = 13;//活动期间自己贡献粉丝数量
    repeated ProRankInfo RankList   = 14;//排行榜信息列表(自己联盟附近2个)
    int32 ClientFlag                = 15; // 标识是客户端发送的，服务器直接透传
    repeated ProBagItem EventExtraAward = 16; // 活动额外掉落奖励
    int64 ActiveStartTime           = 17;//本轮活动开始时间
    int32 AdvServerID               = 18;//参加联盟推广的当前主GS服务器ID(服务器用)
}

//联盟推广结算请求
message AlliancePOPReq
{
    int64 UserID                    = 1; // 请求玩家id 中心服需要
    int32  	SelectStaffObjectID 	= 2; // 选择的服务员
    int32  	SelectCookBaseID 	    = 3; // 选择的餐品
    int32  	SelectADType 			= 4; // 选择的宣传方式
    repeated bool Customer1Opr      = 5; // 特殊顾客1操作结果
    repeated bool Customer2Opr      = 6; // 特殊顾客2操作结果
    repeated bool Customer3Opr      = 7; // 特殊顾客3操作结果
    ProBagItem   FansItem           = 8; // 选择的增加粉丝的道具
}

//联盟推广结算回复
message AlliancePOPRes
{
    int64 UserID                   		= 1; //请求玩家id 中心服需要
    int32 AllianceID               		= 2; //联盟id
    int64 Fans                     		= 3; //当前的粉丝数
    int64 NewFans                  		= 4; //新得到的粉丝
    int64 CookNum                  		= 5; //当前厨艺值
    repeated ProBagItem		Res			= 6; //本次结算得到的奖励
    repeated ProCustomer	Customers 	= 7; // 客人列表
    bool  IsActive                      = 8; //是否联盟推广活动期间 false-关闭 true-开启
    int64 ActiveFans                    = 9; //联盟活动期间粉丝数量
    int64 SelfFans                      = 10; //自己贡献粉丝数量
    int64 ActiveSelfFans                = 11; //活动期间自己贡献粉丝数量
    repeated ProRankInfo RankList       = 12; //排行榜信息列表(自己联盟附近2个)
    ProBagItem   FansItem               = 13; // 选择的增加粉丝的道具
    int32 SelectRightNum                = 14;//推广选择题成功个数(服务器用)
    int32 MiniGameCount                 = 15;//出现滑块小游戏总次数(服务器用)
    int32 MiniGamRightNum               = 16;//滑块小游戏成功总次数(服务器用)
    int32 Count                         = 17;//减负次数
    int32 AdvServerID                   = 18;//参加联盟推广的当前主GS服务器ID(服务器用)
}

//行会粉丝
message AllianceMemberFans
{
    int32        AllianceID = 1; //联盟id
    int64        Fans      = 2;  //粉丝数
    int32        Rank      = 3; //当前排行
    int64        LastUpdateTime = 4; //最后更新时间
}

//行会粉丝排行榜
message AllianceFansRank
{
    int64 UserID                    = 1; //请求玩家id 中心服需要
    repeated ProRankInfo RankList   = 2; //排行榜信息列表
    ProRankInfo MyRankInfo          = 3; //自己的排行榜信息
    int32 RankType                  = 4; //3-总榜  4-活动联盟增量榜  5-活动个人增量榜
    int32 PageId                    = 5; //页码
    int64 RankStartTime             = 6; //排行榜开始时间  0表示永久排行榜
    int64 RankEndTime               = 7; //排行榜结束时间  0表示永久排行榜
    int32 AdvServerID               = 8;//参加联盟推广的当前主GS服务器ID(服务器用)
}

//行会粉丝贡献记录请求
message AllianceFansRecordReq
{
    int64 UserID                    = 1;
    int64 LastTime                  = 2;
}

//行会粉丝贡献记录
message AllianceFansRecord
{
    int64 UserID                    = 1;  //贡献玩家ID
    string UserName                 = 2;  //贡献玩家名字
    int32 NameColor                 = 3;  //拥有者的炫彩名字颜色
    int64 Fans                      = 4;  //贡献粉丝数值
    int64 Time                      = 5;  //贡献时间
    bool  IsShowed                  = 6;  //是否查看
    int32 RankChange                = 7;  //名次的变化
}

//玩家粉丝贡献
message AllianceFansRecords
{
    repeated AllianceFansRecord List  = 1;
}

message AllianceAdvertiseActiveEndNtf
{
    int64 UserID = 1;            //玩家ID
    int64 Fans = 2;              //推广活动贡献粉丝
    int32 SelfRank = 3;          //联盟内排名
    int32 Rank = 4;              //联盟排名
}

message GSServerInfo
{
    int32  ServerID     	  = 1;  	// ServerID
    string KingAllianceName  = 2;  	// 国王所属联盟
    string King        	  = 3;  	// 国王
    int64  ProtectExpiredMs  = 4;  	// 保护期过期时间
    bool   ZVZFlag           = 5;  	// ZVZ标记
    int32  Icon              = 6;  	// 头像表情
    string Avatar            = 7;  	// Avarta
    int64  KingUID           = 8;  	// 国王UID
    int32  NationFlag        = 9;  	// 过期
    bool   TopBattleServerFlag = 10; 	// 巅峰战场标记
    int32  RevengeAttackFlag = 11;   	// 复仇进攻
    int32  RevengeDefendFlag = 12;   	// 复仇防御
    int32 	KingAllianceServerID = 13;	// 所属联盟的联盟服务器ID
    int32  KingServerId         = 14;  // 國王服務器ID
    int32  RevengeAttackCD      = 15;  // 复仇进攻CD时间
    int32  LivableFlag 	  = 16;//宜居服务器标志
    int64  EndTime 		  = 17;//到时
}


//搜索用户
message SearchUsersReq
{
    string Prefix				= 1;
    int64	UserID				= 2;// GS 自动填写
}


message SearchUsersResult
{
    repeated SimpleUser Users			= 1;
}



message AccountCreateInfo
{
    int32	Type				= 1;	// ACCOUNT_TYPE_UCENTER 平台统一帐号 本地帐号
    string Name				= 2;
    string	Password			= 3;
    string UDID				= 4;
    string MAC					= 5;
    string Locale				= 6;
}

message AccountFindPasswordInfo
{
    int32	Type				= 1;
    string Name				= 2;
}

message AccountCreateCheckReqInfo
{
    string OpenUDID			= 1;
}


// 到平台获取角色列表
message GetRoleListReqInfo
{
    string 	Account				= 1;
    int32 	PlatformID 			= 2;
}
// 平台组获取角色列表
message GetGuestRoleListReqInfo
{
    string UserName			= 1;
}

message SimpleRole
{
    int64	UserID				= 1;
    int32	ServerID			= 2;
    string Name				= 3;
    int32	Icon				= 4;
    int64	Power				= 5;
    SimpleAlliance Alliance 	= 6;
    string Avatar				= 7;
    bool	Forbidden			= 8;
    int32	GodID				= 9;
    int32   Level               = 10;
    int32   IconFrame           = 11;
    string  ServerName           = 12;
    int32   Flag                = 13;//服务器标记:0-SERVER_FLAG_NORMAL-普通服 1-SERVER_FLAG_NEW-新服
    int32   BlueVipLevel        = 14; // 蓝钻等级
    int32   BlueVipType         = 15; // 蓝钻种类
}

message RoleList
{
    repeated SimpleRole	List			= 1;
}


message IAPSignReq
{
    int32	IAPType			= 1;
    string	AppStore		= 2;

}

//支付取消
message IAPCancelReq
{
    int32	PackageID		= 1;
}

message IAPPriceNode
{
    string ProductID	= 1;
    int32	CurrencyType	= 2;
    int32	Price		= 3;
}



//GM指令
message GMCmdReq
{
    string 	Cmd					= 1;
    int64 		UserID				= 2;	// 客户端无须上传 Gate 自动组装
}

//GM指令返回信息
message GMCmdInfo
{
    int32	Code				= 1;
    string Result				= 2;
}


//踢掉客户端连续信息
message KickConnection
{
    int32	Action				= 1;
}

message GSAllianceBroadCastInfo
{
    int32	ServerID		= 1;
    int32	AllianceID		= 2;
    string	Msg				= 3;
}

message GSReloadConfigInfo
{
    int32	Type			= 1;
    int32	ServerID		= 2;
}


//服务器通用返回接口
message ProxyCommonAckInfo
{
    int32	Code			= 1;
    ProxyCtxInfo Ctx		= 2;
    string Result			= 3;
}

// Gate 通知GS存盘消息
message SnapshotInfo
{
    int64	TimeStamp			= 1;
}


//详细内容
message ProxyNotice
{
    int32	Language		= 1;
    string Title			= 2;
    string Content			= 3;
}

//系统通知
message ProxySystemNoticeInfo
{
    ProxyCtxInfo Ctx		= 1;
    int64	CreateTime		= 2;
    repeated ProxyNotice MultiLanguage	= 3;
}

//服务器开复时间
message ProxyServerOpenTimeInfo
{
    int32	ServerID		= 1;
    int64	OpenTime		= 2;
    ProxyCtxInfo Ctx		= 3;
}

//设置默认登陆gs
message ProxySetDefaultGS
{
    int32	ServerID		= 1;
    ProxyCtxInfo Ctx		= 2;
}

// 排行榜排名消息变化推送
message SyncRankChangeNtf {
    RankingType  Type = 1; // 榜单类型
    int32 			 Rank = 2; // 当前排名
}

enum RankingType {
    RankingTypeNone = 0;
    RankingTypeProper   		= 1; // 实力榜
    RankingTypeStage    		= 2; // 关卡榜
    RankingTypeIntimate 		= 3; // 亲密榜
    RankingTypeVisitScore 	= 4; // 觐见人气榜
    RankingTypeAlliance   	= 5; // 联盟榜(赚速)
    RankingTypeInComeSpeed 	= 6; // 赚速
    RankingTypeTowerDungeon = 7; // 爬塔关卡榜
}

// 排行榜请求
message RankingReq
{
    RankingType  Type  = 1; // 榜单类型
    int32        Num	=	2; // 榜单数量，拉取前多少个排名
}

// 排行榜
message RankingUser {
    int32 			Ranking  			  = 1; // 名次
    int64 			Value    			  = 2; // 分数
    int64				UserID				  = 3; //(个人榜为玩家ID,联盟榜为联盟ID)
    string 			Name      		  = 4; // 名字
    int32  			Icon 					  = 5; // 头像
    int32  			Title 			 	  = 6;// 称号(爵位)
    string  		AllianceName 	  = 7;// 联盟名称
    int32 			IconFrame       = 8; // 头像框
    int32 			Skin					  = 9; // 皮肤ID
    int64 			ServerID			  = 10; // 区服id
    SimpleUser  UserInfo   			= 11; // 用户信息(个人榜返回)
    SimpleAlliance AllianceInfo = 12; // 联盟信息(联盟榜返回/只带普通信息)
}

// 排行榜返回响应
message RankingAck
{
    repeated RankingUser RankUsers 		= 1; // 已排序好的额排行榜数据
    bool								 IsInRank			=	2; // 是否进榜 (进榜的情况下，客户端根据ranking数据判断排名显示)
    RankingUser 				 OneSelf  		= 3; // 玩家自己(或所在联盟)的数值，根据条件不同，可能为空
    bool 								 IsCelebrated = 4; // 是否已经庆祝
}

// 庆贺请求
message CelebrateReq
{
    RankingType Type 		= 1; // 榜单类型
}

// 庆贺响应
message CelebrateAck
{
    RankingType Type 		= 1; // 榜单类型
}

message RankCelebrateInfo {
    RankingType Type 			= 1; // 榜单类型
    bool 				Celebrate = 2; // 是否庆贺
}

message SyncRankCelebrateNtf {
    repeated RankCelebrateInfo Data = 1; // 庆贺数据
}

// 对手信息
message MatchPlayer
{
    SimpleUser User        = 1; // 玩家信息
    int32 Level            = 2; // 第一个Actor等级
    int32 SkirmishRewardID = 3; // 表ID
}

// 检查名字是否存在，type 0:用户名
message GSNameCheckReq
{
    string Name			= 1;	// 需要椒盐的名字
    int32	Type			= 2;	// 0 用户名 1联盟名
    int64	UserID			= 3;	// 用户ID
}

message GSNameCheckAck
{
    string	Name			= 1;	// 名字
    int64	UserID			= 2;
    int32	Code			= 3;	// 为0返回值正常
}

//通知gs名字改变
message CSUpdateNameNtfInfo
{
    int64 UserID			= 1;
    string OldName			= 2;
    string NewName			= 3;
}


message GSSyncBindInfo
{
    int64	UserID						= 1;
    string MailBox						= 2;//绑定邮箱
    bool   IsAward						= 4;//没领奖
}

message ServerOpenStatInfo
{
    ProxyCtxInfo Ctx		= 1;
    string Servers			= 2;
}

message CommonStringMsg
{
    ProxyCtxInfo Ctx		= 1;
    string Common			= 2;
}

message UserShowInfo
{
    int64   Uid  = 1;
    string  Name = 2;   //
    string  Abbr = 3;
    int32   Icon = 4;
    string  Avatar = 5; //
    TilePos Pos   = 6;  //
}

message GsGetServerMapListReq {
    int64     UserId 					  = 1;  // 角色ID
    repeated int32     ValidServerIdList          = 2;  // 需要从Gate转一次，只有Gate才控制着服务器列表的可见关系
}

message GsGetServerMapListAck {
    int64     UserId 					  = 1;  // 角色ID
    repeated GSServerInfo ServerInfoes  		  = 2;  // 服务器列表
}

message GetStatPropReq
{
    int64				UserId			= 1;
    int64 				ReqUserID		= 2;//发出请求的玩家
    bool  				QueryFlag		= 3;//跨服查询标记
    int32 OpType 			= 4;
}

message GSServerStatReqInfo
{
    int64	SessionID		= 1;
    int64	Power			= 2;
}

message GSServerStatInfo
{
    int64	SessionID		= 1;
    int64	Power			= 2;
    int32	Total			= 3;
    int32	EDAU			= 4;
    int32	RegisterCount		= 5;
}

message GSSetPayCBUrlInfo
{
    string LYPayCBUrl			= 1;
    string YJPayCBUrl			= 2;	//易接
    string Pay360CBUrl			= 3;
    string UCPayCBUrl			= 4;
    string XiaoMiPayCBUrl		= 5;
    string BaiduPayCBUrl		= 6;
    string HuaWeiPayCBUrl		= 7;
    string VivoPayCBUrl		= 8;
    string OppoPayCBUrl		= 9;
}

message ProxyServerStatInfo
{
    int32	ServerID		= 1;
    int64	OpenTime		= 2;
    string Lang			= 3;
    int32	PlatformID		= 4;
    string	Weight			= 5;
    int64	Power			= 6;
    int32	Total			= 7;
    int32	EDAU			= 8;
    int32	CurRegister		= 9;
    int32	MaxRegister		= 10;
    int32	OpenRegister		= 11;
    int32	AutoOpen		= 12;
    int32	Minority		= 13;
    string Languages		= 14;
}

message ProxyGetServerStatInfo
{
    ProxyCtxInfo Ctx		= 1;
    repeated ProxyServerStatInfo List	= 2;
}

message ProxyChgServerStatInfo
{
    ProxyCtxInfo Ctx		= 1;
    ProxyServerStatInfo Info	= 2;
}

message ProxyChgServerStatAckInfo
{
    ProxyCtxInfo Ctx		= 1;
    int32	Code			= 2;
}

message ProxyBindLinkInfo
{
    ProxyCtxInfo Ctx		= 1;
    string Token			= 2;
    string UserName		= 3;
    int64	UserID			= 4;
    string Password		= 5;
    string AppID			= 6;
    int32	EnterType		= 7;	// 绑定该项有效
    string	IP			= 8;	// 链接该项有效
}


message ProxyBindLinkAckInfo
{
    ProxyCtxInfo Ctx		= 1;
    int32	Code			= 2;
    string NewToken		= 3;
}

message ProxyForbidCmdInfo
{
    ProxyCtxInfo Ctx		= 1;
    int32	Type			= 2;	// 1添加  2删除
    int32	API			= 3;
}

message ProxyForbidCmdAckInfo
{
    ProxyCtxInfo Ctx		= 1;
    int32	Type			= 2;
    int32	Code			= 3;
    repeated int32	CmdList			= 4;
}

message ProxyCheckComplainReq
{
    ComplainReq  RawMsg    = 1;

}

message GsSearchUserReq
{
    int64 Uid			 = 1;
    int64 SearchUid 	 = 2;
    int32 Reason 		 = 3;
}

message GsSearchUserAck
{
    int32  Result       = 1;
    int64 Uid           = 3;
    int32 Reason 		 = 4;
}

message GetOrderFromSdkInfo
{
    string AccessToken			= 1;
    string CpOrderNumber		= 2;
    string NotifyUrl			= 3;
    int32 OrderAmount			= 4;
    string OrderTitle			= 5;
    string OrderDesc			= 6;
    string ExtInfo				= 7;
    string OrderTime			= 8;
}

//验证
message AuthReq
{
    string	UserName			= 1;
    string Password			= 2;
    string	UDID				= 3;
}

message AuthAck
{
    string	Token				= 1;
    string	ExtraData			= 2;	// "id":"123456","udid1":"xxx"
}

// 更新联盟信息 到Gate
message GSUpdateAllianceInfo
{
    int64	UserID			= 1;
    int32	AllianceID		= 2;
}

message GSUpdateOpenTimeInfo
{
    int32	ServerID		= 1;	//
    int64	OpenTime		= 2;
    int32 TZ					= 3; // 时区
}



//通知参数
message NoticeParam
{
    int32 NoticeID  = 1; //唯一id
    int32 ParamType = 2; //类型 1:副本boss 2：关注的拍卖品
    int32 ParamSet = 3; //开关 1:开启 2：关闭
    repeated int64 ParamValue = 4; //参数组 例如：dungeonID
}


// 邮件内容
message MailContent
{
    string     Content = 1;  // 邮件文本内容
    repeated ProBagItem  Items   = 2;  // 附件列表

}

message ExtParamStr {
    int32  Type    = 1; // 见EXT_PARAM_TYPE_XXX
    string Param   = 2; // 文本
}

// 邮件基础信息
message MailInfo
{
    int64  MailID           = 1;   // 邮件ID
    int64  SenderID         = 2;   // 发送者ID
    int32  TemplateID       = 3;   // 邮件模板
    int32  Type             = 4;   // 邮件类型
    string SenderName       = 5;   // 发送者名称
    bool   Readed           = 6;   // 是否已读
    bool   Acquired         = 7;   // 是否已领取附件
    string Title            = 8;   // 邮件标题
    MailContent MailContent = 9;   // 邮件内容
    int64  CreateTime       = 10;  // 邮件时间
    repeated ExtParamStr    Params = 11;  // 邮件内容扩张参数
    repeated ExtParamStr    TitleExtParams = 12;  // 邮件标题扩张参数
    int32 M_MailImportantLvl = 13;
}

// 请求拉取邮件列表
message GetMailsReq
{
    int64  UserID  = 1;    //
    int32  PageID  = 2;    //分页
    int32 M_MailRedpointCfg = 3;
    int32 M_MailImportantLvl = 4;

}

// 返回邮件列表
message GetMailsInfo
{
    repeated MailInfo Mails = 1;    // 邮件列表
    int32    TotalMail = 2;         // 邮件总数
    int32    IsNewMail = 3;         // 是否新发邮件，0 表示不是新邮件，1 表示是新邮件
    int64 	 UserID    = 4; 		// 用户ID
    int32 M_MailRedpointCfg = 5;
    int32 M_MailImportantLvl = 6;
}

// 请求阅读邮件的详细内容请求
message ReadMailReq
{
    int64  MailID  = 1;
    int64  UserID  = 2;
}

// 请求阅读邮件的详细内容回复
message ReadMailInfo
{
    int64  MailID  = 1;
    int64  UserID  = 2;
}

// 请求获取邮件附件
message GetMailAttachsReq
{
    int64 MailID    				= 1;
    int64 UserID   	 				= 2;
    int32 ServerID  				= 3; // 客户端不用发送这个值
    int32 WearContainerSpace 		= 4; // 客户端不用发送这个值
    int32 IsAllAtta 				= 5; // 是否批量领取 1；单独领取 2：批量领取
    int32 M_MailImportantLvl = 6;
}

// 请求获取邮件附件回复
message GetMailAttachsInfo
{
    repeated int64      MailIDs = 1;  // 领取附件的邮件ID集合 （不包括以前领取过附件的邮件）
    repeated ProBagItem Items   = 2;  // 领取的附件集合
}

// 批量领取附件
// 回包返回 GetMailAttachsInfo
message BulkGetMailAttachsReq
{
    int64 UserID    = 1;
    int32 ServerID  = 2;
    int32 LeftCells = 3;
}

// 请求删除指定的邮件
message DeleteMailReq
{
    int64  MailID = 1;
    int64  UserID = 2;
}

// 请求删除指定的邮件
message DeleteMailInfo
{
    repeated int64 MailIDs = 1; // 返回被删除的邮件集合
    int64 		UserID 	   = 2;
    int32 M_MailImportantLvl = 3;
}

// 批量删除邮件
message BulkDeleteMailReq
{
    int64 UserID = 1;
    int32 M_MailImportantLvl = 2;
}

// 内部通信的通用包
message MailCommonAckInfo
{
    int32 ServerID = 1;
    int64 UserID   = 2;
    int32 API      = 3;
    int32 Code     = 4;
}

// Mail 通知 Center 给玩家发放邮件中的附件
message MailAttachAcquiredAck
{
    int32      	ServerID    = 1;
    int64     	UserID      = 2;
    repeated    MailAttachmentsInfo AttInfoList   = 3;
    int32      	IsAllAtta = 4; // 是否批量领取 1；单独领取 2：批量领取
}

message MailAttachmentsInfo
{
    int64       MailID   = 1;
    repeated    ProItemInfo Attachments = 2; //附件列表
    int32       Reason      = 3; //邮件附件原因
    int64       MailMs = 4; //邮件创建时间
}


// 背包剩余空间不足
// 在 GS 领取附件时再次检查背包空间
// 如果空间不足，发送这个消息给 Mail
message MailInsufficientBackpackSpace
{
    int64 UserID  = 1;
    repeated int64 MailIDs = 2;
}

// 请求发送邮件
message SendMailReq
{
    int64      UserID      = 1;
    int32      ServerID    = 2;
    int32      TemplateID  = 3;
    int32      Type        = 4;
    string     Title       = 5;
    string     Content     = 6;
    //repeated ProBagItem  Items = 7;
    repeated ProItemInfo   Items = 7;  // 该结构和ItemInfo一致
    repeated ExtParamStr   ExtParams   = 8;   // Content中的Param
    int64    CreateMs      = 9;
    repeated ExtParamStr   TitleExtParams = 10; // Title中的Param
    int32	 Reason			= 11;
    int64    StartTime      = 12;    //邮件开始发送时间 给新玩家发送
    int64    EndTime        = 13;    //邮件结束发送时间 给新玩家发送
    int64    SysNewUserMailID = 14;  //系统新玩家邮件id
    int32    ExpireDay      = 15;   //过期天数
    int32 M_MailImportantLvl = 16;
}

// 通知目标服务器加载跨服的用户
message NotifyServerLoadUser
{
    int32 FromServerID = 1;    // 来源服务器
    int64 UserID = 2;
}

// 通知Gate绑定用户
message NotifyGateRebindUser
{
    int64 UserID = 1;
    int32 ServerID = 2;
    int32 SessionID = 3;
}

message PrivateChannelOpt {
    int64 UserID = 1;
    int64 OnTopMs = 2;      // 取消上0
}

// 设置私聊属性
message SetPrivateChannelOptReq {
    repeated PrivateChannelOpt  Opts  = 1;
}

message SetPrivateChannelOptAck {
    repeated PrivateChannelOpt  Opts  = 1;   // 下行全信息
}

// 通知客户端聊天的频道列表
message NotifyChatChannels
{
    string SystemChannelID   = 1; // 系统
    string CrossChannelID    = 2; // 跨服
    string AllianceChannelID = 3; // 联盟
    string TranslateAddr     = 4; // 翻译地址

    repeated PrivateChannelOpt  PrivateOpts  = 5; // 私聊属性, 下发时按照OnTopMs排序好
    string TransAccessKey    = 6; // 翻译需要的Key
    string LoginToken        = 7; // 游密Token
}

// 通知客户端聊天的频道列表
message SyncAllianceChatChannelNtf
{
    string AllianceChannelID = 1; // 联盟
}



message AllianceOperInfo
{
    int32   AsRank          = 1;   // 联盟职位
    MoreSimpleUser SrcUser  = 2;   // 角色1
    MoreSimpleUser TargetUser = 3; // 角色2
}


message ChatMessageBinData
{
    int32   BinType         = 1; //
    ProBagItem Item  		 = 2; // 物品信息
    int32   DungeonId       = 3; // 关卡ID
    MoreSimpleUser TargetUser = 4; // 对方信息
    AllianceOperInfo AsOperInfo = 6; // 联盟操作信息
}

message SearchAllianceInfoReq
{
    int64  Uid              = 1; // 服务器使用
    int32  SearchType       = 2; // 请求类型， SEARCH_BY_XXX
    string Name             = 3; // 请求字符串
    int32 AllianceLevel = 4; //联盟等级
    ProMaxMinValue  PowerRange = 5; //战力区间
}

message SearchAllianceInfoAck
{
    repeated MiddleAlliance List 	 = 1;  //
}

message ProMaxMinValue
{
    int64 Max = 1; //上限
    int64 Min = 2; //下限
}

//根据条件筛选联盟
message ProFilterAllianceInfoReq
{
    int32 AllianceLevel = 1; //联盟等级
    ProMaxMinValue  PowerRange = 2; //战力区间
    int64 UserID       = 3; //用户id
}

//领取联盟任务
message GetAllianceQuestToUser
{
    int32 QuestID  = 1;//任务id
    int32 AllianceID = 2; //服务器用
    int64 UserID     = 3; //服务器用
    int64 EndMs      = 4;  //联盟任务刷新时间
    int32 Code       = 5; //错误码 服务器用
    repeated ProItemInfo ProItemInfos = 6; // 从center过来 把奖励带下来，保存
    int64 ClientRefreshTime = 7; //客户端显示的联盟任务列表手动刷新时间
    int32 Rate       = 8; //领取任务倍数
}


//推送的订单列表
message GetGuestOrderMsgList
{
    repeated GuestOrderMsg OrderList = 1;
}

//订单msg
message GuestOrderMsg
{
    int64 OrderID = 1; //订单id
    int32 GuestID = 2; //顾客id
    repeated ConsumptionMsg ConMsgList = 3; //消费单列表
    int64 TimeMs = 4; //顾客用餐超时时间戳
}

//消费单msg
message ConsumptionMsg
{
    int32 ID = 1; //餐品id
    int32 Num = 2; //数量
    PropKeyValue Price = 3;//价格
}

message BuyItemReq
{
    int32 BuyType    = 1; // 购买类型
    int32 BaseId  = 2; // ID
    int32 Count   = 3; // 数量
    int32 ShopID  = 4; // 商店id
    int32 ResType = 5; // 花费的资源类型
    int32 EntityID = 6 ; //客户端使用
    PutScenceObjectReq PutScenceObject = 7; //
    int64 UserID   = 8; //服务器用
    ReplaceScenceObjectReq ReplaceScenctObj = 9; //  购买并替换时填，BuyType为 BUY_REPLACE_ON_ROOM
    CoverFurnitureSkinReq CoverFurnitureSkinObj = 10; //购买皮肤并使用时填，BuyType为 BUY_SKIN_COVER
}

message BuyItemAck
{
    int32 BaseId = 1; //商品id
    repeated int64 ObjectIDs = 2; //objID
    int32 ShopID   = 3; //商店id
    int32 BuyType    = 4; // 购买类型
    int32 EntityID = 5 ; //客户端使用
    ShopGoodsInfo GoodsInfo = 6; //用于刷新此商品
}

//通用商店购买协议
message BuyCommonShopItem
{
    int32 ItemID = 1;
    int32 ShopID = 2;
    int32 Count  = 3;
    int64 UserID = 4;
    int32 Code   = 5; //错误码 服务器用
    int32 State   = 6;    //状态，1 已解锁  2 未解锁 3 购买数量达到最大值
    int32 ResType = 7; // 花费的资源类型
    int32 BaseID  = 8;  //商店商品id
}

message GetCommonShopInfoReq
{
    int32 ShopID = 1;      // 商店id
    int32 Index  = 2;  	   // 拉取索引
    int32 Size   = 3;      // 拉取数量  0 则表示全部拉取 不分页
    int32 SubType = 4;     // 子类型
    int64 UserID  = 5;     // 玩家id 服务器用
    int32 ItemBaseId = 6;  //背包扩容道具请求时使用
}

message GetCommonShopInfoAck
{
    int32 ShopID = 1;      // 商店id
    repeated ShopGoodsInfo ShopList = 2; // 商品数据
    int32 SubType = 3;     // 子类型
    int64 FlushTime = 4;   // 商店刷新时间
    int32 ItemBaseID = 5;// 单独拉取某个商品的时候回传给客户端
    int64 OpenTimeMs = 6; //开启时间
    int64 EndTimeMs  = 7; //结束时间
}

message ProShopUpdateMsg
{
    repeated GetShopInfoAck UpdateShopList = 1; //新刷新的家具商店商品信息
    repeated GetCommonShopInfoAck UpdateCommonShopList = 2; //新刷新的common商店商品信息
}

message CanContinueBuy
{
    int32 CanBuy   = 1; //能否继续购买的状态，0表示可以购买，>0 表示不能购买的原因
    int32 BaseID   = 2;
    int32 ShopID   = 3;
}

message PriceInfo
{
    int32  ResType  = 1; // 资源类型
    int32  Cost     = 2; // 数量
}

message ShopGoodsInfo
{
    int32 BaseId  = 1;   //
    int32 CurNum  = 2;   // 当前数量
    int32 MaxNum  = 3;   // 最大数量
    repeated PriceInfo Prices = 4; // 价格信息
    int32 State   = 5;    //状态，1 已解锁  2 未解锁 3 购买数量达到最大值 4 已拥有
    repeated UnlockData UnLock = 6; //解锁条件
    int32 ShopID  = 7;  // 商店id
    int64 EndTimeMs = 8; //商品结束购买时间  0 表示不限时
    int32 DisCount = 9; //商品折扣 百分比 *100
    int32 GoodsObjID = 10; //商品的唯一id 用于区别重复商品用的
    ProBagItem  BagItem = 11; //商品的具体内容
    int32 FlushType = 12; //商品限购刷新类型
    int64 FlushTimeMs = 13;//商店限购刷新时间
}

message GetShopInfoReq
{
    int32 PageId = 1;      // 切页类型
    int32 Index  = 2;  	   // 拉取索引
    int32 Size   = 3;      // 拉取数量  0 则表示全部拉取 不分页
    int32 SubType = 4;     // 子类型
    int64 UserID  = 5;     // 玩家id 服务器用
}

message GetShopInfoAck
{
    int32 PageId = 1; 	   // 切页类型
    repeated ShopGoodsInfo ShopList = 2; // 商品数据
    int32 SubType = 3;     // 子类型
    int64 FlushTime = 4;   // 商店刷新时间
}

message SyncShopInfoListNtf
{
    int64    UserID         = 1;
    repeated GetShopInfoAck OpenShopList = 2; //商店信息
    repeated int32 DeletShopIDs = 3; //需要删除的商店id
    repeated GetCommonShopInfoAck OpenCommonShopList = 4; //通用商店
}

message StorageItem
{
    int32 BaseId = 1;     // BaseID
    int64 ObjectId = 2;   // 物品ObjectID
    int32 Level  = 3;     // 家具等级
    int32 Num    = 4;     // 数量
    int32 SkinId = 5;    // 皮肤
    int32 FurnitureSubTypeIndex = 6;  // 同类家具的索引编号，双人桌1等，吧台1等
}

message SyncStorageChangeNtf
{
    repeated StorageItem ChangeItems = 1;  // 变更的道具
}

message ShopRedPointCfg
{
    int32    Type = 1;    				    // 商店类型
    repeated PriceInfo  MinPrice = 2; 		// 该切页下最低的商品价格
    repeated int32      ShopItemList = 3;   // 特殊的新物品标记
}

message EventRedPointCfg
{
    int64   EventObjId = 1;    				    // 活动ID
    int32	RedPointType = 2;				    // 1 RedPoint, 2 new, 3 FreeIAP
    int32   EventTypeId  = 3;                   // 活动类型ID
    int32   EventBaseId  = 4;                   // 活动BaseId
    repeated int32  EventFreeIAPShowIds   = 5;  // 可领的活动免费礼包showId
}

message TempUpdateIapFreeRedPoint {
    int64   EventObjId   = 1;    				// 活动ID
    int32   EventTypeId  = 2;                   // 活动类型ID
    int32   EventBaseId  = 3;                   // 活动BaseId
    repeated int32  RecvEventFreeIAPShowIds = 4;    // 领取的活动免费礼包
}


message EventStatusChangeNtf {
    SimpleEventInfo  SimpleInfo     = 1;        // 活动简要信息
    int32            Status         = 2;        // 活动状态 EVENT_STATUS_XXX, 关注 EVENT_STATUS_PENDING， EVENT_STATUS_RUNNING， EVENT_STATUS_STOP 就好
}



message GetSevenDayEventListReq
{
    int64   EventObjId = 1;                     // 活动ID
}

message GetSevenDayEventListAck
{
    repeated EventDetail  List   = 1;           // 全部的七日活动
    int32    DayOffset    = 2;                  // 第几天， 从开始
}

message GetSevenDayEventTaskReq
{
    int64 EventObjId = 1; 						   // 七日活动唯一ID
}

message SevenDayTaskInfo
{
    int32 Day  = 1;                                // 第几天，从1开始
    TaskList EventQuestList  = 2; 				   // 任务列表
}

message GetSevenDayEventTaskAck
{
    int64 EventObjId = 1; 							 // 活动事件唯一ID
    repeated SevenDayTaskInfo  DailyTaskInfo  = 2;   // 活动任务数据， 非任务类数据在
    int32 EventType  = 3;                            // 活动类型
    int32 EventBaseId = 4;                         // 活动BaseId
}

message SyncTVShowEventNtf
{
    repeated int32  EventTypeIds = 1;                //  活动类型列表 -- 作废
    repeated int32  EventBaseIds = 2;                //  活动BaseId列表
}

message SyncRedPointCfgNtf
{
    repeated ShopRedPointCfg ShopRedPointInfo = 1;  	// 商店红点配置
    repeated int32 ContainerRedPoints = 2;   	    	// 仓库新家具红点
    repeated EventRedPointCfg EventRedPointInfo = 3; 				    // 活动红点，只管发客户端自己处理过滤和红点类型
    int32    MailRedPoitFlag = 4;                   	// 邮件红点标志，0：表示没有未读或未领取的邮件，>0表示有
    repeated int32 ArchievementTypeNotify       = 5; 	// 成就类型红点
    bool     GuestCustomerFinalAward            = 6; 	// 访客配餐整单奖励
    repeated TaskRedPointCfg TaskRedPointInfos  = 7; 	//任务相关的红点
    bool 	 HasFreeVipIAP	 					= 8; 	// 有免费VIP购买项
    repeated CookBookRedPointCfg CookBookRedPointInfos = 9;	//菜谱红点
    int64 	 UserID 							= 10; 	// 邮件通知使用的上下文
    repeated ClickRedPoint		ClickRedPoints	= 11;	// 點擊消失并且會根據時間重新出現的紅點
    repeated ProIconInfo M_RestImageInfos = 12;
    ProMailRedpointNtf M_MailRedpointInfo = 13;
}

message ProMailRedpointNtf {
    int64 M_UserID = 1;
    int32 M_MailTimeOutFlag = 2;
    int32 M_MailRedpointCfg = 3;
    int32 M_IsTodayLoginFirst = 4;
    repeated int32 M_MailRedpointFlag = 5;
}


//任务相关的红点信息
message TaskRedPointCfg
{
    int32 TaskType = 1; //任务类型
    int32 TaskRedPointFlag = 2; //任务是否有红点，0 表示没有，1 表示有
    int32 OpenBoxFlag      = 3; //任务宝箱是否有红点，0 表示没有，1 表示有
    repeated int32  LotteryIDList = 4; //抽奖成就任务关联的抽奖卡池id列表
}

message CleanRedPointReq
{
    int32      RPType             = 1;        // 取消的红点类型
    repeated int32 ShopItemList   = 2;  	  // 商店新物品的标记
    int32      ShopType           = 3;        // 商店类型
    int32      CookBookId		  = 4;		  // 取消哪一个餐品的红点
    int32	   ClickRedPointType  =	5;	  // 點擊消失并且會根據時間重新出現的紅點類型
    int32 M_RestImageType = 6;
}

message CookBookRedPointCfg
{
    int32 CookBookId	= 1; //餐品id
    int32  Type			= 2; //红点类型:1-RED_POINT_REDPOINT-红点 2-RED_POINT_NEW-新
    bool Flag			= 3; //有没有红点
}
message SyncUserBaseInfoNtf
{
    SimpleUser BaseInfo = 1;   // 玩家基本数据
}

message ClickRedPoint{
    int32	Type		=	1;//紅點類型
    bool 	IsRed		=	2;//是否是紅點
}
message ObjProduceInfo{
    int64 			LastProduceMs 	= 1; 	// 上次产出时间
    int32 			ProduceCount 	= 2; 	// 已经生产个数
    int64 			FoodCostMs 		= 3; 	// 配置生产时间
    int64			FoodCostPPM		= 4;
}

message ScencePhyObject
{
    int32    		ScenceKey 	= 1;   // 场景编号 << 16 | 场景Layer(左墙，中墙，地面),
    int64    		ObjectID  	= 2;    // 物品的唯一ObjectID
    int32    		BaseID    	= 3;    // 物品的BaseID
    TilePos  		SrcPos    	= 4;    // 家具左下角坐标
    int32    		Side      	= 5;    // 放置的朝向
    repeated int64  AttachObjectIds = 6; //上面附加的道具， 永远下定长数组，长度从表里面读
    ObjProduceInfo 	ProduceInfo = 7; 	// 产出信息
    int64           LastOpMsec  = 8;    // 最后操作时间， 毫秒
    int64 			ProgressKey = 9;    // 升级进度key
    int32 			Level = 10;    		// 等级
    int64           ProduceCDms = 11;   // // CD到期时间时间

    TilePos         BluePhyLBPos = 12;  // 蓝图对象时使用， 由客户端上传
    TilePos         BluePhyRTPos = 13;  // 蓝图对象时使用， 由客户端上传

    SimpleSkinObject SkinObj     = 14; //皮肤
    int32           FurnitureSubTypeIndex = 15;  // 同类家具的索引编号，双人桌1等，吧台1等
}

message ScenceAttachObject
{
    int32    ScenceKey = 1;   // 场景编号 << 16 | 场景Layer(左墙，中墙，地面),
    int64    ObjectID = 2;    // 物品的唯一ObjectID
    int32    BaseID   = 3;    // 物品的BaseID
    int64    ParentObjecID = 4; // 被放置物品的ObjectID
    int32    ParentPosIndex = 5; // 父节点上的位置信息
    ObjProduceInfo 	ProduceInfo = 6; 	// 产出信息
    int64           LastOpMsec  = 7;    // 最后操作时间， 毫秒
    int64 			ProgressKey = 8;    // 升级进度key
    int32 			Level = 9;    		// 等级
    int64           ProduceCDms = 10;   // CD到期时间时间

    SimpleSkinObject SkinObj     = 11; //皮肤
    int32           FurnitureSubTypeIndex = 12;  // 同类家具的索引编号，双人桌1等，吧台1等
}

message ScenceDecorationObject
{
    int32    ScenceLayer  = 1;          // 类型: SCENCE_LAYER_FLOOR, SCENCE_LAYER_WALL_A, SCENCE_LAYER_WALL_B
    int32    BaseId = 2;         		// 装饰时墙纸或地砖的BaseId
    int64    FixedDecorationObjID = 3;  // 固定场景道具的ObjectID
    int64    ObjectID = 4;  			// 当前放置的ObjectID
    int64    LastOpMsec  = 5;    		// 最后操作时间， 毫秒
    int64 	 ProgressKey = 6;			// 升级进度key
    int32 	 Level = 7;    			    // 等级
    ItemStallInfo StallInfo = 8; 		// 摊位信息
    int64    ProduceCDms = 9;   // CD到期时间时间
    SimpleSkinObject SkinObj     = 10; //皮肤
    int32           FurnitureSubTypeIndex = 11;  // 同类家具的索引编号，双人桌1等，吧台1等
}


message PutScenceObjectReq
{
    int32    ScenceKey = 1; 	 // 场景编号 << 16 | 场景Layer(左墙，中墙，地面),
    TilePos  SrcPos   = 2;  	 // 家具中心点坐标，始终用来同步，不改
    int32    Side     = 3;  	 // 放置的朝向  SCENCE_OBJ_SIDE_XXX
    int64    ObjectID = 4;  	 // 放置的ObejctID
    int64    ParentObjectID = 5; // 被放置的ObjectID,
    int32    EntityID = 6 ;      //客户端使用
    int32    ParentPosIndex = 7; // 父节点上的位置
    TilePos  LBPos   = 8;        // 对角坐标1
    TilePos  RTPos   = 9;        // 对角坐标2
    int64    FixedDecorationObjID = 10; // 固定场景位置的对象ObjectID
}

message PutScenceObjectAck
{
    int32    ScenceKey = 1;      // 场景ID
    int32    Result    = 2;      // 操作结果
    int64    Object    = 3;      // 物品的唯一ObjectID
    int32    EntityID = 4 ; 	 //客户端使用
}

message ReplaceScenceObjectReq
{
    int32    ScenceKey = 1; 	 // 场景编号 << 16 | 场景Layer(左墙，中墙，地面),
    int64    OrgObjectID = 2;  	 // 原来的道具ObjectID
    int64    NewObjectID = 3;    // 新的ObjectID
    int32    EntityID  = 4; 	 // 客户端使用
}

message ReplaceScenceObjectAck
{
    int32    ScenceKey = 1;      // 场景ID
    int32    Result    = 2;      // 操作结果
    int64    Object    = 3;      // 物品的唯一ObjectID
    int32    EntityID  = 4 ; 	 //客户端使用
    int64    OrgObjectID = 5;  	 // 原来的道具ObjectID
}

message SwapScenceObjectReq
{
    int32    ScenceKey = 1;
    int64    SrcObjectId = 2;
    int64    DstObjectId = 3;
    PutScenceObjectReq  SrcObjectMoveInfo  = 4;   // 源对象最终的位置信息，策划允许移动位置
}

message SwapScenceObjectAck
{
    int32    ScenceKey = 1;
    int32    Result    = 2;      // 操作结果
}

message SyncScenceObjectNtf
{
    int32    ScenceKey = 1;      // 场景Key
    repeated ScencePhyObject UpdatePhyObject = 2;  // 场景中变更的物理道具
    repeated ScenceAttachObject AttachObject = 3;  // 场景中变更的Attach道具

    repeated int64 DeleteObjects = 4;    // 场景中删除的道具
    repeated ScenceDecorationObject   LayerInfo = 5;  // 同步变更
    repeated ScencePhyObject ExtendScenceForceMove = 6; // 扩店时需要移动的家具
}

message SyncScenceInfoNtf
{
    int64 	 UserID 	 = 1; 			// 所属者
    int32    ScenceType  = 2;          // 场景类型
    int32    ScenceId    = 3;          // 场景ID，主要给预制体用
	// 设备
    repeated ScencePhyObject PhyObjects = 4;  	  // 场景中摆放的位置道具
	// 桌上装饰
    repeated ScenceAttachObject AttachObject = 5; // 场景中摆放的Attach道具
	// 其他装饰
    repeated ScenceDecorationObject LayerInfo  = 6;  // 场景中装饰信息
	// int32    PhyId    = 7;                     // PhyId
    int32    EnterScenceReason   = 8;                           // 进入场景的原因
    int32    ExtendLevel  = 9;                 // 扩店等级
    repeated int64 OverSeeList = 10;//被遮罩的物品OBJID
}

message RecycleScenceObjectReq
{
    int32    ScenceKey = 1;   // 场景编号 << 16 | 场景Layer(左墙，中墙，地面),
    int64    ObjectID = 2;    // 物品的唯一ObjectID
}

message RecycleScenceObjectAck
{
    int32    ScenceKey = 1;      // 场景ID
    int64    ObjectID  = 2;      // 物品的唯一ObjectID
    int32    Result    = 3;      // 操作结果
}

message UseDeviceReq
{
    int64    ObjectId  = 1;      // 设备ID
}


//通知center的相关任务做某种操作
message GetCenterQuestOper
{
    int64   UserID  = 1;
    int32   RType  = 2;
    int32   QuestID = 3;
    int32   Oper    = 4;  //操作 1 请求任务列表 2 触发任务 3 领取任务奖励 4 领取宝箱奖励 5 放弃联盟个人任务 6 手动刷新联盟任务列表
    repeated int64   Args   = 5;  //参数组 根据RType和oper的不同，传输不同的参数
    TaskInfo  TInfo    = 6 ;   //任务信息，用于同步个人任务和联盟任务以及宝箱信息
    int32   Code    = 7;  //错误码 传回gs 用于处理联盟任务手动刷新偿还之类的
}


//获取任务信息
message GetTaskInfoReq
{
    int32 RType = 1;   //请求类型  0：全部   >0：某类任务
    int32 Update = 2;  //是否更新到新篇章 0 表示不更新，1 表示更新 2 表示联盟任务手动刷新
    int32 TaskSubType = 3;//任务子类型
}

//回复任务信息
message GetTaskInfoAck
{
    repeated TaskList TInfo = 1;
    int64    UserID         = 2; 	// 服务器用
    int32 	 RType  		= 3; 	// 客户端请求Type
    int32    EventBaseId = 4;//当前Center上的EventBaseId
}

//任务更新消息
message UpdateTaskInfo{
    TaskList TInfo = 1;
}

//任务信息
message TaskList{
    TaskInfo Task =1; //章节任务信息或单个活动信息
    int32    RType       = 2; //任务类型
    bool    UpdateFlag  = 3; //是否已更新 true 表示更新，false 表示没有更新
}

//单章任务信息
message TaskInfo
{
    int32 ChapterId = 1; // 章节id
    repeated QuestInfo QInfo = 2;  //子任务信息
    StartEndTime Time = 3 ; //任务开启结束时间
    TaskOpenedBoxInfo BoxInfo = 4;  //宝箱信息
    int64    EventObjId  = 5;    // 活动任务所属活动唯一ID
    int32    EventType = 6;      // 活动类型
    int32    QuestLevel = 7;   //联盟任务等级 餐厅等级
    RecoveryResInfoNtf QuestResInfo = 8; //联盟任务卷数量
    int64    AsNextRefreshTimeMs = 9; //联盟下一次可以手动刷新时间
    int32    TaskSubType         = 10; //任务子类型
    int32    EventBaseId  = 11;        // 活动BaseId

}

//联盟任务卷信息
message ProAllianceQuestResInfo
{
    int64 ResNum = 1;//联盟卷数量
    int64 ResMax = 2;//联盟卷上限
    int64 FlushTime = 3; //联盟卷全部恢复时间
}

//任务宝箱信息
message TaskOpenedBoxInfo
{
    int32 TotalScore = 1; //总积分
    int32 NowScore = 2;   //当前积分
    repeated PropKeyValue BoxState = 3;  //宝箱领取状态 0 表示未激活，1表示可领取，2 表示已领取
    int64  FlushTimeMs = 4; //宝箱刷新时间
}

// 折扣购买信息
message DiscountItemInfo
{
    int32 ShopId   	   = 1;  //  折扣物品商店
    int32 ItemId   		   = 2;  //  折扣物品ID
    int32 Discount = 3;  		 //  折扣
    PriceInfo RealPrice = 4;     //  折扣价格
    int32 GoodsID       = 5;     //  折扣商品id
}

message ExchangeItemInfo
{
    int32 ShopId   	   = 1;  //  折扣物品商店
    int32 ItemId   	   = 2;  //  兑换物品ID
    repeated ProBagItem ConsumInfoes = 3;     //  兑换消耗
    int32 CurNum       = 4;  //  兑换次数
    int32 MaxNum       = 5;  //  最大的兑换次数
    int32 GoodsID       = 6;     //  兑换商品id
}

//子任务信息
message QuestInfo
{
    int32 QuestId = 1;  //任务id
    PropSchedule Progress = 2;//进度  第一个是任务进度上限，第二个是任务当前进度
    bool  IsAward = 3;  // 是否已经领奖，活动任务需要显示已经领取过的任务

    repeated ProBagItem  EventAward  = 4; // 奖励信息
    int64 AsGiveUpTime = 5; // 联盟个人任务失效时间

    DiscountItemInfo DiscountInfo = 6;  // 折扣信息

    int64   EventQuestBeginMs  = 7;  	// 活动任务生效时间
    ExchangeItemInfo ExchangeInfo  = 8; // 兑换任务兑换信息，这个东西后面会无效
    int64   EventQuestResetMs  = 9;     // 任务重置时间
    int32   PrevEventQuestId   = 10;    // 活动前置    （暂时处理方案：如果是活动任务 就是活动任务前置，如果是联盟个人任务，就是任务倍数）
}

//表示上限，与进度
message PropSchedule
{
    int64 Max = 1;//上限
    int64 Now = 2; //当前进度
}

//开始结束时间
message StartEndTime
{
    int64 STime = 1;//开始时间
    int64 ETime = 2;//结束时间
}


//领取奖励请求
message GetTaskRewardReq{
    int32 		RewardType 			= 1;	// 奖励请求类型：0：宝箱领取 1：子任务领取
    int32 		TaskType 			= 2; 	// 任务类型
    int32 		QuestId 			= 3; 	// 子任务id
    int32 		BoxId 				= 4;	// 宝箱id
    bool 	 	AllCanBeRewarded 	= 5; 	// 批量标记
    int32 AchvType = 6;
}

//领取奖励回复
message GetTaskRewardAck{
    int32 QuestID = 1;
    UpdateTaskInfo TInfo = 2;
    int32 BoxID   = 3; //宝箱id
    int64 Contributes = 4;//玩家贡献的最新值
    int64    UserID         = 5; 	// 服务器用
    int32    EventBaseId    = 6;//当前Center上的EventBaseId
}

message BatchRewardTasks{
    int32 TaskType = 1;
}

message BatchRewardTasksAck{
    int32 		TaskType 		= 1;
    repeated 	int32 			FinishedList 	= 3; 	// 已经领取的任务列表
    repeated 	ProBagItem 		Items 			= 4;	// 奖励信息
}

message StaffSkill
{
    int32 SkillID 		= 1;    // 技能ID
    int32 SkillLevel 	= 2; // 起始==1
    int32 SkillPos  	= 3;  // 技能格子 排序使用 1,2,3,4
}

// 资质/天赋
message StaffTalent
{
    int32 ID = 1;
    int32 level = 2;
    int32 pos = 3;
}

//
message StaffProperShow
{
    int64 TotalProper 					= 1; // 总属性 包括所有的计算值
    repeated PropKeyValue Total = 2; // 分类属性总和
    repeated PropKeyValue Base  = 3; // 基础属性
    repeated PropKeyValue Book  = 4; // 书籍加成
    repeated PropKeyValue Lover = 5; // 恋人加成
    repeated PropKeyValue Buff  = 6; // 来源技能或者其他的BUFF加成
}

message StaffInfo
{
    int32 		ID 															= 1;// 雇员ID  续用
    int32 		Level 													= 2;// 雇员等级 续用
    int32 		Star 														= 3;// 雇员星级 ×
    int32 		Quality 												= 4;// 雇员稀有度, 看客户端要不要 ×
    string 		Name 														= 5;// 雇员名字， ×
    repeated 	StaffSkill 			Skills 					= 6;// 技能 续用
    double 		Money 													= 7;//金额 ×
    int32 		StaffFormationPos  							= 9;// 雇员上阵的格子 ×
    repeated 	StaffBuffEffect BuffEffect 			= 10; // ×
    repeated 	PropKeyValue 		Attributes    	= 11;//员工属性 ×
    int32 		CookLevel  											= 12;//职称等级 ×
    repeated 	int32 					CookBookPosList = 13;//专精的餐品格子列表 ×
    bool 			IsLocked												= 14;//是否上锁 ×
    repeated 	ProWear  				Wears 					= 15;// 装备信息 ×
    int32 		CurSkinID												= 16;//当前BaseID的雇员皮肤 后续可能继续使用
    int32     OccLevel                        = 17; //雇员职级  ×

    // 新数据 上面的数据为了保证页面正常 在新数据里不使用
	// ID/Level/Skills 继续通用
    int64 Exp 									              = 18; // 经验  就是用钱冲进去的值
    int64 Power 								              = 19; // 战力
    StaffProperShow ProperShow 	              = 20; // 属性显示数据
    repeated StaffTalent talents              = 21; // 资质/天赋
    int32 Break 								              = 22; // 突破等级 默认=1级
    repeated StaffResData Res									= 23; // 雇员资源数据 资质和技能点 都按照固定ID配置就行
    int32 ChapterRewards											= 24; // 雇员章节奖励领取情况 位
}

// 雇员的资源数据  不属于角色数据
message StaffResData
{
    int32 ID 		= 1;
    int64 Value = 2;
}

message SimpleStaffInfo
{
    int32 ID 		= 1;    //雇员ID
    int32 Level 	= 2;    // 雇员等级
    int32 Star 		= 3;    // 雇员星级
    int32 Quality 	= 4;    // 雇员稀有度, 看客户端要不要
    int32 CookLevel = 5;	// 职称等级
}

message StaffLevelUpReq
{
    int32 ID = 1;      // 雇员ID
    int32 ToLevel = 2; // 到指定等级
    int32 LevelUp = 3; // 升级次数 默认=1 并且当前只支持1次 后续开放再说
}

message StaffLevelUpAck
{
    int32 Result  = 1; // 结果 0=没有升级 只有经验值增加 1 = 等级有变动
    int32 StaffID = 2; // 升级的雇员ID
    int32 Level   = 3; //	 升级之后的等级
    int64 Exp     = 4; // 之后的经验值
}

message StaffLevelResetReq
{
    repeated int32 StaffObjIDList = 1;       // 雇员objID
    int32 Action     = 2;           // 0-RESET_STAFF_LEVEL_ACTION_RESET-重置雇员等级操作 1-RESET_STAFF_LEVEL_ACTION_REQ_RETURN_INFO-重置雇员等级操作
}

message StaffLevelResetAck
{
    repeated int32 StaffObjIDList = 1;      // 雇员objID
    int32 Action     = 2;           // 0-RESET_STAFF_LEVEL_ACTION_RESET-重置雇员等级操作 1-RESET_STAFF_LEVEL_ACTION_REQ_RETURN_INFO-重置雇员等级操作
    repeated ProBagItem     ReturnItems             = 3; // 返还的物品信息
    repeated ProBagItem		Consume	=	4;//道具不够消耗的资源
}

message StaffProtectList{
    repeated int32  StaffBaseIDList 	= 1;//受保护的雇员BaseID列表
    repeated int32 	LockBaseIDList  	= 2;//锁定的雇员BaseID列表（服务下发，客户端请求时发送）
    repeated int32 	UnLockBaseIDList  = 3;//需要解锁的雇员BaseID列表（客户下发，设置时发送）
    repeated int32 	BattleBaseIDList  = 4;//上阵中的雇员BaseID列表（服务下发，设置时发送）
}
message SetProjectReturnMsg {
    repeated int32 StaffObjIDList = 1;
    bool     			IsOk = 2;//是否成功
}

message StaffStarResetReq
{
    int32 StaffObjID	=	1; //雇员objID
}

message StaffStarResetAck
{
    int32 StaffObjID	=	1; //雇员objID
    repeated ProBagItem	   ReturnItems   = 2; // 返还的物品信息
}

message GetFormationStaffPropertyReq
{
    repeated int32  StaffObjIDList  = 1; // 雇员列表
}


message GetFormationStaffPropertyAck
{
    repeated StaffInfo StaffInfoList  = 1; // 雇员属性列表
}

message GetTargetUserFormationPropertyReq
{
    int64 	TargetUserID 			= 1; // 目标用户ID
    int32 	FormationType 			= 2;
}

message FormationCell{
    int32 		Pos 				= 1; 		// 位置
    int32 		ObjectID 			= 2;
}

message GetTargetUserFormationPropertyAck
{
    int64 	TargetUserID 				= 1; 	// 目标用户ID
    int32 	FormationType 				= 2;
    repeated StaffInfo StaffInfoList  	= 3; 	// 雇员属性列表
    repeated FormationCell 	Cells 		= 4; 	// 阵形位置信息
}


message StaffStarUpReq
{
    int32 		ID 							= 1;	// 雇员ID
    repeated    int32	SameBaseIDObjects	= 2;	// 同BaseID的池子
    repeated    int32	OtherBaseIDObjects	= 3;	// 不同BaseID的池子
    int32  		Action 						= 4; 	// >1 表示只请求返还信息
}


message StaffStarUpAck
{
    int32 					Result 				= 1; // 结果
    int32 	 				Action 				= 2;
    repeated ProBagItem 	ReturnItems 		= 3; // 返还的物品信息
}

message GetStaffInfoReq {
    int32 ClientFlag = 1;      		// 客户端使用
    int64 TargetUid  = 2;           // 请求谁的StaffInfo
}

message GetStaffInfoAck {
    repeated StaffInfo Infoes = 1; // 雇员信息
    int32 ClientFlag   = 2;        // 客户端使用
    int64 TargetUid    = 3;        // 请求谁的StaffInfo
}

message StaffLockReq{
    int32 StaffObjId	=	1; //雇员的objectId
    bool IsLock			=	2; //锁定还是解锁
}
message PushStaffInfoWhileLoginNtf {
    repeated StaffInfo Infoes = 1;  // 雇员信息
}

message SyncStaffInfoNtf
{
    int64 	 UserID 			= 1; 	// 用户ID
    repeated StaffInfo Staffs 	= 2; 	// 同步信息
    int32    Flag               = 3;	// 1:表示登录的时候
    repeated int32 DelList		= 4;	// 刪除的雇員
    int32 	 Reason 			= 5; 	// 同步原因 SYNC_STAFF_USER_LOGIN
}

message AwardStaffNtf
{
    repeated StaffInfo Staffs 	= 1; 	// 奖励雇员信息信息
    bool     IsFirstStaff       = 2;    // 是否是首个雇员
}

message StaffSkillUpgradeReq
{
    int32    StaffID   = 1; // 雇员ID
    int32    SkillId   = 2; // 技能ID
    int32 	 SkillPos  = 3; // 技能位置 弃用
}

message StaffSkillUpgradeAck
{
    int32    StaffID   = 1; // 雇员ID
    int32    SkillId   = 2; // 技能ID
    int32    Level     = 3; // 升级后的技能等级
	//	repeated int32   SkillPos           = 2;    // 当前开启的所有技能位置
}

message StaffFormationPos
{
    int32    Pos                = 1;   // 位置
    int32    StaffID            = 2;   // StaffID
}

message SetStaffFormationReq {
    repeated StaffFormationPos Info = 1; // 阵型信息
    int32    ClientParam            = 2; // 客户端透传参数
    int32  	 Type  					= 3; // 阵形类型
}

message SetStaffFormationAck {
    int32    Status             = 1;
    int32    ClientParam        = 2;    // 客户端透传参数
    int32 	 Type  				= 3; 	// 阵形
}

message GetStaffFormationReq{
    int32  	 Type  					= 1; // 阵形类型
    int32    ClientParam        = 2;    // 客户端透传参数
}

message GetStaffFormationAck{
    int32  	 Type  					= 1; // 阵形类型
    repeated StaffFormationPos Info = 2; // 阵型信息
    int32    ClientParam        = 3;    // 客户端透传参数
}

// 订单相关协议
message ProOrderItem{
    int32 	CookID 			= 1;
    double 	Price 			= 2;
    bool 	Finish 			= 3; 	//是否已经完成
    int32   Index   		= 4;
    int32   PraiseLevel 	= 5;  	// 这个单子时对应的好感度等级
    int32   StaffID  		= 6;	// 这个单子指定的服务员ID
    int32	Group           = 7; 	// 0-进攻方 1-防守方
    int32 	GotSavorScore 	= 8; 	// 餐品获得的积分
}

message SkillInfo
{
    int32 SkillId   = 1;   	//技能id
    int32 Level    = 2 ;  	//技能等级
}


message ProCustomer{
    int32 	ObjectID 			= 1; 		// ObjectID
    int32 	BaseID 				= 2; 		// 配置ID
    int64 	EnterMs 			= 3; 		// 入场时间
    int64 	LeaveEndMs 			= 4; 		// 立场截至时间
    repeated ProOrderItem  	Orders = 5; 	// 订单信息
    int32 	BusCustomerLevel 	= 6;  		// 大巴客人等级
    int32 	MiniRequireScore 	= 7; 		// 最低需求分
    int64   SatObjectID  		= 8;        // 放置的FurnitureObjId
    int32   NpcType         	= 9;     	// npc类型，0:表示顾客npc 1：表示剧情npc 2：评审员npc
	//bool 	OrderCanRefresh 	= 10; 		// 订单是否可以刷新
    repeated ProBagItem Items 	= 11; 		// 整单奖励信息
    int64   WaitingBeginMs  	= 12;       // 首次坐下的时间，服务器同步给客户端
    int32 	OldIndex			= 13;		// 还原之前的
    repeated SkillInfo 	SkillList 	= 14;   // 技能列表
    repeated ProBagItem  ExtraItems  = 15;  // 额外奖励，不能用整单奖励
    int32	 StaffID				= 16;   // 分配的服务员
    repeated ProServiceCustomerRecord ServiceInfos = 17; // 只有在FinishOrderAck里的字段才会填
    int32    RequirePoint 			= 18; 	// 生成客人时的存档值方便客户端表现
    int32    PickyPoint 			= 19; 	// 生成客人时的存档值用于每单餐品分的计算
    int32 	 PriceRate 				= 20; 	// 餐品价格倍率
}

message ProCustomerList{
    int64 		UserID 				= 1; 			// 用户ID
    repeated 	ProCustomer 	Customers 	= 2;
    int32       CustomerListType 	= 3;           // 同 CUSTOMER_FROM_BUS， XXXX
    int32 		MinSavor 			= 4; 			// 最少口味要求
    double 		CusotomerPoolMoney 	= 5; 			// 池子剩余钱数
    double 		PutPoolMoney 		= 6; 			// 放入池子中的钱
    int32		MapPointBaseID		= 7;			// 地图上map baseID
    int64       CustomerPoolTime    = 8;            // 时间池
    int64       PutPoolTime         = 9;            // 放入池子中的钱
}

message FinishCustomerRequest {
    int32 	StaffBaseID 	= 1; 		// 雇员BaseID
    int32 	ObjectID 		= 2; 		// NPCObjectID
    repeated int32 OrderIndexArray = 3; //
    int64   OrderCostMs     = 4;        // 订单总耗时
    bool 	IsGuideFail		= 5; 		// 红脸引导
}

message ProServiceCustomerRecord {
    int32 	StaffId         = 1;
    int32   StaffLevel      = 2;
    int32   StaffStar       = 3;
    int32   StaffTaste      = 4;
    int32   CookbookId      = 5;
    int32   CookbookStar    = 6;
}


message ProSimpleCustomer{
    int32 	ObjectID 				= 1;
    int32 	Money 					= 2;
    int64   LocationFurnitureObjId 	= 3;
    int32   DeltaSatisfiedTimes     = 4; // >0 表示好感度有上升
    bool 	PositiveFlag 			= 5; // 标记
    CustomerTipInfo   TipInfo        = 6; 	  // 只有在FinishOrderAck里的字段才会填
    repeated ProServiceCustomerRecord ServiceInfos = 7; // 只有在FinishOrderAck里的字段才会填
    int32 	MiniRequireScore		= 8; 		// 最小需求分
    bool 	IsGuideFail				= 9; 		// 红脸引导
}

message RefreshCustomerOrder{
    int32 			ObjectID 		= 1;
    int32 			Index  			= 2; 			//
    ProOrderItem  	OrderItem 		= 3; 	// 服务器下行
    int32           NeedCookbookId  = 4;    // 解锁的CookBookId
    repeated ProBagItem  Items      = 5;    // 解锁CookBookdId新增的订单完成奖励
}

message FullCustomer{
    int32 			BaseID 			= 1;
    int64 			EnterMs 		= 2;
}

message ProCustomerDetail
{
    int32           BaseID          	= 1;   // BaseID
    int32           PraiseScore     	= 2;   // 好评分
    int32           NextCookBookId  	= 3;   // 下一级可刷的CookBook
    int32           NextPraiseScore 	= 4;   // 解锁的评分
    int32   		CurPraiseLevel  	= 5;   // 当前的好感度等级
    int32			Status				= 6;   //0-CUSTOMER_STATUS_NORMAL-普通状态 1-CUSTOMER_STATUS_READY-准备播客人走过来的动画 2-CUSTOMER_STATUS_STAND-客人站在门口 3-CUSTOMER_STATUS_IN_TV-放进电子屏的状态
    int32			NeedRestaurantLevel = 7;   //客人升级需要得餐厅等级
	// int64           NeedTaskScore       = 8;   // 需要的口味分
    double          TipMoney            = 9;   // 小费
    int32           CurEffectLevel      = 10;  // 实际的属性生效等级
    int32 M_TvStatus = 11;
}

message SyncCustomerDetailNtf
{
    repeated        ProCustomerDetail  List = 1;
    int64           UserId             = 2;    // 谁的雇员信息
}

// 领取小费钱包
message ReceiveUserTipWalletReq {
    int32           TipId         = 1;    // 小费ID
}



message GetPlotInfoAck{
    int32 TalkID = 1; //剧情id ， 0 表示剧情结束，没有后续剧情了
}

message GetPlotInfoReq{
    int32 TalkId = 1; //剧情id ，为0表示起始剧情
    int32 Choice = 2; //选项答案，0 表示没有选项
    int32 ChapterID = 3; //剧情章节id
    int32 StepID    = 4;  //剧情段落id
}

message GetPlotHistoryReq{
    int32 ChapterID = 1;
}

message GetPlotHistoryAck{
    int32 ChapterID = 1;
    repeated ProStepPlotInfo StepInfo = 2;
}

message ProStepPlotInfo {
    int32 StepID = 1;
    repeated int32 PlotList = 2;
}

message CurPlotInfo{
    int32 ChapterID = 1;//最新故事章节
    int32 StepID  = 2;//最新故事段落
    int32 State   = 3; //状态
}

message GetCurPlotInfoList{
    repeated CurPlotInfo PlotInfos = 1; //当前剧情集
}

message ProDetailPlotInfo{
    int32 ChapterID = 1;//最新故事章节
    int32 StepID  = 2;//最新故事段落
    int32 State   = 3; //当前剧情状态
    repeated UnlockData Unlocks = 4;//解锁条件
}

//邀请npc的信息
message ProInvitePlotNpcInfo{
    int32 ChapterID = 1;//邀请npc的故事章节id
    int32 StepID  = 2;//邀请npc的故事段落id
}

//剧情结束请求
message GetPlotEnd{
    int32 ChapterID = 1;
    int32 StepID    = 2;
    int64 EventObjID = 3; //活动id
}


message EnterScenceReq {
    // bool LoginEnter  = 1; // 是否是登录时进入
    int32  EnterScenceReason  = 1; // 进入场景原因
}

message EnterScenceAck {
    int32  EnterScenceReason  = 1; // 进入场景原因
}


// 同步场景的请求
message SyncScenceInfoReq {
    int32  Reason       = 1;       // Reason
    int64  Uid          = 2;       // 请求的Uid
}

message CustomerLocations {
    int32 CustomerObjId  = 1;    // 顾客ObjectID
    int64 FurnitureObjId  = 2;   // 家具的ObjectId
}

message SetCustomerLocationReq
{
    repeated CustomerLocations List = 1 ; // 上列表
}

message ScenceCustomerEnqueueReq
{
    repeated int32 List = 1 ; //  顾客列表
}

message SyncExtendScenceReq
{
    // int32   ScenceID    = 1; // 场景ID
}

message SyncExtendScenceAck
{
    int32   ScenceID    = 1; // 场景ID
    int32   ExtendLevel = 2; // 扩店等级
}



//客户端扩店完成之前要一次数据，同步扩店变更的家具信息
message GetExtendScenceChgObjReq {
}

message GetExtendScenceChgObjAck {
    int32    ScenceKey  = 1;    						 // 场景
    repeated ScencePhyObject ExtendScenceForceMove  = 2; // 变更的家具
}

message CompoundStaffReq
{
    int32   StaffID     = 1;  // 雇员ID
    int32   Count       = 2;  // 合成雇员的个数  批量合成
}

message CompoundStaffAck
{
    repeated int32   StaffIDs     = 1;  // 雇员ID
}

//剧情人物触发任务请求
message TriggerPlotQuestReq
{
    int32 QuestID = 1;
    int32 Num     = 2;
    int32 QuestConType = 3; //任务条件类型
}

message SyncTriggerPlotQuestNtf
{
    int32 TalkID = 1; //当前talkID
    repeated PropKeyValue QuestInfoList = 2; //剧情相关任务状态
}

//用于奖励展示协议
message SyncRewardsShowNtf
{
    repeated ProBagItem RewardsInfo = 1;
}

message ProRewardsInfo
{
    int32 BaseID = 1;
    int32 Num    = 2;
}

//挑战的对手请求
message GetBattleInfoMsg
{
    int64 BattleUserID = 1;
    int32 InspectorBaseID = 2;
    int32 InspectorObjID = 3;
    int32 BattleType     = 4;  // battle类型  1：pve    2：pvp
}


//展示双方的battle信息，开始结束都是这个
message BattleInfoShowNtf
{
    int32 InspectorObjID = 1;//评审员的objid
    int32 InspectorBaseID = 2; //评审员的baseID
    int64 BattleUserID    = 3; //如果是pve则是battleID，如果是pvp则是对方玩家的userID
    repeated PropKeyValue OtherScore = 4; //对方的评分根据评审员的属性
    repeated PropKeyValue SelfScore = 5; //自己的评分
    int32 BattleType      = 6; //battle类型
}

// 活动
//活动排名奖励
message EventRankRewardInfo
{
    int32	RankU					= 1;
    int32	RankD					= 2;
    repeated ProBagItem Items				= 3;
}

//活动事件奖励条件信息
message EventConditionRewardInfo
{
    int64	Score					= 1;         // 目标积分
    int32	Stat					= 2;         // 1 - 已经发放， 2 - 没有发放
    repeated ProBagItem Items				= 3;
}

//活动事件行为
message EventParamInfo
{
    int32	EffectID				= 1;
    int64	EffectParam				= 2;
}

// 活动时间
message EventTimeInfo
{
    int64  ReadyTime 				= 1;//准备时间
    int64  BeginTime				= 2;//开始时间
    int64  EndTime				    = 3;//结束时间
    int64  AwardShowDeltaMs 		= 4;//奖励展示持续时间
}

// 活动条基础信息
message SimpleEventInfo
{
    int64  EventObjId				= 1; // 事件唯一ID
    EventTimeInfo Time              = 2; // 时间信息
    int32  EventId                  = 3; // 活动配置ID
    repeated EventConditionRewardInfo Rewards = 4; // 活动积分奖励条件信息
    int32  EventType                = 5; // 具体的活动类型
    int64 Scores					= 6; // 积分
    int64 AsScores                  = 7; // 联盟积分
    repeated string DescParams		= 8; // 描述参数
}

//活动事件详细信息
message EventDetailReq
{
    int64   EventObjID              = 2;           // 事件唯一ID
    int32   EventTypeID             = 3;           // 用事件类型拉取活动详情, 作废，
    int32   EventBaseID             = 4;           // 用事件BaseId拉取活动详情
}

message BestManagerStageRankInfo {
    int32   StageId                 = 1;           // 阶段ID
    int32   Rank                    = 2;           // 阶段排名
    int32   IsCurrentStage          = 3;           // 是否是当前的进行的阶段活动
    int32   EventTypeId             = 4;           // 该阶段的活动类型
    int64   EventObjId              = 5;           // 该阶段活动的EventObjId
    int32   EventBaseId             = 6;           // 活动Id
}

message BestManagerEvDetail
{
    repeated BestManagerStageRankInfo Infoes = 1;   // 各阶段的排名信息
}

//
message NewbieSevenDayEventDailyRankInfo {
    int32   StageId                 = 1;           // 阶段ID
    int32   Rank                    = 2;           // 阶段排名
    int32   IsCurrentStage          = 3;           // 是否是当前的进行的阶段活动
    int32   EventTypeId             = 4;           // 该阶段的活动类型
}

message NewbieSevenDayRankEvDetail
{
    repeated NewbieSevenDayEventDailyRankInfo Infoes = 1;   // 各天的的排名信息
}

// 直接兑换类活动的兑换信息
message EventShopExchangeData {
    repeated  ExchangeItemInfo   Infoes   = 1;     // 兑换的次数
}

message OneEventCookbookData {
    int32     EventCookbookId    = 1;              //
    int32     CookbookId         = 2;
    int64     RefreshMs          = 3;              // 刷新倒计时
    repeated  int32    LimitItems  = 4;            // 展示的限制物品
    int32     NpcId              = 5;
    string    Desc               = 6;
    repeated  int32    LimitFormularPosCount = 7;  // 限制物品位置数量
}


message EventCookbookExtraData {
    repeated  OneEventCookbookData    List   = 1;    // 列表
    int64     TotalRefreshMs                 = 2;    // 总的刷新时间
}

//活动事件详细信息
message EventDetail
{
    SimpleEventInfo   SimpleInfo    = 1; // 基础信息
    repeated EventParamInfo Params	= 2; // 活动事件行为 积分
    int64 ScoreLimit                = 3; // 最低积分限制
    int32 Rank						= 4; // 排行
    bool  HasRank                   = 5; // 是否有排行榜

    BestManagerEvDetail  EvManagerDetail = 6;  // 最佳店长玩法的特殊数据结构
    repeated ProBagItem  EventDetailShowAwardItem = 7 ; // 客户端用的假的显示道具，从EventClient表里取
    int32    EventSignInGroupId          = 8;  // 签到活动对应的签到组ID

    NewbieSevenDayRankEvDetail   EvNewbieSevenDayDetail = 9; // 新手七日活动排行榜特殊数据结构，参考最佳店长定义
    int32  ParentEventType = 10; // 父活动eventtype

    EventShopExchangeData        DirectExchangeData     =  11;  // 直接兑换类活动的兑换数据

    EventCookbookExtraData       EventCookData          =  12;  // 趣味配餐的其他数据， 已无效，换用新的配餐活动

    EventSwanLakeExtraData       EventSwanLakeSubEvs    =  13;  // 天鹅湖子活动简要数据，总活动带着的
    int32                        EventSwanLakeLotteryId =  14;  // 天鹅湖抽卡需要的
    int32  ParentEventBaseId = 15; 								// 父活动EventBaseId, EventClient表改了，客户端需要这个东西
    repeated EventRankRewardInfo PVPEventRankShowReward  = 16;  // PVP排行榜活动展示奖励
    int32    SmallGameConfigId     = 17;                          // 活动小游戏配置Id

    EventCombineSubEventInfo CombinSubEventInfo  = 18; 		   // 新的组合活动，凯撒报恩, 趣味配餐子活动活动， 抽卡子活动活动
    int64    ControlBattlepassSeasonType         = 19;  	   // 控制活动可见特殊规则， 战令类型
    int32    ControlBattlepassLevel              = 20;         // 控制活动可见特殊规则， 战令等级

    CombackEvInviteData        InvitorInfo         = 21;       // 邀请活动数据
    CombackEvInviteLinkData    InviteLinkInfo      = 22;       // 关联方活动数据

    int32       EventOrderPazzleDailyTotalWin        = 23;       //  单日配餐答题最高胜利次数
    int32       EventOrderPazzleDailyMaxTotalWin     = 24;       //  单日配餐答题最高胜利最高次数
}

message CombackEvInviteData {
    repeated  ProBagItem       BeLinkedAward       = 1;         // 被关联后的奖励
    bool      ReceiveFlag      = 2;                             // 是否领奖的奖励
    int32     LinkUserCount    = 3;                             // 关联的玩家数量
}

message CombackEvInviteLinkData {
    repeated  ProBagItem       LinkedAward       = 1;           // 关联后奖励
    int64     LinkUid          = 2;                             // 关联玩家
    bool M_CombackHasOpenInviteEv = 3;
}


message EventSwanLakeExtraData {
    repeated  SimpleEventInfo    SubEvents              = 1;   // 子活动
}

message EventCombineSubEventInfo {
    repeated  SimpleEventInfo    SubEvents              = 1;   // 子活动
}
message FinishEventCookbookOrderReq {
    int32    EventCookbookId    = 1;    	   // 要完成哪个
    repeated int32    BaseMeterialIds  = 2;    // 基础配料
    repeated int32    ChooseLimitItems = 3;    // 使用的限制物品
}

message FinishEventCookbookOrderAck {
    int32                        Resulat              = 1;    // 结果
    repeated     ProBagItem      Aawrds               = 2;   // 奖励
    EventCookbookExtraData       Data                 = 3;    // 客户端刷新
    int32                        NpcId              = 4;
}

message SyncEventCookLimitItemHashNtf {
    repeated     int32           HashVal            = 1;
}

message EventCookbookRefreshAllkReq {
    int64        EventObjId      = 1;
}


message EventExchangeShopDataChangeNtf {
    int64        EventObjId      = 1;  // 活动ObjId
    ExchangeItemInfo Info        = 2;  // 变更信息
}

message CreatePrototypeBluescenceReq {
    int32  TemplateStyleId      = 1;   // 风格ID
    int32  TemplateSizeId       = 2;   // 尺寸ID
    int64  Uid       = 3;   		   // 玩家ID， 先预留
}



// 活动数据同步
message GSEventConf
{
    int64  EventObjId				= 1; // 事件唯一ID
    EventTimeInfo Time              = 2; // 时间信息
    int32  EventId                  = 3; // 活动配置ID
    int32  EventType                = 4; // 具体的活动类型
    repeated EventParamInfo Params	= 5; // 活动事件行为 积分
    repeated int32 BonusID 		    = 6; // 活动buff
}

message EventDetailAck
{
    EventDetail   Info       = 1;
}

message GSEventInfo
{
    string	EventData		= 1;
}

message GSEventList
{
    repeated GSEventInfo EventList		= 1;
}

message GSEventBonusInfo
{
    int32	EventId			= 1;
    int32	EventType		= 2;
    repeated int32	BonusID = 3;
    int64   EventObjId      = 4; //
}

//排行榜信息
message ProRankInfo
{
    int32  Rank						= 1;//排名
    string AsAbbr 					= 2;	//联盟名字 abbr
    string Name					= 3;	//玩家名字 or 联盟全称
    int64  Score					= 4;	//
    int32  Icon 					= 5;
    int32  ServerID				= 7;
    int64  UserID					= 8; 	//玩家ID
    int32  AllianceID              = 9; 	// 联盟ID
    int32  IconFrame               = 10; 	// 头像框
    int32  ColorfulUserName		= 11; 	// 玩家彩色名字
    int32  AsBossLastNum        	= 12;	//个人挑战联盟boss的剩余次数
    int32  MemberNum               = 13;	//联盟成员人数
    int32  AlliancePost            = 14; 	//在联盟中的职位
    int32  Level                   = 15; 	//玩家等级和联盟等级
    int32 	RestaurantStar 			= 16; 	// 店铺星级
    int32  BlueVipLevel            = 17; // 蓝钻等级
    int32  BlueVipType             = 18; // 蓝钻种类
    int32  SmallGameStar           = 19;   // 小游戏特殊显示星级
    int32  SmallGameTotalTicket    = 20;    // 小游戏特殊显示体力
    repeated int32 UsedBadgeIDs    = 21;   //放置的徽章ID
}

//活动排行榜请求回复
message ProEventRankListInfo
{
    int32 EventType				= 1;
    int32 EventId				= 2;
    int64 Points				= 3;
    int32 Rank					= 4;
    int32 ServerID				= 5;
    repeated ProRankInfo Infos	= 6;
    int64 EventObjId            = 7;
}

message EventRankListReq
{
    int64 EventObjId			= 1;   // 活动唯一ObjId
}

message EventRankListAck
{
    ProEventRankListInfo Info   = 1;			   // 具体的排行榜数据

}

message GetEventRankAwardReq
{
    int64 EventObjId			= 1;   // 活动唯一ObjId
}

message GetEventRankAwardAck
{
    int64 EventObjId			= 1;   // 活动唯一ObjId
    repeated EventRankRewardInfo RankRewards= 2;   // 排行榜奖励信息
}

message ProEventUpdate
{
    int32 ID 						= 1;
    int32 Type 					= 2;
    int64 Point 					= 3;
    int32 Rank 					= 4;
}

message SyncMainWindowEventNtf {
    repeated SimpleEventInfo Events	= 1;      // 左侧显示的活动
}

message PopShowEventInfo {
    SimpleEventInfo Info            = 1;      // 活动信息
    string          ResAddr         = 2;      // 图片下载地址
}

message GetPopShowEventInfoReq {
}

message SyncPopShowEventInfoNtf {
    repeated SimpleEventInfo PopShowEvents = 1;   // 弹出显示的活动，作废，下空
    repeated PopShowEventInfo ShowInfoes =   2;   // 使用新的字段
}

message EventListReq {
    int32   ClientFlag   = 1;                // 客户端标记
}


message EventListInfo
{
    repeated SimpleEventInfo Events			= 1;
    bool IsLoginNtf 				        = 2; // 是否为登录下发
    repeated int64 NotifyEventObjs 			= 3; // 需要红点通知的活动ObjId
    int32    ClientFlag                     = 4; // 客户端使用
    int32    EventLevel                     = 5; // 客户端使用
    int32    EventCurExp                    = 6; // 客户端使用
    int32    EventMaxExp                    = 7; // 客户端使用
    int32    EventTodayGet                  = 8; // 客户端使用
    int32    EventTodayMax                  = 9; // 客户端使用
}

message SyncEventCookbookTimesNtf
{
    int32   CurMyCount                       = 1;  // 自己场景中已领取的次数
    int32   MaxMyCount                       = 2;  // 自己场景中最大次数
    int32   CurHelpCount                     = 3;  // 帮助被人配餐已领取的次数
    int32   MaxHelpCount                     = 4;  // 帮助被人配餐可领取的最大次数

    int32   CurMyTotalCount                  = 5; //  当前自己配餐领取的总次数
    int32   MaxMyTotalCount                  = 6; //  自己配餐领取的总次数上限
    int32   CurHelpTotalCount                = 7; //  点赞领取的总次数
    int32   MaxHelpTotalCount                = 8; //  点赞领取的总次数上限
}

message SyncEventCookbokFinishOrderNtf {
    int32   CustomerObjId                    = 1;  //
    repeated ProBagItem   ShowItems          = 2;  //
}





message ProWeekEventRank
{
    repeated ProRankInfo Infos				= 1;
    repeated EventRankRewardInfo RankRewards= 2;
    ProRankInfo MyInfo	 			= 3;
}

message HistoryEventListReq
{
    int32 EventType				= 1;
}

message ProHistoryEventInfo
{
    int32 EventType				= 1;
    int32 EventTypeID				= 2;
    int64 ReadyTime				= 3;
    int64 BeginTime				= 4;
    int64 LastTime					= 5;
    repeated ProRankInfo Ranks				= 6;
}

message HistoryEventListAck
{
    repeated ProHistoryEventInfo Events		= 1;
}

message GSEventRewardInfo
{
    repeated int64 Users 			= 1;//发的玩家
    int32 AllianceID 				= 2;//发奖的联盟id
    int32 BigType 					= 3;//大类型
    int64 EventObjID 				= 4;//活动的唯一ID
    int32 EventTypeID 				= 5;//活动类型ID
    int32 EventConfID 				= 6;//配置ID
    int64 EndTime 					= 7;//结束时间
    int64 EventPoint 				= 8;//活动积分
    int32 EventRank 				= 9;//活动排行
	//repeated ProBagItem Items 		= 10;//奖励的道具
    repeated int32 ServerList 		= 11;//服务器列表
    repeated ProItemInfo RewardItems = 12; // 奖励的道具
}

message ToCenterEventInfoNtf
{
    int32 EventType 	 = 1;
    int64 EndTime       = 2;
    int64 AwardTime 	 = 3;
    int32 SenateLv  	 = 4;//主城等级限制
    int64 StartTime 	 = 5;
}

message EventRead
{
    int64 EventObjId 	= 1;
    bool  Status 		= 2;
    bool  RedPoint  = 3;
    int32 EventType = 4;
    int32 EventBaseId = 5;
}

message EventReadList
{
    repeated EventRead List 				= 1;
}

message GetEventQuestReq
{
    int64 EventObjId = 1; // 活动事件唯一ID
    int32 EventType  = 2; // 活动类型Id
}

message WishListSubQuest {
    int32  SlotId    = 1;      		// 第几类任务
    int32  Finish 	 = 2;			// 当前完成的任务数量
    int32  Max   	 = 3;       	// 最大的任务数量
    TaskInfo  CurrentQuest  = 4;    // 当前进行的任务
}

message EventStaffWishListQuest {
    int32  EventType   = 1;  		 // 活动类型，每一类心愿单活动的类型不一样， 给客户端区分

    repeated WishListSubQuest QuestSlots = 2;    // 子任务
    TaskInfo TotalLikeQuest   = 3;               // 好感度任务
    IAPItemShowInfo  IapShowInfo = 4;            // 活动特殊购买的礼包
}

message GetEventQuestAck
{
    int64 EventObjId = 1; // 活动事件唯一ID
    TaskList EventQuestList  = 2; // 任务列表

    //
    repeated ProBagItem  EventDetailShowAwardItem = 3 ; // 客户端用活动详情里假的显示道具，从EventClient表里取
    EventStaffWishListQuest   WishListEvent = 4;      // 心愿单活动特殊数据
}

message GetEventQuestAwardReq
{
    int64 EventObjId = 1; // 活动事件唯一ID
    int32 QuestId    = 2; // 任务id
}

message EventWishListQuestUpdateInfo
{
    WishListSubQuest QuestSlots   = 1;    // 更新的子任务
}

message GetEventQuestAwardAck
{
    int64 EventObjId = 1;  // 所属的Event
    QuestInfo Quest = 2;   // 领取的单个任务

    EventWishListQuestUpdateInfo WishListSubQuest = 3; // 心愿单活动特殊刷新结构

    QuestInfo UnlockQuest = 4;   // 解锁的下一个活动任务
}

message EventQuestComplateNtf
{
    int64  EventObjID   = 1;  // 所属的Event
    QuestInfo Quest     = 2;  // 完成的当个任务
}

message GetEventOnceRewardReq
{
    int64  EventObjID   = 1;  // 活动ObjId
    int64  Uid          = 2;  // 玩家Uid
}

message GetEventOnceRewardAck
{
    int64    EventObjID   = 1;  // 活动ObjId
    int64    Uid          = 2;  // 玩家Uid
    repeated ProBagItem  AwardInfoes = 3; // 奖励的物品
}

message SyncEventWishListIapShowNtf
{
    IAPItemShowInfo IapShowInfo = 1; // 礼包信息
}

message GetEventScoreRewardReq
{
    int64    EventObjId     = 1;   // 活动ObjId
    int32    RewardBoxIndex = 2;   // 宝箱索引ID
    int64    Uid            = 3;   // 服务器使用
}

message GetEventScoreRewardAck
{
    int64    EventObjId     = 1;   			  // 活动ObjId
    int32    RewardBoxIndex = 2;   			  // 宝箱索引ID
    repeated ProBagItem     AwardItems = 3;   // 奖励数据
}

message UnlockData
{
    int32  UnlockType   = 1; // 解锁类型
    repeated int64 Params = 2; //解锁参数
    int32  Status       = 3;
}

message SyncUnlockDataNTF
{
    int32 Level        = 1;       // 等级
    repeated UnlockData Data = 2; // 解锁的内容
    repeated ProBagItem Items = 3; // 升级奖励的物品
}

//推送已完成的引导idlist
message GetGuideListNtf
{
    repeated int32 GuideIDs = 1;  // 引导id列表
    int32    NextGuideId    = 2;  // 下一个GuidID
}

message GetGuideListAck
{
    int32    CurrentFinishGuideId = 1; // 当前完成的引导Id，直接透传客户端数据
    int32    NextGuideId    = 2; // 下一个GuidID，从NewbieGuide里换算
}

message GetUnlockFunctionNtf
{
    repeated int32 UnlockFunc = 1;  //解锁功能列表
    int32 Flag                = 2 ; //标记 0：表示登录时推送，1：表示触发时推送
}

message ProProgress{
    int32 	Type 			= 1; 	// 类型
    int64 	ObjectID 		= 2; 	// 家具ObjectID
    int64 	StartMs 		= 4; 	// 开始时间
    int64 	EndMs 			= 5; 	// 结束时间
}

message ProAviableMaterial{
    int32 	FoodID 			= 1; 			// 食材ID
    double 	Price 			= 2; 			// 食材价格
    int32 	TasteScore 		= 3; 			// 食材口味分
}

message ProAviableCook{
    int32 	CookID 			= 1; 			// CookID
    double  Price 			= 2; 			// 价格
    int32  	Level 			= 3;  			// 等级
    int32 	CookMs 			= 4; 			// 总时长
    double  MaterialCostMsRate 	= 5;  		// 材料耗时比例
    int32 	TasteScore  		= 6; 		// 餐品总口味
    int32 Taken = 7;
}

message NotOpenCook{
    int32 	CookID 			= 1;
    int32 	OpenLevel 		= 2;
    double	Price			= 3;
}

message SyncCookList{
    repeated 	ProAviableCook 		CookList= 1;
    repeated 	ProAviableMaterial 	FoodList	= 2;
    repeated  	NotOpenCook 		NotOpenList = 3;
    int32		Flag			= 4;
}

message SimpleScore{
    int32 	ScoreKey						= 1;
    int64 	Score 							= 2;
    int32 	ScoreCount 						= 3; 	// 用于计算平均值
}

message SimpleFurniture{
    int32 		BaseID 						= 1;
    int32 		Level 		 				= 2;
    int64 		ObjectID 					= 3;
    SimpleSkinObject  SkinObj               = 4;    // 皮肤
    int32       FurnitureSubTypeIndex       = 5;    // 同BaseId家具的序号
}

message SimpleStaff{
    int32 		BaseID 						= 1;
    int32 		Quality 					= 2;
    int32 		Level 						= 3;
}
message SimpleCookBook{
    int32 		BaseID 						= 1;
}

message SimpleScoreElement{
    int32 			Type 					= 1;
    int64 			Score 					= 2;
    SimpleFurniture Furniture 				= 3;
    SimpleCookBook 	CookBook 				= 4;
    SimpleStaff 	Staff 					= 5;
    //repeated 	ReleaseSkill	SkillList 	= 6;
    int64 			SkillReleaseObjectID  	= 7; 	// 释放ObjectID (Type << 32|BaseID 或者 Type << 32|(ObjectID & 0xFFFFFFFF))客户端使用服务器无意义
}

message ScoreElements{
    int32 		ScoreKey 					= 1;
    repeated 	SimpleScoreElement Elements = 2;
    repeated 	ReleaseSkill	SkillList 	= 3;
}

message ReleaseSkill{
    int32 			SkillID 				= 1;
    int32  			IncresePPM 				= 2;  	// 增加万分比
    int32 			OffSet 					= 3; 	// 技能释放偏移
    int32 			SkillLevel 				= 4; 	// 技能等级
	//int64 			SourceObjectID 			= 5; 	// 技能对象ID
	//int32 			SourceStaffID 			= 6; 	// 技能员工ID
    int64 			Score 					= 7; 	// 累计叠加分数
    int64  			ReleaseObjectID  		= 8;	// 释放ObjectID (Type << 32|BaseID 或者 Type << 32|(ObjectID & 0xFFFFFFFF))客户端使用服务器无意义
    int32 			ScoreKey  				= 9;   	// 客户端使用
}

message SimpleFighter{
    int64 		UserID 						= 1;
    bool 		IsLeft 						= 2;
    repeated 	SimpleScore 	ScoreList 	= 3; 	// 评分信息
    repeated 	ScoreElements 	ScoreDetails= 4;
}

message SimpleFight{
    int32 		DungeonID 					= 1;
    int32 		ID 							= 2; 	// 客户端使用 理论上可以不用
    int32 		CurDungeonID 				= 3; 	// 打完只有玩家所在的副本ID
    repeated 	SimpleFighter 	Fighters 	= 4;
    int64 		ResultScore 				= 5;
}

message MyDungeonInfo{
    int32 		DungeonID 					= 1;
    int64 		MyScore 					= 2;
}

message FurnitureUpgradeReq {
    int64       ObjID               = 1;    // 家具ObjectID
    bool        InstFlag            = 2;    // 立即升级
}

message FurnitureUpgradeAck {
    int32 		Result				= 1;
    int64 		ObjID				= 2;
    bool        InstFlag            = 3;    // 立即升级
    int64       ProgressKey         = 4;    // 进度条Key
    repeated    ProBagItem          AwardShow  = 5; // 升级奖励
}


message UpgradeSameBaseIdFurnitureReq {
    int32       UpgradeBaseId              = 1;    // 升级的家具BaseId
}

// 因为不要求必须摆放到场景才能升级，可能会涉及 SyncScenceObjectNtf 和 SyncStorageChangeNtf 两条同步家具的消息
message UpgradeSameBaseIdFurnitureAck {
}

message ResearchUpgradeReq {
    int32       BaseID               = 1;    // 研究ID
    bool        InstFlag            = 2;    // 立即升级
}

message ResearchUpgradeAck {
    int32 		Result				= 1;
    int32 		BaseID				= 2;
    bool        InstFlag            = 3;    // 立即升级
    int64       ProgressKey         = 4;    // 进度条Key
}

message Research {
    int32       BaseID               = 1;   // 研究ID
    int32		Level				 = 2;	//等级
    int64       ProgressKey          = 3;   // 进度条Key
}

message ResearchListInfo	{
    repeated Research List     = 1;
}

message CancleUpgradeProgressReq {
    int64       ProgressKey               = 1;
}

message CancleUpgradeProgressAck {
    int64       ObjID               = 1;    // ObjectID
    int64       ProgressKey         = 2;    //
    int32       ProgressType        = 3;    // 进度条类型：看PROGRESS_TYPE_XXX
}

message FinishUpgreadeProgressReq {
    int64       ProgressKey         = 1;
}

message FinishUpgreadeProgressAck {
    int64       ObjID               = 1;    // ObjectID
    int64       ProgressKey         = 2;    //
    int32       ProgressType        = 3;    // 进度条类型：看PROGRESS_TYPE_XXX
    int32		Level				= 4;
    repeated    ProBagItem          AwardShow = 5; // 升级给的奖励展示
    int64 		FoodCostMs 			= 6;
    int64		FoodCostPPM			= 7;
}


message SpeedUpProgressReq {
    int64       ProgressKey         = 1;    // 加速进度条
    int32       SpeedUPType         = 2;    // 见加速类型: SPEED_UP_TYPE_XXX
    bool		InstFlag			= 3;
    bool        CheckFinish         = 4;    // 这个标记设置以后，服务器需要检查是否已经完成，完成的话，走完成逻辑
}

message SpeedUpProgressAck {
    int64       ProgressKey         = 1;    // 加速进度条
}


// 进度队列
message Progress {
    int32       ProgressType     = 	1;               // 进度条类型：看PROGRESS_TYPE_XXX
    int64       BeginMs          =  2;               // 开始时间毫秒
    int64       EndMs            =  3;               // 结束时间毫秒

    // 索引，找到Progress对应的对象， 由ProgressType决定其含义，
	// PROGRESS_TYPE_FURNITURE_UPGRADE： Key 值是家具的ObjectID
	// PROGRESS_TYPE_RESEARCH 如果是研究就是研究ID
	// PROGRESS_TYPE_RESEARCH 如果是正常扩店， ID：是场景ID
	// PROGRESS_TYPE_CLEAN_EXTEND_SCENCE 如果是清理扩店，ID是杂物ObjectId
    int64       Key              =  4;
    int64		ProgressKey		 =  5;
    // TODO: 其他的扩充信息
}

message ProgressQueue {
    int32       QueueType   = 1;    			 // 进度队列类型： 看PROGRESS_QUEUE_TYPE_XXX
    repeated    Progress    ProgressList = 2;    // 队列下的进度数据

    // 如果后面给限时队列的道具， 后面再扩展有效时间
}

message SyncProgressListNtf {
    repeated    ProgressQueue   Queue    = 1;    // 队列
}

message GetProgressUpgradeCostReq {
    int32       ProgressType      = 1;            // 类型， 家具升级或者其他
    int64       ObjID      = 2;            		  // ID
}

message GetProgressUpgradeCostAck {
    int32       ProgressType      = 1;            // 类型， 家具升级或者其他
    int64       ObjID      = 2;            		  // ID
    int32       InstCostDiamond = 3;              // 立即升级需要的钻石
    int64       UpgradCostTimeMs = 4;              // 升级花费的时间
}

message OfflineBaseInfo{
    int64 			UserID 			= 1;
    int64 			LeftMs 			= 2;
    int64 			NoBenifitMs 	= 3;
}

message StaticsCook{
    int32 			CookID 			= 1; 			// CookBook 配置ID
    int32 			OrderTimes 		= 2;
    double 			Money 			= 3;
}

message OfflineCustomer{
    int32 			BaseID 			= 1;
    int32 			VisitedTimes 	= 2;
    repeated StaticsCook CookList 	= 3; 			// 已经完成的订单列表
    repeated StaticsCook NotFinishCookList 	= 4; 	// 不会做订单列表
    repeated StaticsCook LeaveNotFinCookList= 5; 	// 排队过长离开的订单列表
    repeated StaticsCook LeaveNotServeCookList= 6; 	// 未来得级服务的订单
}

message OfflineHookReport{
    OfflineBaseInfo 	BaseInfo 	= 1;
    repeated ProBagItem GotRewards 	= 2;
    repeated ProBagItem LostRewards = 3; 			// 损失的列表
    repeated int64 		LostMoney 	= 4; 			// 不同原因损失的金钱
    repeated OfflineCustomer List 	= 5; 			// 离线顾客信息
}

message ExtendScenceReq
{
    int32    ScenceType  			= 1;           // 场景类型
    int64    CleanObjId             = 2;           // 清理的ObjID
    bool 	 UseDiamond  			= 3; 		   // 使用钻石替代消耗标记
}

message ExtendScenceAck
{
    int32    ScenceType  			= 1;           // 场景类型
    int64    ProgressKey            = 2;           // 进度条Key
    int64    CleanObjId             = 3;           // 杂物的ObjID
}

message SyncScenceNormalExtendInfoNtf
{
    int32    ScenceType  			= 1;           // 场景类型
    int64    ProgressKey            = 2;           // 进度条Key
}

message  StallReq{
    int64 		ObjectID 			= 1; 			// SCNECE_DECORATION_OBJ_DINNER_CAR_1
    int32 		MapPointBaseID 		= 2; 			// 目的地
    int32 		StaffID 			= 3; 			// 雇员ID
    bool 		Recall 				= 4; 			// 召回标记
}
message StallAction{
    int32 		Action 				= 1; 			// 行为 STALL_ACTION_MARCH等
    int64 		StartMs 			= 2;
    int64 		EndMs 				= 3;
}

message ItemStallInfo{
    int64 		ObjectID 			= 1; 			// SCNECE_DECORATION_OBJ_DINNER_CAR_1
    int32 		TargetMapPointID 	= 2; 			// 大地图上点的配置ID
    int32 		StaffID 			= 3; 			// 雇员ID
    StallAction Action 				= 4;
    repeated 	ProBagItem 	List 	= 5; 			// 采集奖励信息
}

message MapPointList{
    int64 		UserID 				= 1;
    repeated 	MapPoint 	List 	= 2; 			// 拥有摊位点信息
    bool 		PushFlag 			= 3; 			// true 服务器主动推送
    int64       ServerTimeMs        = 4;            //服务器时间
    RecoveryResInfoNtf BusMovePower = 5;            //大巴移动体力
    int32     MaxCommunityLevel 	= 6; 			// 咖啡协会完成最大等级
    repeated  int32 JobBeachCarMaxLevel = 7; 		// 职业沙滩车最大等级
}

message SyncProperValue {
    repeated PropKeyValue Values      = 1;
    int64 Power 								      = 2; // 战力
    StaffProperShow ProperShow 	      = 3; // 属性显示数据
    repeated CommonIntKV IncomeSpeeds = 4; // 收益速度 每秒收益/s  5=爱心 7=钞票
}

message LotteryItem{
    ProBagItem Item                 = 1;    //物品
    int32      Level                = 2;    //客户端需要等级，默认为1
    int32	   Colour				= 3;	//颜色
    int32 	   StyleType 			= 4;
    int32	   NewFlag			    = 5;	//新获得的:	0-LOTTERY_FLAG_NEW_STAFF-新员工 1-LOTTERY_FLAG_NEW_FURNITURE-新家具 2-LOTTERY_FLAG_NEW_FURNITURE_SKIN-新家具皮肤
    int32 	   Probability 			= 6;    //概率
    repeated ProBagItem LimitConv = 7;//超过上限转换的
}
//卡池信息
message LotteryInfo{
    int32       ID                  = 1;//卡池ID
    int32       FreeTimes           = 2;//免费次数
    int64       CDMs                = 3;//使用免费次数CD时间戳
    int64       RefreshMs           = 4;//刷新时间戳
    int64       EndMs               = 5;//卡池结束时间戳,0为永久
    int32		EventType			= 6;//加强活动类型
    int64		EventEndMs			= 7;//活动结束时间戳
    int32		AtLeastTimes		= 8;//保底剩余次数
    int32		OpenWishListTimes	= 9;//开放愿望单剩余次数
    int32		AtLeastQuality		= 10;//保底的品质
    int32		WeightUpShow		= 11;//显示活动增加概率
    repeated	LotteryAtLeastInfo	AtLeastTimes2	= 12;//显示AtLeast2配置的保底次数
    int32       EventBaseId         = 13;
    int32       SelectStaffId 	    = 14;//选定雇员
    int32       DrewGoldCnt         = 15;//抽到金色的次数(选定卡池用)
    int64       SelectPoolResetMs   = 16;//选定卡池重置时间
    int32  DailyCount								= 17;//当日的抽卡次数 累计值 第二天会重置
}

message LotteryAtLeastInfo{
    int32	Color			=	1;//品质
    int32	AtLeastTimes	=	2;//保底次数
    int32	NotGetTimes		=	3;//已经多少次没出该品质了
}

message UserLotteryInfo {
    int32 ID   				= 1; // 配置id
    int32 Times 			= 2; // 总的抽奖次数
    int32 LuckyPoint 	= 3; // 幸运分
}

message LotteryInfoNtf{
    repeated UserLotteryInfo Infos = 1;
}

//抽卡请求
message LotteryReq {
    int32  ID            = 1; // 配置id
    int32  LotteryCount  = 2;
}

//抽卡回复
message LotteryRsp {
    int32  							 ID           = 1; // 配置id
    int32  							 LotteryCount = 2;
    repeated ProItemInfo Items 				= 3; // 抽到的所有奖励
    int32 	 						 LuckyPoint 	= 4; // 用户当前的幸运值
    int32 							 Times				= 5; // 抽奖次数
}

message LotteryPoolReq{
    int32 			PoolID				= 1;
    int32			Colour				= 2;
}

message LotteryPoolAck{
    int32 			PoolID				= 1;
    int32			Colour				= 2;
    repeated LotteryItem LotteryItems	 = 3;
}

message ProLotterySelectPoolReq{
    int32           M_PoolID              = 1;
}

message ProLotterySelectPoolAck{
    int32           M_PoolID              = 1;
    repeated        int32 M_StaffIdList   = 2;
}

message ProLotterySelectStaffReq{
    int32           M_PoolID              = 1;
    int32           M_StaffId             = 2;
}

message ProLotterySelectStaffAck{
    int32           M_PoolID              = 1;
    int32           M_StaffId             = 2;
}

message SyncBuffBounusNtf {
    repeated  PropKeyValue Values      = 1; // Bounus信息， KV
}

//宠物消息
message ProPetInfoMsg
{
    int32 PetID = 1; //宠物id
}

message GetRewardInfo
{
    int32 RewardType = 1;   //奖励类型
    int32 Status     = 2;    //奖励领取状态：1：可领取，2：领取完
}

message GsSendLocalEventScoreRewardReq
{
    GSEventRewardInfo Reward = 1;   // 奖励信息
}

//联盟帮助信息
message AllianceHelpInfo
{
    int64  UserID = 1;  //
    int64  ProgID  = 2;  //队列id
    repeated int32 Params = 3;// 帮助相关参数
    AllianceSimpleUser UserInfo = 4;  //被援建者的玩家信息
    int32  MaxNum     = 5; //最大被帮助次数
    int32  CurNum     = 6; //当前被帮助次数
    int64  SpeedupTime = 7; //被帮助的单位时间
    int64  FinishTime = 8; //完成时间
    int32  HType      = 9; //帮助的类型 0：升级帮助，1：订单委托
}

//联盟帮助请求或回复
message GetAllianceHelpInfo
{
    int32   Option = 1; //操作：1.获取信息，2.新增，3.删除，4.更新
    repeated AllianceHelpInfo HelpInfos= 2;//
    int64   UserID = 3; //服务器用
    int64   AllianceRes = 4; //当前联盟币
    int64   UpdateMs    = 5 ; //刷新时间
    int32   HelpNum     = 6; //帮助个数 服务器用
    int32   HType       = 7; //帮助的类型 0：升级帮助，1：订单委托
}

//给与帮助
message GetAllianceHelpAction
{
    repeated AllianceHelpInfo HelpList = 1;
    AllianceSimpleUser SrcUser         = 2; //援建者的信息
    int64   SrcUserID     = 3; //援建者id 服务器用
}

//帮助列表
message CompelteAllianceHelpList
{
    repeated AllianceHelpInfo SuccessList = 1; //成功的列表
    repeated AllianceHelpInfo FailedList = 2; //失败的列表
    int64 SrcUserID                      = 3;//援建者
}

message SyncUserSimpleAsInfoReq
{
    UserDetail   Detail         = 1;   // 玩家详情
    int64        SrcUID         = 2;   // 原始的请求者UID
    int32        ClientParam    = 3;   // 客户端透传
    bool         IsNewReq       = 4;   // 是否返回新协议ID(服务器用)
}

message UserExchangeCodeReq
{
    repeated string Codes = 1;//兑换码
}
//
message UserExchangeCodeAck
{
    repeated UserExchangeCodeResult Result = 1;
    repeated ProBagItem Items = 2;
}
message UserExchangeCodeResult
{
    string  Code = 1;
    int32	ErrCode = 2;
    repeated string	Params = 3;//errorcode的参数
}

message ExchangeCodeResult
{
    string  Code = 1;
    int32	ErrCode = 2;
    string  Awards = 3;
    repeated string	Params = 4;//errorcode的参数
}

message ExchangeCodeReq
{
    int64 UserID = 1;
    repeated string Codes = 2;//兑换码
    int32 UserLevel = 3;//玩家等级
}

message ExchangeCodeRsp
{
    int64 UserID = 1;
    repeated ExchangeCodeResult Result = 2;
}

message SyncUserSimpleAsInfoAck
{
    UserDetail   Detail      	= 1;   // 玩家详情
    SimpleAlliance SimpleAsInfo = 2;   // 联盟信息
    int64        SrcUid         = 3;   // 原始的请求者
    int32        ClientParam    = 4;   // 客户端原始消息
    bool         IsNewReq       = 5;   // 是否返回新协议ID(服务器用)
}

//展示服务员id列表
message GetShowStaffIDs
{
    repeated int32 IDs = 1; //服务员id列表
    repeated SimpleStaffInfo  ShowStaffInfo = 2; // 展示的雇员列表
}

message GuestEnterScenceReq
{
    int64  TargetUserID = 1;  // 查看谁的场景
    int32  Reason       = 2;  // 原因
}

message GuestEnterScenceAck
{
    SimpleUser  TargetSimpleUser = 1; 		  // 主人基本信息
    int64       TargetUserTotalBeLikeCount = 2; // 主人获得的点赞次数
    ProCustomerList  TargetViewCustomers  = 3; // 主人的顾客信息，由客户端重放
    ProCustomerList  TargetAppendServiceCustomers  = 4; // 需要立刻刷到店里坐着的顾客
    bool 		HasLiked	= 5;  			  //是否给主人点过赞
    bool        OpenHelp    = 6;  			  // 能否进行配餐
    int32  Reason       	= 7;  			  // 原因
}

message GetVisitorListReq
{
    int64  TargetUserID        		= 1;    // 拉取访客列表
    int64  SrcUid              		= 2;    // 服务器使用
    int32  SrcDailyTotalHelpCount = 3; // 服务器使用
    repeated int64 LikedList 			= 4;//点赞过的人
}

message VisitorLog
{
    int64   Uid                 = 1;   // 访客列表
    int64   VisitTs             = 2;   // 访问时间
    int32   LogType             = 3;   // 记录类型， VISITOR_LOG_TYPE_XXX
    SimpleUser  VisitorSimpleInfo = 4;   // 基础信息
}

message VisitorHelperLog
{
    int64   LogID             = 1;   // 奖励唯一ID
    int64   Uid                 = 2;   // 访客列表
    int64   VisitTs             = 3;   // 访问时间
    repeated ProItemInfo Award            = 4;   // 帮助配餐的奖励
    bool    CanReceiveFlag      = 5;   // 可奖励领奖标记
    int32   ServiceCount        = 6;   // 服务数量
    SimpleUser  HelperSimpleInfo = 7;   // 基础信息
}

message GetVisitorListAck
{
    int64   TargetUserID           = 1;     // 拉取访客列表
    repeated VisitorLog    Infoes  = 2;     // 访客列表
    int64   TotalBeLikeCount       = 3;     // 生涯得赞数
    int64   DailyBeLikeCount       = 4;     // 今日得赞数
    string  TargetAnnount          = 5;     // 个人签名
    repeated VisitorHelperLog HelperLog = 6; // 访客帮助配餐的记录
    int32   DailyHelpCount         = 7;     // 今日已帮助次数
    int32   DailyBeHelpCount       = 8;   // 今日已被帮助次数
}

message GuestPostLikeReq
{
    int64  TargetUserID         = 1;     // 点赞对象
}

message GuestPostLikeAck
{
    int64  TargetUserID               = 1;     // 点赞对象
    int64  TargetTotalBeLikeCount     = 2;     // 点赞对象获得的点赞总数
    int64  TargetDailyBeLikeCount     = 3;     // 点赞对象当日获得的点赞总数
    repeated VisitorLog    Infoes  	  = 4;     // 访客列表
    repeated ProBagItem    AwardInfoes = 5;    // 奖励
}

message VisistorDailyHelperNtf
{
    int32       DailyUsedHelpCnt          = 1; // 当日已用帮助配餐次数
    int32       DailyHelpTargetCnt        = 2; // 当日已帮助该玩家的配餐次数
    bool        DailyTargetCanBeHelp      = 3; // 被帮助者今日是否可以被帮助
    int64       TargetUid                 = 4; // 先带着，被帮助者的UID
}

message SimpleVisitorInfo
{
    int64       Uid                       = 1;  	// UID
    string      Name                      = 2;      // 名字
    int64       VisitTs                   = 3;  	// 访问时间戳，用来排序
}

message SyncCurrentVisitorListNtf
{
    repeated    SimpleVisitorInfo         List = 1; // 当前访客信息
}

message SyncVisitorHelpTaskNtf
{
    int64       NextUpdateMs              = 1;     // 下一次刷新的时间
    QuestInfo   Info                      = 2;     // 当前的任务信息
    repeated    QuestInfo    AllQuestList              = 3;     // 所有的帮助配餐任务
}

message GetVisitorHelpTaskAwardReq
{
    int32       QuestId                   = 1;     // 领奖的ID
}

message ScenceOper{
    int64 	Action 	  			= 1; 	 //SCENCE_RECOVER
    bool    NeedShowAward       = 2;     // 显示奖励
}

message GsGuestEnterScenceReq {
    int64   SrcUid              = 1;    // 请求者的Uid
    int32   SrcGsId             = 2;    // 请求者的ServerID
    GuestEnterScenceReq  RawReq = 3; // 原始请求消息
    string  SrcName             = 4;    // 请求者的名字
}

message GsGuestEnterScenceAck {
    int64   SrcUid              = 1;    // 请求者的Uid
    int32   SrcGsId             = 2;    // 请求者的ServerID
    int64   TargetUid           = 3;    // 看谁的Uid

    // 这里带上数据回请求者统一发送
    ProCustomerList  CurCustotmerList  = 4;       // 当前的顾客列表, 用SCENCE_CUSTOMERS_SYNC 同步
    ProCustomerList  GuestViewCustotmerList  = 5; // 别人可以看到的假顾客
    SyncStaffInfoNtf TargetStaffInfo         = 6; //
    SyncCustomerDetailNtf TargetCustomerDetail = 7;

    GuestEnterScenceAck RawAck   = 8; 			  // 原来的放物品消息
    int32   TargetBeHelpCnt      = 9;             // 被参观者当日被帮助的次数
    int32   LeftSeatCount        = 10;            // 当前被参观玩家空着的位置数量
    int32   EventCookbookProduceItemId = 11;      // 趣味配餐产出的限制道具
}

message GsFinishGuestCustomerOrderReq
{
    int64  HelperUid  = 1;  // 帮助者的uid
    int64  TargetUid = 2;   // 被帮助者的uid
    int32  OrderMoney = 3;  // 钱
    int32  OrderExp = 4;    // 经验
    int32  CustomerObjId = 5;
    bool   IsAllOrderFinish = 6; // 是否完成了所有订单
}

message GsFinishGuestCustomerOrderAck
{
    int64  Uid  = 1;        //  给谁
    int64  HelperUid = 2;   //  帮助者的UID
    int64  TargetUid = 3;   //  被帮助者的UID
    int32  OrderMoney = 4;  //  获得的钱
    int32  OrderExp = 5;    //  获得的经验
    bool   TargetCanbeHelp = 6; // 目标是否能继续接受帮助
    int32  Code     = 7;    // 检查Code
    int32  CustomerObjId  = 8;   // 配餐顾客的ObjId
    bool   IsAllOrderFinish = 9; // 是否完成了所有订单
}

message GsSaveGuestCustomerOrderLogReq {
    int64  HelperUid = 1;   // 帮助者的Uid
    int64  TargetUid = 2;   // 被帮助者的Uid
    repeated ProItemInfo FinalAward = 3; // 整单奖励
    int32  OrderCount = 4; // 本次访问服务的订单数量
    int32  AllFinishedOrderCount = 5;  // 本次访问完全服务完的顾客数量
}

message FetchGuestFinalOrderAwardsReq {
    repeated  int64  LogIDs   = 1; //  奖励ID
    int64  SrcUid              = 2; //  服务用
}

message FetchGuestFinalOrderAwardsAck {
    int64    SrcUid                   = 1;
    repeated VisitorHelperLog LogInfo = 2;
    repeated ProItemInfo FinalAward = 3; // 整单奖励组合
    repeated ProBagItem  CltShowFinalAward = 4; // 奖励
}

message GsGuestCustomerFinalAwardNtf {
    int64  Uid 				= 1;
}

message GsUpdateGuestOpInfoReq {
    int64  Uid              = 1;
    int64  TargetUid        = 2;
}

message GsVisitorLeaveScenceNtf {
    int64  SrcUid           = 1;
    int64  TargetUid        = 2;
}

message GsGuestSyncScenceInfoReq {
    int64   SrcUid              = 1;    // 请求者的Uid
    int32   SrcGsId             = 2;    // 请求者的ServerID
    int64   TargetUid           = 3;    // 目标玩家Uid
    int32   Reason              = 4;    // 透传
}

message RequestBusMove{
    int32  	MapPointBaseID 			= 1; 	// 地图点的BaseID
    bool 	IsPerfect				= 2;	// 客户端下发预判是否完美挑战
    int32 	Rate 					= 3; 	// 倍率
}

message RequestBusCustomer{
    int32  	MapPointBaseID 		= 1; 	// 地图点的BaseID
    int32   ReqCustomerType     = 2;   // 顾客类型，暂时用于浏览别人店铺时拉取访客
    bool 	Change 				= 3; 	// 降级标志
}

message GiveUpBusPoint{
    int32  	MapPointBaseID 		= 1; 	// 地图点的BaseID
}

message BusFinishOrder{
    int32  	OrderIndex 		= 1; 	// 地图点的BaseID
    int32   StaffID     	= 2;   // 服务员ID
    int32   AutoComuunitySavor   = 3;   // 口味分，暂时给自动挑战的分
}


message BusCustomer{
    int32 	ObjectID 			= 1; 	// 客人ObjectID
    int32 	RowedMs 			= 2; 	// 排队时长
    int32 	Sat2ServeMs 		= 3;  	// 坐下到开始服务时长
    repeated   BusFinishOrder	OrderList = 4;	// 那个订单是那个服务员完成的
}

message BusCustomerList{
    int32  		MapPointBaseID 			= 1; 	// 地图点的BaseID
    repeated 	BusCustomer  	List 	= 2; 	// 客人列表
    bool 		AlreadyTimeOut  		= 3;  	// 是否已经超时
}

message ReportBusCustomerAck{
    int32 		MapPoint 	 			= 1;
    bool 		Win 					= 2; 		// 是否胜利
    int32 		SatisfyNum 	 			= 3; 		// 满意人数
    repeated 	ProBagItem 		List 	= 4; 		// 奖励信息
    repeated    int32 			EventAwardBaseIds  = 5;        // 活动奖励的物品
    int32 		BusBaseID 				= 6; 		// 当前作战的大巴BaseID
}

//联盟宝箱列表请求
message GetUserAllianceBoxListReq
{
    int32 BoxType = 1;//宝箱类型 1 联盟精英宝箱 给钱才发 2 联盟普通宝箱 完事才发
    int32 OptFunc = 2; //操作id  0 表示拉取列表 1 表示删除已领取的
}

//联盟宝箱列表信息
message ProUserAllianceBoxInfo
{
    int32   DoubleRewardNum = 1; //双倍奖励已领取次数
    repeated ProUserAllianceBox   BoxList         = 2; //宝箱列表
    int32    BoxType         = 3; //宝箱类型 1 联盟精英宝箱 给钱才发 2 联盟普通宝箱 完事才发
    int32 RewardType   = 4; //领奖类型：0 单个领取 1 一键领取
}
//联盟宝箱
message ProUserAllianceBox
{
    int32 Index    = 1; //宝箱id
    int32 GiftID   = 2; //GiftID
    int32 BoxType  = 3; //宝箱类型 1 联盟精英宝箱 给钱才发 2 联盟普通宝箱 完事才发
    int32 RewardState = 4; //宝箱领取状态
    int64 EndTime  = 5; //宝箱失效时间
    int64 FromUserID = 6; //来自玩家id
    string FromUserName = 7; //来自玩家名称  可以隐藏
    int32  UserIcon  = 8; //玩家头像
    int32  IconFrame = 9; //头像框
    ProBagItem  RewardItem    = 10; //已领取物品  ps 策划说这个地方不会随机出多个奖励 只会有一个item奖励
    bool  IsDouble  = 11; //是否是双倍奖励 false 不是  true 是
    int64 RewardMs   = 12; //领取时间
    int32 NameColor  = 13;//拥有者的炫彩名字颜色
}

//宝箱领取请求
message GetAllianceBoxRewardReq
{
    int32 BoxType   = 1; //宝箱类型
    int32 Index     = 2; //宝箱id
    int32 RewardType   = 3; //领奖类型：0 单个领取 1 一键领取
}

//给全联盟成员发宝箱
message SendAllianceBoxInfo
{
    int32 GiftID   = 1; //GiftID
    int64 FromUserID    = 2; //来源的玩家
    int32 BoxType   = 3; //宝箱类型
    string FromUserName  = 4; //玩家名称
    int32  FromUserIcon  = 5; //玩家头像
    int32  FromIconFrame = 6; //头像框
    int64  UserID        = 7; //接收者id
    int32  NameColor  = 8;//拥有者的炫彩名字颜色
    repeated int64  UserIDs    = 9; //玩家id列表
}

//展示联盟宝箱的奖励
message NtfUserAllianceBoxReward
{
    int32 RewardType = 1;   //领奖类型：0 单个领取 1 一键领取
    repeated ProBagItem RewardItems= 2; //领取的东西
}

// 成就
message ProtoArchievement {
    int32  Type     = 1;   // 成就类型     // ARCHIEVE_TYPE_XXX
    int32  BaseId   = 2;   // 成就ID
    int64  TotalValue = 3; // 该成就总的收集数量
    int32  LastAwawrdIndex = 4; // 已领奖的最后一个index
    bool   IsNew           = 5; // 是否是新的
}

// 收藏风格奖励
message ProtoArchievementStyleFinalAward {
    int32  Type            = 1;       // 类型
    QuestInfo   Info       = 2;       // 任务奖励
}

//
message GetUserArchievementReq {
    int32  Type     = 1;   // 成就类型     // ARCHIEVE_TYPE_XXX
    int64  TargetUid  = 2; // 查看别人的
}

message GsGetUserArchievementReq {
    int64  SrcUid   = 1;   //
    GetUserArchievementReq RawReq = 2; // 原始请求
}

message GetUserArchievementAck {
    ArchievementDetail  Detail   = 1;     //
    int64  TargetUid  = 2; //
}

// 批量收藏拉取
message BatchGetArchievementReq {
    repeated int32  TypeList     = 1;   // 成就类型列表
    int64  TargetUid  			 = 2;   // 查看别人的
}

message GsRouteBatchGetArchievementReq
{
    int64   SrcUid                    = 1; // 源
    BatchGetArchievementReq  RawReq   = 2;  // 原始消息请求
}

message ArchievementDetail {
    int32  Type     = 1;   // 成就类型     // ARCHIEVE_TYPE_XXX
    repeated ProtoArchievement  Archievenents  = 2; // 成就记录
    int64  TypeTotalEnvScore  = 3;  // 该类风格总的积分奖励
    ProtoArchievementStyleFinalAward FinalAwardInfo = 4; // 任务奖励信息
}

message GetSingleArchievementReq {
    int32  BaseId   = 1;   //
}

message GetSingleArchievementAck {
    ProtoArchievement  Info  = 1;
}

message BatchGetArchievementAck {
    repeated ArchievementDetail   Details   = 1;   // 收藏详情
    int64    TargetUid  			 = 2;   // 查看别人的
}

// 收藏风格信息
message SimpleArchievementStyleInfo {
    int32  Type      = 1;           // 类型
    bool   CanAwardFlag       = 3;  // 有可领取收集奖励
    int64  TypeTotalEnvScore  = 4;  // 该类风格总的积分奖励
    bool   NewFlag   = 5;           // 给类风格家具下面是否有新家具
    int32  ArchievementCount  = 6;  // 数量  之前前端没有用这个字段，现在改成了这个类型的已拥有的家具的总数
}

message GetArchievementStyleListReq {
    int64    TargetUid                  = 1;             // 拉取别人才填
}

message GetArchievementStyleListAck {
    repeated SimpleArchievementStyleInfo  Infoes   = 1;  // 风格列表
    int32    TotalCollectCount                     = 2;  // 总的收集数量
}

message GsRouteGetArchievementStyleListReq {
    int64    SrcUid                       = 1;
    int64    TargetUid                    = 2;
}

message GsRouteGetArchievementStyleListAck {
    int64    SrcUid              = 1;
    GetArchievementStyleListAck  rawAck  = 2;
}

// 领取收藏任务奖励
message GetArchievementStyleFinalAwardReq {
    int32  Type       = 1;   // 类型
}

message GetArchievementStyleFinalAwardAck {
    int32   Type      = 1;  // 类型
    ProtoArchievementStyleFinalAward   StyleAward  = 2;   // 风格奖励信息
    repeated ProBagItem   AwardInfo = 3; // 奖励数据
}

message GetUserArchievementAwardReq {
    int32  Type     = 1;    // 成就类型     // ARCHIEVE_TYPE_XXX
    int32  BaseId   = 2;    // 成就ID
    int32  AwardIndex = 3;  // 领取奖励的索引
}

message GetUserArchievementAwardAck {
    ProtoArchievement   Archievenent   = 1; //
    int32   StyleTotalEnvScore         = 2; // 当前风格的总分
}

message BatchGetArchievementAwardReq {
    int32   Type   = 1;    // 类型
}

message BatchGetArchievementAwardAck {
    int32  Type     = 1;    // 成就类型     	   // ARCHIEVE_TYPE_XXX
    repeated ProtoArchievement  Archievenent  = 2; // 变更的成就收集信息
    int32   StyleTotalEnvScore      = 3; // 当前风格的总分
}

message SyncArchievementCountChangeNtf {
    int32  Type     = 1;    // 成就类型     	   // ARCHIEVE_TYPE_XXX
    ProtoArchievement  Archievenent  = 2; // 变更的成就收集信息
    int32    TotalCollectCount                     = 3;  // 总的收集数量
    ProtoArchievementStyleFinalAward FinalAwardInfo = 4; // 任务奖励信息

    SimpleArchievementStyleInfo StyleInfo = 5;   // 客户端要直接用这个结构
}

message ReadArchievementNewFlagReq {
    repeated  int32   BaseIds    = 1; //
}


message ProValuableFurnitureInfo{

}


message ComplainReq {
    int64 Uid = 1;
    string Content = 2;	//聊天内容
    int32 Type = 3;     // 类型
    int64 ComplainUid = 4; // 举报者uid, 服务器使用
    int32 ServerId   = 5;  // 服务器使用

    string BadUserNickName = 6; 	// 被举报人名字, 服务器使用
    string BadUserIP = 7; 			// 被举报人IP, 服务器使用
    int32 IsPremiumUse = 8;  // 被举报人充值标记, 服务器使用
    string M_BadUserAccount = 9;
    bool M_IsPrivateChannel = 10;

}

message ComplainAck {
}

message ProxySetCheckComplainFlag {
    bool Flag = 1;
}

message ProxyReloadConfig {
}

message ProxyReInitIgnoreTextChat{}

message IndieRandChooseItemReq {
    int64  Uid    = 1;
    int32  BaseId = 2;
    int32  Count  = 3;
    string SearialNo = 4; // 方便跨服对日志
}

message IndieGlobalExchangeItem {
    ProItemInfo Item  = 1;
    string   ExchangeCode  = 2;
}

message IndieRandChooseItemAck {
    int64  Uid    = 1;
    int32  Code   = 2;
    repeated IndieGlobalExchangeItem Info = 3;
    repeated ProItemInfo  DefaultItems = 4;

    int32  OrgBaseId = 5; // 原始的道具Id
    int32  OrgCount  = 6; // 原始的道具数量
    string SearialNo = 7; // 方便跨服对日志
}

message ProxyIndieLoadExchangeCode {
    int32  CodeCount     = 1; // 数量
}

message ProxyIndieGmDumpPuMengJiExchangeStat {}

message ProxyIndieGmGiveExchangeCodeReq {
    int64  Uid    = 1;
    int32  BaseId = 2;
    int32  GiveExchangeCodeCount  = 3;
    string SearialNo = 4;

}


message ProxyIndieGmSyncExchangeCacheReq {
    repeated string Prefixes = 1;
}



message BluemapSimpleInfo {
    int32   BluemapId  = 1;  //
    int32   Status     = 2;  // 状态
    bool    New        = 3; // 是否使用过，保存过
    int64   Uid        = 4;  // uid
    string	BlueMapName	=5;//蓝图名字
    bool		IsShare		  =6;//是否分享
    int32 	CurrentLevel = 7;//当时的等级
}


message GetBluemapListReq
{
}

message GetBluemapListAck
{
    repeated BluemapSimpleInfo Infoes = 1; // 蓝图列表
}

message GetBluemapReq
{
    int32  BluemapId   = 1; // 蓝图ID
    int64  Uid         = 2; // uid
}

message GetBluemapAck
{
    int32  BluemapId   = 1; // 蓝图ID
    repeated StorageItem  BluemapStorageContainer  = 2; // 单独同步一次该蓝图下的可摆放的蓝图信息
    bool   IsUsed      = 4;       // 是否正在被使用
    repeated SkinInfoMsg  BluemapSkinInfo          = 5; // 蓝图皮肤数据
    repeated int64        NewObjectIds             = 6; // 蓝图中可使用的ObjectId
    int32  VerCode      = 7;                            // 存档版本号
    int64  Uid         = 8; // uid
}

message SaveBluemapReq
{
    int32  BluemapId  = 1; 			 // 蓝图ID
    int32  ScenceType  = 2;          // 场景类型, 直接填SCENCE_TYPE_RESTAURANT
    repeated ScencePhyObject PhyObjects = 3;  // 场景中摆放的位置道具
    repeated ScenceAttachObject AttachObject = 4; // 场景中摆放的Attach道具
    repeated ScenceDecorationObject LayerInfo  = 5;  // 场景中装饰信息
    int32  VerCode   = 6;            // 客户端使用
    int64  Uid         = 7; // uid
}

message SaveBluemapAck
{
    int32  BluemapId   = 1;          // 保存蓝图ID
    int32  CurUsedBluemapId   = 2;   // 当前使用的蓝图ID
    int64  Uid         = 3; // uid
}

message UseBluemapReq
{
    int32  BluemapId   = 1; // 蓝图ID,
    int64  Uid         = 2; // uid
}

message UseBluemapAck
{
    int32  PrevUsedBluemapId  = 1; // 原来使用的额蓝图ID
    int32  CurUsedBluemapId   = 2; //  当前使用的蓝图ID
    int64  Uid         = 3; // uid
}

message UnlockBluemapReq
{
    int32  BluemapId   = 1;  // 蓝图ID
}

message UnlockBluemapAck
{
    int32  BluemapId   = 1;  // 蓝图ID
    int32  Status     = 2;  // 状态
    bool   New        = 3;
    int64  Uid        = 4;
}

message AllocBluemapObjIdReq {
}

message AllocBluemapObjIdAck {
    repeated int64   NewObjectIds  = 1;
}

//联盟成员隐藏购买信息开关
message AllianceUserInfoHideSet
{
    int32    IsHide = 1;//隐藏开关： 0：显示 1：隐藏
}

//增加可恢复资源
message AddRecoveryRes
{
    int32    AddType = 1; //添加类型： 1：使用道具添加 2：使用资源添加（钻石）
    int32    Num     = 2; //添加数量
    int32    ResType = 3; //添加的资源类型
    int32    ItemId  = 4; //使用的道具id
}

//可恢复资源信息推送
message RecoveryResInfoNtf
{
    int32 ResType = 1; //资源类型
    int64 CurResNum  = 2; //当前数量
    int64 ResMax     = 3; //最大数量
    int64 FlushTimeMs = 4; //恢复时间
    int64    ServerTime = 5; //系统时间
}

message GetQQGroupTokenReq{
    int64 UserID = 1;
    int32 Platform = 2;
}

message GetQQGroupTokenAck{
    int64 UserID = 1;
    string Token = 2;
}
message SyncQQGroupToken{
    int32	Platform = 1;//0-PLATFORM_PC-pc 1-PLATFORM_ANDROID-android 2-PLATFORM_IOS-ios
    string  Token	=2;
}
message StaffBuffEffect
{
    int32  EffectType = 1;   // 类型见20000以后，  BUFF_EFFECT_ADD_STAFF_FOOD_COUNT
    int64  EffectValue1 = 2; // 参数1
    int64  EffectValue2 = 3; // 参数2
}

message ProLotteryWishItem{
    int32 	CfgID 		= 1;
    int32 	ItemID 		= 2;
    bool 	Finished  	= 3; 	// 完成标记
    int32	FinishCnt	= 4;	// 完成的数量
    int32	NeedCnt		= 5;	// 需要的数量
}

message ProLotteryWishes{
    int32  		Type 						= 1;	// OBJ_TYPE_FURNITURE OBJ_TYPE_STAFF
    repeated 	ProLotteryWishItem Items	= 2; 	// 列表
}

message ProWishList{
    repeated  ProLotteryWishes MyList 		= 1; 	// 已选
    repeated  ProLotteryWishes AviableList 	= 2; 	// 可选列表
    int32	WishFurniture					= 3;	// 家具加成
    int32	WishStaff						= 4;	// 员工加成
}

message ChgWishItem{
    int32 	BaseID 					= 1;
}
message ChgWishList{
    repeated ChgWishItem 	List 	= 1;
}


message CompensateUserItemMsg
{
    int64 UserID = 1;  //补偿的玩家id
    repeated ProItemInfo Items = 2; //补偿的道具
}

message CompensateByServerMsg
{
    repeated CompensateUserItemMsg ComUsers = 1;//补偿的人
}
//玩家请求验证码
message GetVerificationCodeReq{
    string CellPhone	=	1;//手机号码
}
message UserVerifyCodeReq{
    string CellPhone	=	1;//手机号码
    string Code		=	2;//验证码
}

message UserVerifyCodeAck{
    string CellPhone	=	1;//手机号码
    bool  Result	=	2;//绑定结果
}

message BindPhoneInfo{
    int64 UserID	=	1;
    string	CellPhone = 2;
    int32 ServerID	= 3;
    int32 Code		=	4;//绑定结果
}

message CleanBindPhone{
    int64 UserID	=	1;
    int32 ServerID	= 2;
}
message UserBindAck{
    repeated ProBagItem items = 1;
}

message MiscInfoNtf {
    int64  CurFirstPayEventObjId   = 1;   // 首充活动的ObjId
    IAPItemInfo  FirstPayIapPackage = 2;  // 首冲礼包信息
    bool        BuyNewbiePackage    = 3;           // 是否购买过首冲礼包
    int64  CurFirstPkgEventObjId   = 4;   // 新首充活动的ObjId
    IAPItemInfo  FirstPkgIapPackage = 5;  // 新首冲礼包信息
    bool        IsBuyFirstPackage    = 6;   // 是否买过新首冲礼包
    bool        IsPushFirstPackage    = 7;   // 是否弹过新首冲礼包
    IAPPushInfo  FirstPkgIapPushInfo	= 8;	//新首充礼包推送信息
    bool		IsBuyWeekCard	=	9;//买周卡没
    bool		IsBuyMonthCard	=	10;//买月卡没
    int32       DailyTotalPay           = 15;     // 当日充值金额
}

message SyncReputationShowNtf {
    int32  ChgReason = 1;                 // 变更原因
    int64  ChgValue  = 2;                 // 变更数值
    int64  FurnitureObjectId  = 3;        // 家具ObjectID
    int64  CustomerObjectId   = 4;        // 顾客ObjectID
    int32  ResearchBaseId     = 5;        // 科研
    int32  CustomerBaseId     = 6;        // 顾客BaseId
    int32  CookBookId         = 7;        // 菜单BaseId
}

message GMCreateUserReq {
    int32 ServerId = 1;
}

message GMCreateUserAck{
    int32 Code		= 1;
    int64 UserID	= 2;
    int32 ServerID	= 3;
}

message GetDeskUpgradeListReq {
    int64  ObjectId  = 1;   // 客户端使用
}

message GetDeskUpgradeListAck {
    repeated SimpleFurniture List = 1;
    int64    ObjectId  = 2;   // 客户端使用
}

message UpgradeDeskReq {
    int64  ObjectId   = 1;
}

message UpgradeDeskAck {
    SimpleFurniture  Info = 1; //
    repeated ProBagItem AwardShowInfo = 2; // 升级奖励物品展示，
}

message SyncDeskUpgradeListNtf {
    repeated SimpleFurniture Infoes   = 1;   // 变更的数据
}



//家具皮肤请求
message GetFurnitureSkinInfoReq
{
    int64 ObjID  = 1;  //家具objid
    int32 ReqType      = 2;  //0:单个请求 1:全部请求
}

//家具对应的皮肤信息
message GetFurnitureSkinInfoAck
{
    int64 ObjID        = 1; //家具objid
    repeated SkinInfoMsg SkinList = 2;
}

//皮肤信息
message SkinInfoMsg
{
    int32 SkinId   = 1;   //皮肤id
    int32 Count    = 2 ;  //皮肤剩余数量
    int32 TotalCount = 3;   //皮肤总数量

}

//皮肤 在家具上的
message SimpleSkinObject
{
    int32 SkinId   = 1; //皮肤id
}

//同步皮肤
message SyncSkinInfoMsgNtf
{
    repeated SkinInfoMsg SkinList = 1;//家具信息
}

//应用皮肤请求
message CoverFurnitureSkinReq
{
    repeated int64 FurnitureIDs = 1; //家具idlist
    int32   SkinId              = 2; //应用皮肤id
}

//应用皮肤回复
message CoverFurnitureSkinAck
{
    repeated int64 ErrObjList = 1; //设置皮肤出错的objid
}

message NotInvitedCustomerList{
    repeated int32 	List 		= 1; 	//未邀请的顾客列表
}

message  ChallengeSavorDungeon{
    int32 		BaseID 				= 1;
    repeated  	int32 	StaffList 	= 2;
    repeated 	int32 	CookList  	= 3; 	//只有指定分类的才需要上传服务器
}

message SavorCustomer{
    ProCustomer Customer 	 		= 1;
    int32 		Score  		 		= 2;
    StaffInfo 	ServeStaff  		= 3;
}

message  ChallengeSavorDungeonResult{
    int32 		BaseID 					= 1;
    repeated 	SavorCustomer Customers	= 2;
    bool 		Win 					= 3;
}

message SyncInvitationRefreshInfo {
    int64       NextRefreshMs   = 1;     // 下一次刷新的时间
    int32       MaxCount        = 2;     // 总的数量
    int64       RefreshMsBegin  = 3;     // 刷新开始时间，画进度条
    int64       ServerTime      = 4;     //系统时间
    int64       CountRefreshMs  = 5;     //全部刷新完的
}
// 菜单
message MenuItem{
    int32 CookID 	= 1;
    int32 Price 	= 2;
}

message SyncMenu{
    repeated MenuItem Menu = 1;
}

message UnlockCookBookReq{
    int32 CustomerId = 1;
    int32 CookBookId = 2;
}

message AwardWithFlag
{
    ProBagItem	Award = 1;
    int32		Level = 2;	//奖励等级
    int32		NeedCost = 3;//消耗
    bool		IsGetAward = 4;
    bool 		IsShow = 5;
    repeated    ProBagItem Consumes = 6; // 替代钻石道具消耗
    int32       Match3DungeonId = 7;   // 策划特殊显示三消游戏关卡
}

message MutiAwardPayEvent
{
    int32		Type 			= 1;//活动类型
    repeated AwardWithFlag Awards = 2;//普通奖励
    repeated AwardWithFlag PayAwards = 3;//付费后解锁奖励
    IAPItemInfo PayItem = 4;	//需求礼包
    bool IsUnlock = 5;	//是否解锁付费奖励
    int32 CurLevel = 6;		//当前等级
    int32 MaxLevel = 7;		//最大等级
    int32 CurPoint = 8;		//当前等级积分
    int32 MaxPoint = 9;		//最大等级积分
    int64 EventBeginMs = 10;
    int64 EventEndMs = 11;
    int32 LevelUpType = 12;//升级类型,0-没升级 1-普通升级 2-钻石升级
    int32 LastLevel = 13;//之前等级
    string BestRewardPic = 14;
    string Name = 15;
    string PassRes = 16;//预制体
    int32  NewUIMaxShowLevel  = 17;  // 新战令UI可展示的最高等级
    int32  NewUIMaxBuyLevel  = 18;   // 新战令UI时可用钻石购买的最高等级
    repeated IAPItemInfo NewPayItems  = 19;  // 需要的礼包数据
}

message CommonBattlePassEventListReq {
    int32 Type      = 1;                    //
}





message GetIapMultAwardReq
{
    int32 Type		= 1;
    int32 Level		= 2;
    bool  IsPayAward = 3;//是否是支付解锁奖励
}

message MutiAwardPayEventExtraInfo
{
    string ShowBestAward2 = 1;
    string MutiAwawrdBuyPic = 2;
    repeated string M_MultiAwadDescStr = 3;
}

message PayMultAwardEventReq
{
    int32 Type		= 1;	//战令类型
    int32 BuyLevel		= 2;//要买到的等级
    repeated ProBagItem Consumes = 3;//需要消耗的道具

}

message GetAllIapMultAwardAck
{
    int32 Type		= 1;
    repeated ProBagItem  Items  = 2; 		// 奖励信息
}




message CustomerEventOper{
    int32 	Action 				= 1;
}
message CustomerEvent{
    int32 	EventID 			= 1; 		// 事件ID
    int32 	EventCustomerBaseID = 2; 		// 基础ID
    int32 	NextEventDeltaMs 	= 3; 		// 下次事件Delta毫秒
    int64 	DissapearMs 		= 4; 		// 消失事件
    repeated ProBagItem  Items  = 5; 		// 奖励信息
    bool  	ReleasedCustomer 	= 6; 		// 已经下客

}

message EventCustomerAllFinishedRewards{
    repeated 	ProBagItem 	 	List 	= 1;    //  所有事件客人完成后的整单奖励
    bool        Win            = 2;            //  是否获胜
    int32       EventCustomerBaseId = 3;
}


message StartFoodTakeoutReq {
    int32   MapBaseId           	= 1; // 地图点BaseID
    repeated  int32   StaffIds  	= 2; // 雇员ID
    int64   DirnnerCarFixDecorObjId = 3; // SCNECE_DECORATION_OBJ_DINNER_CAR_1, 外卖车
}

message StartFoodTakeoutAck {
}

message RefreshMapPointReq {
}

message FinishFoodTakeoutReq {
    int64  DirnnerCarFixDecorObjId   = 1;   // 出发的外卖车
}

message FinishFoodTakeoutAck {
}

message GetFoodTakeoutAwardReq {
    int64  DirnnerCarFixDecorObjId   = 1;   // 出发的外卖车
}

message GetFoodTakeoutAwardAck {
}

message SyncStaffChipChangeNtf {
    int32  StaffCount  = 1;      // 转换的雇员数量
    ProBagItem  StaffChipTransResult = 2; // 结果
}

message ExchangeMaxStarStaffChipReq {
    int32  StaffId     = 1;      // 雇员ID
}

message ExchangeMaxStarStaffChipAck {
    int32  StaffId     = 1;      // 雇员ID
    ProBagItem  StaffChipTransResult = 2; // 兑换结果
}

message StaffOneReleaseSkill{
    int32 		SkillID  		= 1;
    int64 		LastReleaseMs 	= 2; 	// 上次释放时间
}

message StaffSkillRelease{
    int32 		StaffID 						= 1;
    repeated 	StaffOneReleaseSkill 	List 	= 2;
}

message SyncStaffsReleaseSkill{
    repeated 	StaffSkillRelease List 	= 1;
    bool 		EchoFlag 				= 2;
    int32 		Code  					= 3; 	// 错误码
}

message SyncVisitorPostLikeNtf {
    int64  VisitorUid  = 1;      // 点赞者Uid
    string VisitorName = 2;      // 点赞者名字
    int64  CurBeLikeTotalCount = 3;  // 总的被点赞次数
}

message GsRouteVisitorPostLikeNtf {
    int64  TargetUid   = 1;      // 通知谁
    int64  VisitorUid  = 2;      // 点赞者Uid
    string VisitorName = 3;      // 点赞者名字
}

message SimpleChangeInfo{
    int32  CustomersPerHour 		= 1; 		// 每小时的客人数
    int32  MaxFinishedLevel 		= 2; 		// 常规大巴完成等级
}

message ComposeDecompose{
    int32 	Action 					= 1; 		// ITEM_COMPOSE 合成  分解
    int32 	SrcBaseID  				= 2; 		// 原材料BaseID
    int32 	SrcCount 				= 3; 		// 原材料数量
}

message ComposeDecomposeAck {
    int32 	Result 			= 1; 		// 操作结果
    int32 	Action 			= 2; 		// ITEM_COMPOSE 合成  分解
    int32 	SrcBaseID  	= 3; 		// 原材料BaseID
    int32 	SrcCount 		= 4; 		// 原材料数量
}

/********** 沙滩车关卡 **********/
message GetBeachCarDungeonInfoReq {
}

message GetBeachCarDungeonInfoAck {
    int32   TotalWipeCount          = 1;        // 总的扫荡次数
    int32   UsedWipeCount           = 2;        // 已使用的扫荡次数
    int32   CurFinishDungeonId      = 3;        // 当前已通关的最后一个关卡ID
}

message BeachCarDungeonFightReq {
    int32   DungeonId               = 1;        // 关卡ID
    repeated int32  StaffObjects    = 2;        // 挑战使用的雇员列表
    int32   FightType               = 3;        // 挑战类型， 0 -- 普通战斗， 1 -- 持续战斗
}

message BeachCarDungeonFightAck {
    int32   DungeonId               	= 1;        // 关卡ID
    repeated int32  StaffObjects    	= 2;        // 挑战使用的雇员列表
	// 其他的东西看表现需要
    bool    Win                  		= 3;       	// 挑战结果, 赢或者输
    repeated ProCustomer 	Customers 	= 4; 		// 客人信息
    int32 	GotScore  					= 5; 	 	// 获得分数
    repeated StaffInfo      FightStaff 	= 6;       // 雇员的属性可能已经有变化，客户端需要用这里的数据
    repeated ProBagItem 	Rewards 	= 7; 		// 奖励信息
    int32   FightType                   = 8;        // 挑战类型， 0 -- 普通战斗， 1 -- 持续战斗
    int32   FirstDungeonId              = 9;         // 首次战斗关卡id 针对与跳关的功能
}

message FinishBeachCarDungeonReq {
    int32   DungeonId               = 1;        //
    int32   FightType               = 2;        // 挑战类型， 1 -- 持续战斗
}

message FinishBeachCarDungeonAck {
    int32   DungeonId               = 1;        // 关卡ID
    bool    Win                     = 2;        // 挑战结果, 赢或者输
    repeated ProBagItem   ShowAwards = 3;       // 奖励的展示
    int32   CurFinishDungeonId       = 4;       // 当前已通关的最后一个关卡ID
    int32 	GotScore  				 = 5; 	 	// 获得分数
    int32   FightType                = 6;       // 挑战类型， 0 -- 普通战斗， 1 -- 持续战斗
    bool    ForceFinish              = 7;       // 强制结束标记，只有出错时才会为true, 强制让客户端关掉界面
    int32 	Code 					 = 8; 		// 返回码
}

message WipeBeachCarDungeonReq {
    int32   DungeonId               = 1;        // 关卡ID
}

message WipeBeachCarDungeonAck {
    int32    DungeonId                = 1;        // 关卡ID
    repeated ProBagItem   ShowAwards = 2;        // 奖励的展示
    int32   TotalWipeCount          = 3;        // 总的扫荡次数
    int32   UsedWipeCount           = 4;        // 已使用的扫荡次数
}

/********** END 沙滩车关卡 **********/

message IapDailyGift{
    int32 Pos			=	1;//物品所在位置
    ProBagItem	Item	=	2;//许愿物品
    int64	GetTimeMs	=	3;//领取的时间(毫秒)
    int32	Particle	=	4;//特效
}

message IapDailyGiftListAck{
    repeated IapDailyGift Gifts	= 1;
    int64	 RefreshMs		= 2;//下次刷新时间
    int64    EventStartMs   = 3;//活动开始时间
    int64    EventEndMs     = 4;//活动结束时间
    repeated ProBagItem	ConsumeItems = 5;//消耗物品
}

message IapDailyGiftReq{
    int32   EventBaseID =   1;  //许愿池关联的活动
    int32   PreyType    =   2;  //0-IAP_DAILY_GIFT_PRAY_TYPE_SINGLE-单抽 1-IAP_DAILY_GIFT_PRAY_TYPE_MULTIFY-多抽
}
message IapDailyGiftResult{
    repeated IapDailyGift ResultGifts = 1;//抽卡结果
    repeated ProBagItem	ConsumeItems  = 2;//消耗物品
}

message SimpleStatics{
    int32 	CircleID 					= 1; 	// 周期ID
    int32 	PositiveRate 				= 2; 	// 好评率 放到了10000倍
    double 	TotalIncome 				= 3; 	// 总收入
    int64 	MaxIncomeScore 				= 4; 	// 最大收入评分
}

message PanelStaticsInfo{
    SimpleStatics 	CurStatics  			= 1;
    int32	 		TotaltCustomers			= 2;	// 总顾客
    int32	 		CustomersPerHour		= 3;	// 每小时来客速度
    int32	 		CustomerComeRate		= 4;	// 实际来客速度倍率
    int32 			BonusIndex 				= 5;	// 收益下标
    int32 			CurcirelTotalCount 		= 6; 	// 当前阶段总人数
    int32 			CurIntrest 				= 7; 	// 当前热情度池的值
    int32 			MaxIntrest 				= 8; 	// 最大值
    int32 			CurrentStar				 = 9;//当前星级
    int64 			UpStarEndTime			 = 10;//升星结束时间
}

message RestaurantStaticsInfo{
    int64 			UserID 					= 1; 	// 用户ID
    PanelStaticsInfo  	PannelInfo 			= 2; 	// 当前周期
    repeated 		SimpleStatics 	List	= 3; 	// 历史信息
}
//签到奖励/累计签到奖励
message SignItem{
    int32	DayCnt = 1;	//第几天/累计第几天
    repeated ProBagItem Items= 2; //奖励
    bool	IsDouble	= 3;	//是否双倍
    bool 	IsGet       = 4;	//是否领取
}
//签到信息回复
message SignInfoAck{
    int32 SignGroupId	=	1;//签到组Id
    repeated SignItem SignItems = 2;	//签到信息
    repeated SignItem AddSignItems = 3;	//累计签到信息
    int32	CurSignCnt	=	4;//当前签到天数
    int32	CurFreeRemedyCnt	=	5;//当前免费补签天数
    int32	RemedyCost			=	6;//补签消耗
    bool    IsSignToday         =   7;//今天是否签到'
    int32 TotalFreeRemedyCnt = 8;
}
//签到请求
message SignReq{
    int32 SignGroupId	=	1;//签到组Id
    int32 SignType		=	2;//签到类型 0-SIGN_TYPE_NORMAL普通签到 1-SIGN_TYPE_REMEDY-补签 2-SIGN_TYPE_ADD-累计签到奖励
    int32 DayCnt		=   3;//签到那天
}

message SignAck{
    int32 	SignGroupId	=	1;//签到组Id
    int32	CurFreeRemedyCnt	=	2;//当前免费补签天数
    int32	RemedyCost			=	3;//补签消耗
    int32 	SignType		=	4;//签到类型 0-SIGN_TYPE_NORMAL普通签到 1-SIGN_TYPE_REMEDY-补签 2-SIGN_TYPE_ADD-累计签到奖励
    int32 	DayCnt		=   5;//签到那天
    bool	IsDouble	=	6;//是否是双倍奖励
    int32 TotalFreeRemedyCnt = 7;
}
//基金
message FundInfoAck{
    int32 GroupId               =   1;//组ID
    repeated SignItem SignItems =   2;//签到信息
    int32	CurSignCnt	        =	3;//当前签到天数
    IAPItemInfo	PayItem			=	4;//需购买的包
    bool		IsBuyItem		=	5;//是否购买基金
    IAPItemInfo	MonthCard		=	6;//月卡
    IAPItemInfo	WeekCard		=	7;//周卡
}

message FundSign{
    int32 	GroupId	    =	1;//组Id
    int32   DayCnt		=   2;//签到那天
}
//请求合服储蓄罐活动回复
message MerGeServerIApInfo{
    int64 EvnetBeginTime	= 1;
    int64 EventEndTime = 2;
    int32 PaySomeOneID = 3;
    repeated SinSingleInfoList SignItems4 =   4;//签到信息
    repeated IAPItemInfo List = 5;//目前出售的礼包信息以及状态的列表
}
message SinSingleInfoList {
    repeated SignItem SignItems =   1;//签到信息
}


//基金
message SpecFundInfo{
    int32 GroupId               =   1;//组ID
    repeated SignItem SignItems =   2;//签到信息
    int32	CurSignCnt	        =	3;//当前应该领的天数
    bool	IsSignToday	        =	4;//今天领了吗
    IAPItemInfo	PayItemA		=	5;//解锁B包的包
    IAPItemInfo	PayItemB		=	6;//解锁特殊基金的包
    bool		IsBuyItemA		=	7;//是否购买A包
    bool		IsBuyItemB		=	8;//是否购买B包
    int64		ItemAEndMs		=	9;//A包结束时间
    int64		ItemBEndMs		=	10;//B包结束时间
    int32       M_SpecFunShowId =   11;//碧碧签到礼包showid
}

message GetMergeServerAwards{
    int32  		GroupID = 1;
    repeated	ProBagItem Awards = 2;//奖励
}

message MergerServerIAPList {
    repeated  MergeServerIAP List = 1;//多个礼包信息
}

message MergeServerIAP{
    int32 GroupId               = 1;//组ID
    int64 EndTMs								= 2;//购买之后礼包点击领取 结束时间
    IAPItemInfo IapInfo 				= 3;//礼包信息
    bool  IsPay 								= 4;//是否购买
    repeated SignItem SignItems = 5;//签到信息
    int32  CanAwardsCount				= 6;//当前可领次数
}
message CookBookLevelupResult{
    ProAviableCook 	OrgCook 	= 1;
    ProAviableCook 	ResultCook 	= 2;
}

message AsDungeonRequest{
    CommOption 		Option 		= 1;
    int32 			Action 		= 2; 	// 1查看  2挑战
    repeated int32	StaffList   = 3; 	// 上阵信息 2有效
    int32 			FinTimes   	= 4;    // 服务器填写
    int32           Count       = 5;    // 服务器填写 默认1次   特殊活动1505期间多次消耗
}

message AsDungeonAck{
    int64 			UserID 		= 1;
    int32 			Action 		= 2;
    AsDungeon 		Dungeon 	= 3;
    int32 			FinTimes   	= 4;
    int64           UserScore   = 5;//玩家挑战前的副本积分
    int32           Count       = 6;    // 服务器填写 默认1次   特殊活动1505期间多次消耗
}

message AsDungeon{
    int32 		DungeonID 		= 1;
    int64 		CostScore 		= 2;
    int32 		Status 			= 3;
    int64 		ExistEndMs  	= 4;
}

message SyncAsDungeonScore{
    CommOption 		Option 		= 1;
    int32 			DungeonID 	= 2;
    int64 			Score 		= 3; 		// 成绩
    int64 			TotalSavor 	= 4; 		// 贡献的Savor
}

message AllianceDungeonCustomerList{
    int32 			DungeonID 	= 1;
    repeated ProCustomer List 	= 2;
    int32  			Score 		= 3;
    bool    		Win         = 4;        // 挑战结果, 赢或者输
    repeated ProBagItem ItemList= 5;        // 奖励的展示
    int32 			FinTimes 	= 6; 		// 已经完成的次数
    repeated int32  StaffObjects= 7;        // 挑战使用的雇员列表
    int64    DungeonScore       = 8;        // 挑战前的副本进度
    int64    UserScore          = 9;        // 玩家挑战前的副本积分
    int32    TasteScore         = 10;       // 玩家挑战完后 口味得分
    repeated StaffInfo      FightStaff = 11;       // 雇员的属性可能已经有变化，客户端需要用这里的数据
}

//联盟排行榜请求
message GetAllianceBossRankReq{
    int32  RankType     = 1;//排行榜请求类型 1：表示全联盟boss排行 2：表示联盟内个人boss积分排行 3:表示全联盟粉丝排行  6：表示联盟内粉丝排行榜
    int64  UserID       = 2;//请求人id  服务器用
}

//联盟排行榜回复
message GetAllianceBossRankAck{
    repeated ProRankInfo RankList = 1; //排行榜信息列表
    ProRankInfo MyRankInfo      = 2;   //自己的排行榜信息
    int32 RankType              = 3;   //
}


//联盟成员排行榜详细信息
message AsMemberBossRankDetail{
    int64    TargUserID    = 1; // 客户端传 查看的对象
    int64    SrcUserID     = 2; // 服务器用 玩家自己的
    repeated  SimpleStaffInfo StaffInfos = 3; // 挑战阵容
}

// 拉取联盟委托
message GsGetAllianceEntrustReq {
    int64    UserID     = 1;   			   //
    GetEntrustCustomerListAck RawData = 2; // 透传原来的请求数据
}

// 拉取联盟委托响应
message GsGetAllianceEntrustAck {
    int64    UserID     = 1;   			   //
    GetEntrustCustomerListAck RawData = 2; // 透传原来的请求数据
    int32    FirstGet   = 3;
}



// 联盟委托操作响应
message GsAllianceEntrustOper {
    int32 Code = 1; //错误码
    int64 UserID = 2;
    int32 Oper   = 3;  //1：增加求助委托 ；2：删除求助委托；3：更新求助委托  4：领取委托 5：完成委托
    int64 AsCommID = 4;  //求助委托id 更新删除用
    repeated EntrustCustomerInfo  HelpEntrustCustomerInfo = 5;
    EntrustCustomerInfo  ChangeHelpEntrustCustomerInfo = 6; //透传给center和gs用的 用于查询和到gs改信息用
    bool  IsAgainFight = 7; //是否重新战斗 true 是  false 不是
    bool  IsAllRefresh = 8; //是否全部刷新
    repeated int64  ExistAsCommIDs = 9; //当前已在身上的联盟委托commid，用于单独刷新排除的
}
message ShowSelectBoxReq {
    int32   ItemId		=	1;		// 查看哪个物品
    bool    IsPackItems =   2;      //是否打包items true:需要打包 false: 不需要打包
}

message ShowSelectBoxAck{
    int32   ItemId				=	1;
    repeated ProBagItem Items	=	2;//有些什么物品
    int32	SelectNum			=	3;//能选几个
}

//数数客户端上报数据结构
message ProThinkingDataInfo{
    int64     TimeMs    = 1;//时间戳
    string    EventName = 2;//事件名称
    string    JsonProperty = 3; //事件json字符串
}

//数数上报
message ThinkingDataList{
    repeated ProThinkingDataInfo ProInfos = 1; //数据列表
}

message NotifyNewReceiveStaffNtf {
    int32    StaffObjectID       = 1;          // 新的雇员ObjectID
    int32    Reason              = 2;          // 雇员原因
}


// 新的顾客小费
message CustomerTipInfo {
    int32    TipId               = 1;   // 小费Id
    double   Money 				 = 2; 	// 金额
}

//可恢复资源信息集合
message GetRecoverResCountMsg{
    int32    ResID = 1;//可恢复道具或资源id
    RecoveryResInfoNtf ResNtf = 2;//资源恢复信息
    ShopGoodsInfo ShopList = 3; // 资源商品数据
    SyncInvitationRefreshInfo RecovItem = 4;//道具恢复信息

}
message GsSendGameServerEventAwardMailReq {
    bool    IsFinalRankReward  = 1;   // 是否是最后的排行榜奖励
    repeated GSEventRewardInfo  EventRewardInfoList  = 2; // 奖励信息
}

//雇员专精餐品信息
message GetStaffLearnCookInfo{
    int32  Staff  = 1; //员工id
    int32  Pos    = 2; //餐品的格子
}

//雇员升阶
message GetStaffCookLevelUp{
    int32 Staff   = 1; //员工id
    int32 StaffCookLevel = 2; //员工职称等级
}

//领取绑定手机号奖励
message GetBindPhoneAck{
    repeated ProBagItem Awards = 1;
}

// 委托顾客订单
message FinishBusEntrustCustomerRequestReq {
    int32    StaffBaseID   = 1; 		 //
    int32    ObjectID      = 2; 		 //
    repeated int32 OrderIndexArray  = 3; //
    int64    AsCommID      = 4;    //联盟委托唯一id
}

message SyncCurrentEntrustCustomerStatNtf {
    int32  BusCustomerId  = 1;			//
    int32  CurWinCount    = 2;          // 当前满意人数
    int32  CurLoseCount   = 3;          // 当前不满意人数
    int32  MinWinCount    = 4;          // 最少满意人数
    int32  MinLoseCount    = 5;         // 最少不满意人数
    int64  ChallengeSerailNo = 6;       // 序列号
    int32  FightResult    = 7;          // 战斗结果
    int32  ObjectID      = 8; 			//改变的顾客ID
    int32  MapPointId    = 9;       	// 缓存下地图点
}

message GetEntrustCustomerListReq {
    int32    MapPointId   =  1;       // 客户端使用
}

message EntrustCustomerInfo {
    int32    MapPointId       = 1;
    int32    BusCustomerId    = 2;
    int32    Status           = 3;
    repeated ProBagItem  AwardInfo = 4;
    int32    CurrentWinCount  = 5;
    repeated ProBagItem  EventSpecialDrop = 6;
    int64    AsCommID           = 7; //联盟委托唯一id
    SimpleUser   SeekHelper   = 8; //求助者信息，用于联盟委托
    repeated ProItemInfo ItemInfos = 9; //用于奖励信息在gs与center之间传输用
    int64    HelperID         = 10; //帮助者的userID
    ResonOfAnalysisLose  LoseReson = 11;//委托失败的时候，分析原因的数据结构
    int32 	Rate  				= 12; 	// 倍率
}

message ResonOfAnalysisLose{
    int32  StaffObjectId 	= 1;//最小厨艺员工ID
    int32  BaseCooking 		= 2;//基础厨艺
    int32  CookingPpm 		= 3;//加成万分比厨艺
    int32  CookingValue 	= 4;//加成厨艺值
    int32  LoseReson			= 5;//失败原因 1分数低 2 座位不足
    int32  StaffLevel 		= 6;
    int32  StaffStar			= 7;
    int32  CookLevel			= 8;//职称等级
    bool   IsPerfect			= 9;
}

message EntrustChallengeTimes {
    int32    EntrustType     = 1;    // 委托类型
    int32    CurrentTimes    = 2;    // 当前值
    int32    MaxTimes        = 3;    // 最大值

    int32    ShopId          = 4;    // 商店ID
    int32    BaseId          = 5;    // 商店购买道具ID
    PriceInfo  ShowPrice = 6;    // 展示出来的价格
    int32    LeftBuyCount    = 7;    // 剩余可购买次数
    int64    RefreshTimesMs  = 8;    // 回复时间
    int32    DailyUsedRefreshTimes = 9;  // 今日已用的回复次数
    int32    ResType       = 10;   // 资源类型
    int32    EntrNum     = 11;   //委托数量
}

message GetEntrustCustomerListAck {
    repeated EntrustCustomerInfo  MoneyEntrustCustomerInfoes = 1;   // 财富
    repeated EntrustCustomerInfo  GrowthEntrustCustomerInfoes = 2;  // 成长
    repeated EntrustCustomerInfo  AsCommissionCustomerInfoes  = 3;  //联盟委托
    int32    MapPointId   =  4;       // 客户端使用

    EntrustChallengeTimes MoneyEntrustTimes  = 5;    // 财富委托次数
    EntrustChallengeTimes GrowEntrustTimes   = 6;    // 成长委托次数
    EntrustChallengeTimes AsCommissionEntrustTimes   = 7;    // 联盟委托次数
    EntrustChallengeTimes NeedHelpEntrustTimes   = 8;    // 委托可求助次数
    int32    MaxEntrustLevel    =   9;              //   财富委托和成长委托的最大等级
}

message EntrustCustomerChallengeOperReq {
    int32   OpType    = 1;
    int32   MapBaseId = 2;
    bool    WithMoney = 3;  // 是否用钱刷新
    int64   AsCommID    = 4;   //联盟委托唯一id
    bool    IsPerfect   = 5;//重试委托挑战的时候需要下发预判是否完美挑战的标记
}

message EntrustCustomerChallengeOperAck {
    int32   OpType    = 1;
    int32   MapBaseId = 2;
}

message EntrustBusMoveNtf {
    int32   MapBaseId = 1;
}


message EntrustBusAddNtf {
    repeated  int32   MapBaseId = 1;   // 增加委托大巴点
}

// 同步委托次数
message SyncEntrustChallengeTimes {
    repeated EntrustChallengeTimes  EntrustTimes  = 1;    // 财富委托次数
}

message BuyEntrustChallengeTimesAck {
}

message BuyEntrustChallengeTimesReq {
    int32   EntrustType = 1;   // 类型
}

message SyncEntrustCustomerListNodeNtf {
    repeated EntrustCustomerInfo UpdateInfo = 1;
    int32   MaxEntrustLevel                 = 2;
}


//
message ReceiveEntrustCustmerChallengeRewardReq {
    int32  MapPointId    = 1;
}

message ReceiveEntrustCustmerChallengeRewardAck {
    repeated ProBagItem RewardsInfo = 1;
}

message SyncAsUserSeekHelpEntrustCheck{
    int64   UserID = 1;
    repeated int64 AsCommIDs = 2;//联盟委托唯一id组
}

message  PVPRequest{
    int32  						Action 			= 1; 	// 请求列表 刷新列表 PVP_ACTION_GET_PVP_LIST
}

message  PVPSimpleUser{
    RankSimpleUser  			User  			= 1; 	// 用户信息
    repeated 	StaffInfo	StaffList  	 		= 2; 	// 雇员信息
}

message  PVPList{
    repeated PVPSimpleUser  	UserList 		= 1; 	// 挑战列表
    int32 	 MyRank 							= 2;
    int64  	 PvpEndMs  							= 3; 	// PVP结束时间
    int64 	 PvpAwardEndMs 						= 4; 	// 奖励发放结束时间
    repeated ProBagItem  		Awards 			= 5; 	// 奖励信息
    int64 	 RefreshMs 							= 6; 	// 可再刷新挑战列表时间
}

message PVPFomationCell{
    int32 						Pos  			= 1;
    int32 						StaffID  		= 2; 	// 雇员ID
}
message PVPChallenge{
    int64  						UserID  		= 1; 	// 服务器使用支持跨服
    int64  						TargetUserID 	= 2; 	// 目标用户ID
    repeated  PVPFomationCell 	Elements  		= 3; 	// 上阵服务员列表
    int64 						TargetRank 		= 4; 	// 目标用户名次
    int32                       FightNum        = 5;    // 批量战斗次数 ps:战斗沙包用
}

message PVPFighter{
    PVPSimpleUser 		 		UserInfo  		= 1; 	// 玩家信息
    repeated  	ProCustomer   	Customers  		= 2; 	// 客人信息
    int32  						WinCount  		= 3; 	// 胜利客人数
    int32 						BeforeRank		= 4;	// 之前的排名
    int32 						CurRank			= 5;	// 现在的排名
    int32 						CarSkinID 		= 6; 	// 挑战车皮肤
}


//order第一格是进攻方的菜单，第二个是防守方的菜单，如果orderItem的baseID为0 表示这个客人没有这个订单
message PVPReport{
    PVPFighter  				Attacker  		= 1; 	// 发起方
    PVPFighter  				Defender  		= 2; 	// 防守方
    int64                       FightMs         = 3;    // 战斗时间
    int64                       FightID         = 4;    // 战斗id 服务器算
    repeated 	ProBagItem 		WinRewards 		= 5; 	// 胜利奖励
    repeated 	ProBagItem 		RankRewards 	= 6; 	// 排名奖励
    repeated 	ProBagItem 		ExtraRewards 	= 7; 	// 额外奖励 与skillBuff 互斥
    repeated    int32           SkillBuffIds    = 8;    // 额外奖励的skillbuff池
    int32                       TargetStar      = 9;    // 挑战的星级
    repeated    int32           FightSkillBuffs = 10;   // 挑战战斗时 用到的技能列表
    int32                       FightType      	= 11;   // 挑战类型
    int32                       FightNum        = 12;   // 批量战斗次数 ps:战斗沙包用
    string H5FightID = 13;
}

//战斗日志
message PvpFightRecord{
    int64 FightID  = 1; //战斗id
    SimpleUser Attacker = 2; //挑战玩家
    SimpleUser Defender = 3; //防守玩家
    bool  Win        = 4; //针对此玩家
    int64 FightMs    = 5; //战斗时间
    string H5FightID = 6;
}

//战斗日志列表
message PVPRecordMsg{
    repeated PvpFightRecord      AttRecords        = 1;  //挑战记录
    repeated PvpFightRecord      DefenRecords      = 2;  //防守记录
}

//战斗日志回放消息
message PVPFightRecordReplay{
    int64 FightID = 1; //pvp战斗id
    PVPReport Record  = 2; //战斗记录
    string H5FightID = 3;
}

message SyncVisitorHelperLogList{
    int64    UserID = 1;
    repeated VisitorHelperLog HelperLogList = 2; //帮助配餐的列表
}

message TopPureServiceInfo{
    int64 						UserID 			= 1; 	//
    repeated 	int32  			ObjectIDList 	= 2; 	// 前5ObjectID
    int64 						AvgScore 		= 3; 	// 前五平均分
}


message DebugShowAttributesInfo{
    int64  RecoveryPool = 1; //恢复池  热情值？
    int64 M_VendingWallet = 2;
    int64 M_VendingPositiveCustomerStat = 3;
}

message OneStaffStar{
    int32 						TargetObjectID  =1; 		// 目标ObjectID
    repeated 	int32 			CostObjectIDS 	=2; 		// 消耗目标
}

message BatchStaffStarReq{
    int32 						Action 			= 1; 		// 行为 请求
    repeated 	OneStaffStar 	List 			= 2;
}

message BatchStaffStarAck{
    int32 						Action 			= 1;
    int32 						Result 			= 2;
    repeated 	ProBagItem 		ReturnItems 	= 3; 		// 返还的物品
    repeated  	StaffInfo 		Staffs 			= 4;
}

message WearOperInfo{
    int32 								StaffObjectID 	= 1; 		// 雇員ObjectID
    int32 								WearObjectID 	  = 2; 		// 裝備ID、若没有传-1
    repeated 	int32 			CostObjectIDS 	= 3; 		// 要被消耗掉的物件ID
    int32                 ToStar          = 4;        // 目标星级,升星使用
    ProItemInfo           Consum          = 6;        // 消耗的道具
    int32 								WearBaseID			= 7;//升星目标的 baseID
}

message WearMulOperRequest{
    repeated WearOperInfo Info	= 1;
    int32    WearMerge = 2;//默认不传，升星合成的时候传1
}

message WearMulLevelUpInfo{
    int32 						StaffObjectID 	= 1; 		// 雇員ObjectID
    int32 						WearObjectID 	= 2; 		// 裝備ID
    int32                       ToLevel         = 3;        // 目标等级
}

message WearMulLevelUpRequest{
    repeated WearMulLevelUpInfo Info	= 1;
    repeated 	int32 			CostObjectIDS 	= 2; 		// 要被消耗掉的物件ID
    int32 						CostWearExp 	= 3; 		// 消耗经验值,升级使用
}

message WearMulOperResponse{
    repeated ProWear 			PreWear 		= 1;
    repeated ProWear 			ResultWear 		= 2;
    SimpleRes					Res				= 3;
    int32 						WearMerge       = 4;//装备升星合成时，有用传1，其余时候不传
}

message WearOperRequest{
    int32 						StaffObjectID 	= 1; 		// 雇員ObjectID
    int32 						WearObjectID 	= 2; 		// 裝備ID
    int32 						Action 			= 3; 		// 操作  WEAR_ACTION_INCREASE_EXP
    repeated 	int32 			CostObjectIDS 	= 4; 		// 要被消耗掉的物件ID
    int32 						CostWearExp 	= 5; 		// 消耗经验值
}

message WearOperResponse{
    int32 						Action 			= 1;
    ProWear 					PreWear 		= 2;
    ProWear 					ResultWear 		= 3;
    SimpleRes					Res				= 4;
}

message PVPRankItem{
    int32 						BaseID 			= 1;
    int32 						TopRank 		= 2;
    int32 						BottomRank 		= 3;
    repeated 	ProBagItem 		RankRewards 	= 4; 	// 排名奖励
}

message ProPVPRanInfo{
    repeated 	PVPRankItem 	RankList 		= 1;
}


//翻牌面板信息
message ProFlopCardListBroadInfo{
    int64   EventObjID  = 1;   //翻牌对应的活动objid
    repeated ProFlopCardGridInfo FlopCardGridList = 2;  //翻牌信息
    int32   RoundID = 3; //第几轮
    StartEndTime   EventTimeMs = 4;          //时间 毫秒
    repeated  ProBagItem  ChooseAwards = 5;  //自选奖励
    repeated  ProBagItem  ShowAwardList = 6; //自选奖励列表
    repeated  int32       IndexList     = 7; //格子列表  用于客户端表现牌面 在已选心愿奖励之后使用
    int32     RoundMaxNum               = 8; //翻牌的最大轮数
    ProBagItem  CostItems     = 9; //消耗的道具
    int32     CurChooseRewardRound   =  10; //当前最近的自选奖励轮数
    repeated  int32 RewardedIndexes  = 11;//已经选过的奖励
    int32     FlopShowLayer   =  12; //重要奖励内容展示层数
    ProBagItem  FlopShowItem   =  13; //重要奖励内容展示ID
    string     FlopColorAltas   =  14; //牌背颜色图集
    string     FlopColor   =  15; //牌背颜色图片名
}

//单个翻牌格子信息
message ProFlopCardGridInfo{
    int32    FlopCardID = 1;  //翻牌配置id
    int32    Status   = 2;  //牌状态
    repeated ProBagItem Awards = 3; //翻牌奖励
    int32    CardType  = 4; //牌的类型 1：普通牌 2：功能牌 3：稀有牌
    int32    Index     = 5; //这张牌当前在哪个格子中，只用于翻牌回复，面板拉取不用
    int32    FlipNum   = 6; //如果这张是功能牌 这里就显示功能牌的次数
}


//自选翻牌奖励
message ProFlopCardChooseAwardsInfo{
    int32    Index            = 1 ; //选的第几个奖励
    int64    EventObjID       = 2 ; //对应的活动id
    repeated ProBagItem Items = 3 ; //奖励信息
}

//翻牌请求 单翻和批量自动翻牌
message GetFlipCardReq{
    int32 Index = 1;     //客户端用 记录翻的牌 如果是批量的话那就填0
    int64 EventObjID = 2; //对应的活动id
}

//翻牌回复
message GetFlipCardAck{
    int32 Index = 1;//客户端用 记录翻的第一张牌
    repeated ProOnceFlipCardResultInfos ResultList = 2; //翻牌后的结果
    int32 TotalFlopNum = 3; //自动翻牌次数总数
    int64 EventObjID = 4;
}

//单个翻牌节点结果信息
message ProOneNodeFlipCardResultInfo{
    int32 FatherGrid      =  1;  //上一级卡牌id
    ProFlopCardGridInfo SonProCardGridInfos = 2; //当前子卡牌信息
}

//单次翻牌结果信息集合
message ProOnceFlipCardResultInfos{
    repeated ProOneNodeFlipCardResultInfo NodeCardResultInfos = 1;//这次翻牌结果信息
}

message GetShowFlopCardAwardList
{
    repeated ProBagItem  NormalAwards = 1; //普通奖励列表
    int32    BeginRoundID             = 2; //普通奖励起始轮次
    int32    EndRountID               = 3; //普通奖励结束轮次
    repeated ProFlopCardWishAward  WishAwards   = 4; //心愿奖励列表
}

message ProFlopCardWishAward
{
    int32      RoundID        = 1; //轮次
    ProBagItem  WishAward   = 2; //心愿奖励
}

message SyncMemInfo2Alliance{
    CommOption 			Option 						= 1; 	// 基础信息
    repeated int32 		CharacterDungeonList	 	= 2; 	//
}


//活动分支剧情信息请求
message GetEventBranchPlotReq{
    int64   EventObjID  = 1; //活动唯一id
}

//活动分支剧情信息回复
message GetEventBranchPlotAck{
    int64   EventObjID  = 1;
    repeated ProBranchPlotInfo BranchPlots = 2; //章节段落信息
}


message ProBranchPlotInfo{
    int32  ChapterID = 1;
    int32  StepID    = 2;
    int32  State     = 3; //0：未开放 1；未解锁 2：未完成 4：已完成
    repeated ProBagItem Awards = 4; //奖励
    int64  UnlockTimeMs = 5; //解锁时间戳
}


message ExtendContainerAck{
    int32 	ContainerType 	= 1;
    int32 	OrgCapacity 	= 2;
    int32 	ResultCapacity 	= 3;
}

message NotifyPlatformPostLikeNtf {
    string  Url             = 1;   // 地址
    repeated ProBagItem        Award  = 2;   // 奖励
}

message ReceivePlatformRewardReq {}

message ReceivePlatformRewardAck {
    repeated ProBagItem        Award  = 1;   // 奖励
}

message MuteUserIDList{
    repeated int64              IdList = 1;
}

message RestaurantStarAck{
    int32 			Star 					= 1;
    int64       UpStarEndTime = 2;
    int32				CurrentPositive = 3;

}



/////////////挑战的协议/////////////////////////////
//被挑战的对象信息
message SimpleChallenger{
    SimpleUser     Fighter = 1;
    int64          Score   = 2; //挑战战力值
}

message RewardBoxInfo{
    int32 Score = 1; //当前宝箱需要的分值
    repeated ProBagItem Rewards = 2; //宝箱奖励信息
    int32 BoxState = 3; //宝箱的状态 0：未领取  1：已领取
}

//挑战的宝箱奖励信息
message ChallengeRewardBox{
    repeated RewardBoxInfo  BoxInfos = 1; //每个宝箱的信息
    int32           CurStarNum = 3; //当前星级数
}

message GetChallengeFightInfoReq{
    int32  IsFightEnd = 1;//是否在战斗之后请求 0：不是 1：是
}

message GetChallengeFightInfoAck{
    repeated SimpleChallenger Fighters    = 1; //被挑战的对象， 0:1星 1:2星 2:3星
    repeated int32            Skills     = 2; //加成skill列表
    ChallengeRewardBox        BoxReward     = 3; //宝箱奖励信息
    int64                     Score     = 4; //当前战力值
    int32                     LastFlushTimes = 5; //剩余刷新次数
    int32                     CurRoundID     = 6; //当前轮次
    int32                     EndRoundID     = 7; //结束轮次 当前轮次大于结束轮次 表示已经打完
    int64                     LastRestTimes = 8;  //剩余重置次数
    int64                     RefreshTime = 9;  //刷新时间
    repeated  int32           ChooseSkillPool = 10; //上一轮没有选择skill的列表，选了就没有
    repeated 						SimpleStaffInfo 	StaffList	= 11;//雇员信息
}

message FlushChallengeFightMatchMsg{
    repeated SimpleChallenger Fighters    = 1; //被挑战的对象， 0:1星 1:2星 2:3星
    int32                     LastFlushTimes = 5; //剩余刷新次数
}

//挑战宝箱领取请求
message GetRewardChallengeFightBoxReq{
    int32   BoxId   = 1; //宝箱id
}

//挑战宝箱领取回复
message GetRewardChallengeFightBoxAck{
    int32   BoxId   = 1; //领取的宝箱id
    ChallengeRewardBox        BoxReward     = 2; //宝箱奖励信息
}

//挑战赛战斗请求
message ChallengeFightReq{
    int64  						UserID  		= 1; 	// 服务器使用支持跨服
    int32  						TargetStar   	= 2; 	// 目标的星级
    repeated  PVPFomationCell 	Elements  		= 3; 	// 上阵服务员列表
}

//选挑战赛中的skillBuff
message GetChallengeSkillBuffReq{
    int32    SkillBuffPos = 1; //选择的第几个skillBuff
}

//选挑战赛中的skillBuff
message GetChallengeSkillBuffAck{
    int32                     SkillBuffPos 	= 1; //选择的第几个skillBuff
    repeated int32            Skills     		= 2; //加成skill列表

}

//同步挑战赛额外信息同步
message SyncChallengeFightExtraInfo{
    repeated PropKeyValue SkillBuffs  = 1; //挑战赛额外技能buff列表
}


///////////////////// 新科研 /////////////////
message NewResearchInfo {
    int32   ResearchId     = 1;   // 科研Id
    int32   Level          = 2;   // 等级
}

message SyncNewResearchNtf {
    repeated  NewResearchInfo   CurResearchInfo = 1; // 当前已有的科研
}

message NewResearchUpgradeReq {
    int32   ResearchId     = 1;   // 科研Id
}

message NewResearchUpgradeAck {
    NewResearchInfo  Reasearch = 1; // 科研信息
}

//////////////////End  新科研 /////////////////
message MultipleUserSkinList{
    repeated StaffSkinList MulUserSkinList = 1;
}

//玩家所有员工的所有时装
message StaffSkinList {
    int64     UserId		= 1;
    repeated  StaffSkin   AllStaffSkinList = 2;
}

//某个员工的时装列表
message StaffSkin {
    int32 		StaffBaseID = 1;
    repeated 	Skin SkinList = 2;
}
//皮肤相关
//时装结构
message Skin
{
    int32 SkinID = 1;
    bool  IsTried 	= 2;//是否试穿过
    bool  IsCurSkin	= 3;//是否当前穿戴的fashion
}

//穿戴时装
message UseStaffSkin {
    int32 StaffBaseID = 1;//穿戴时装的员工ID
    int32 SkinID   = 2;//时装的ID
    bool  IsTry 			= 3;//true表示试穿，false 不是试穿（真实更换）
}


message GetStaffPropertyInfoReq {
    repeated  int64   StaffObjId = 1;
}


/////// 自动挑战咖啡协会
message AutoChallengeCommunityBusReq {
    int32  BaseBusCustomerId  = 1;        //   清理
    repeated int32   StaffIds = 2;        //   选择的服务员
}

message AutoChallengeCommunityBusAck {
    int32 CurBusCustomerId  = 1;  		  // 当前关卡
    bool  Win               = 2;  		  // 是否获胜
    repeated ProBagItem  ShowAwards = 3;  // 展示奖励
    int32 BaseBusCustomerId = 4;          // 开始的关卡
    repeated int32   StaffIds = 5;        //   选择的服务员
    int32 TotalSavorScore     = 6;        // 实际分
    int32 NeedSavorScore     = 7;         // 期望分
    repeated   BusFinishOrder	OrderList = 8;	// 自动挑战雇员分
}

message FinishAutoChallengeCommunityBusReq {
}

message FinishAutoChallengeCommunityBusAck {
    repeated ProBagItem  Awards = 1;   // 总的奖励
    int32    TotalWin = 2;             // 总的获胜数量
}

//同步vip客服设置信息
message SyncSetGameVipServiceInfo{
    repeated int32 ServerIDs = 1; //开启的区服id
    string ContactInformation = 2; //联系方式
    string Content  = 3; //福利文案
    string UnlockInfo = 4; //解锁vip客服的条件
    repeated string ClosePackageNames = 5; //关闭vip客服的包名
}

//vip客服解锁信息
message VipServiceUnlock{
    int32 UnlockType = 1; //解锁条件类型
    int64 CurNum = 2; //当前进度
    int64 MaxNum = 3; //最大
    repeated int64 Params = 4; //解锁参数
}

//vip客服信息
message SyncVipGameServiceInfoNtf {
    bool    FuncOpen = 1; //功能开关
    repeated VipServiceUnlock UnlockInfos = 2;
    string  ContactInformation = 3; //联系方式
    string  Content = 4; //福利文案
}


message UserList{
    repeated int64 UserIDs = 1;//多个userID
}

message GetRankSimpleUserInfoListReq{
    int32    ReqType  = 1; //请求的类型
    repeated int64 UserIDs = 2;//多个userID
}

message GetRankSimpleUserInfoListAck{
    int32    ReqType  = 1; //请求的类型
    repeated RankSimpleUser UserInfos = 2;
}

message GetJobBeachCarFirstFinishedReq{
    int32 	Job 					= 1;	// 职业
}

message JobBeachCarUser{
    int32 			DungeonID 		= 1; 	// 副本ID
    RankSimpleUser 	User 			= 2; 	// 完成的玩家信息
}

message GetJobBeachCarFirstFinishedRes{
    int32 			Job 			= 1;
    repeated JobBeachCarUser List	= 2;
}


message JobBeachCarPushInfo{
    int32 			MaxLevel 		= 1;
    int64 			NextChangeMs 	= 2;
}

message TemplateView {
    int32 TemplateID = 1;//样板间ID
    bool  IsView		= 2;//是否看过
}


message NPCPositiveStaticInfo{
    int32 			BaseID 				= 1;
    int32 			PositiveRate 		= 2; 	// 对应顾客的理论正向评价值
}

message NPCPositvieInfo{
    bool 			All 				= 1;
}

message UserRestaulMiscInfo{
    int64 			UserID 					= 1;
    int32 			Star 					= 2; 	// 捎带给客户端
    repeated 	NPCPositiveStaticInfo List	= 3;
}

message ValueArchieveMsg{
    int32 			Type 					= 1; 		// 类型是那个
    int32 			SecondBaseID 			= 2; 		// 子ID是哪个
    int32 			Code 					= 3; 		// 返回码
}

message ValueArchievement{
    int32 					Type 			= 1; 		// 类型ID
    repeated 	int32		GotList		 	= 2; 		// 获得的列表
}

message AllValueArchievement{
    repeated 	ValueArchievement 	List	= 3; 		// 成就列表
}

message BattlePassDelayBuyInfo{							//战令延迟
    string Key 								= 1;
    repeated ProItemInfo Consum  			= 2;
    repeated ProItemInfo AwardItems			= 3;
    int64 ExpiredMs 						= 4;
}

message ClaimBattlePassDelayAck{
    string Key 								= 1;
}

message SharGameInfo {
    int32 		TriggerType = 1;//触发的类型
    int32 		TermId			= 2;//具体的什么项，例如员工需要具体的某个员工
    repeated 	ProBagItem AwardsList = 3;//奖励物品
    bool 		  IsTrigger   = 4;//客户端下发，在请求SHAR_CAN_GET_AWARDS_REQ的时候下发，如果是服务器不知道的行为由客户端触发并下发
    string 		UpdateURL   = 5;//更新得URL
    int32       ShareChannel = 6; //分享渠道，0：老的分享，1：新浪微博linkCard 2：微信分享 3：QQ分享
}

message SyncComplexBuff{
    int32 						Flag 		= 1; 		// 0是否全量 1增量
    repeated PropKeyValue 		BuffList 	= 2; 	 	//
}


message AllianceTaskEventBaseId{
    int32 						EventBaseId = 1;		//活动BaseID
}

//分享拉新邀请码活动内容请求
message GetShareEventCodeReq{
    int64   EventObjID  = 1;
}

//邀请码奖励信息
message ShareReward {
    repeated ProBagItem Rewards = 1; //奖励
    int64    CondtionNum = 2;  // 条件数量
    int32    CanRewardNum = 3; // 可领取次数
    int32    RewardStatus = 4; //领取状态 0：不能领  1：可领取
    int32    ShareRewardType = 5; //奖励类型 ： 1 ：邀请数量奖励 2：累计充值奖励
    int32    CanRewardNumMax = 6; //可领取最大次数
    int32    RewardedNum     = 7; //已领取次数
}

//分享拉新邀请码活动内容回复
message GetShareEventCodeAck{
    string ShareCode = 1;
    repeated ShareReward ShareTimesRewards = 2;  //被邀请人数奖励
    repeated ShareReward PayNumRewards = 3; //被邀请人累充奖励
    repeated ProBagItem  SharedReward = 4; //被邀请人的奖励
    int32  ShareUserNum  = 5; //被邀请的人数
    int32  ShareUserMaxNum = 6; //被邀请人的上限
    int64  ShareInviteCodeCreateMs = 7; //分享码生成时间
}

//请求邀请码界面
message ShareInviteCodeUIInfo{
    int32  IsBeShared = 1; //是否已填邀请分享码，0：表示没有，1：表示已填
    RankSimpleUser ShareUserInfo = 2; //关联的邀请人
    repeated ProBagItem  SharedReward = 4; //被邀请人的奖励
}


//填写邀请码请求
message WriteShareCodeReq{
    string ShareCode = 1; //邀请码
}

//填写邀请码回复
message WriteShareCodeAck{
    RankSimpleUser ShareUserInfo = 1; //关联的邀请人
}

//关联邀请人
message LinkShareInviteOldUserInfo{
    int64 NewUserID   = 1; //被邀请的新人id
    int64 OldUserID   = 2; //邀请人id
    int64 NewUserPayNum = 3; //被邀请人的累充
}


//领取邀请码活动奖励请求
message GetShareCodeEventRewardReq{
    int64    EventObjID = 1;
    int32    RewardsType = 2; //奖励类型
    int32    RewardPos   = 3; //奖励档位
}

//领取邀请码活动奖励回复
message GetShareCodeEventRewardAck{
    int64    EventObjID         = 1;
    int32    RewardsType        = 2; //奖励类型
    int32    RewardPos          = 3; //奖励档位
    repeated ProBagItem Awards  = 4; //奖励物品信息
}


message ProShareInviteUserTriggerInfo{
    int64   ShareUserID  = 1;    //邀请人的id
    int64   BeSharedUserID = 2;  //被邀请人的id
    int64   BesharedUserTotalPay = 3;   //被邀请人的累计充值
    string  BeSharedAccount = 4 ;        // 被邀请人的账号
    string  ShareCode     = 5;    //邀请码
    int64   BeSharedUserFirstRegisterMs = 6; //被邀请人第一个角色的注册时间
    int32   ReturnCode   = 7;  //返回给被邀请人的返回错误码
    int64   ShareInviteEventObjID = 8; //分享邀请活动objID
    int32   ShareInviteEventBaseID = 9; //分享邀请活动baseID
}

message NotifyRemoteUserUpdateInviteInfoNtf {
    int64   InvitorUid   = 1;   // 邀请人Uid
    int64   LinkUid      = 2;   // 关联Uid
}

message SyncGsAllianceValueableLevelupNtf{
    int32    AllianceID  = 1;
    repeated ProAllianceValueableLevelupInfo ProAsVaLvlupInfoList = 2; //贵重物品升级信息
    repeated int64  UserIDList = 3; //联盟成员id列表
}

message ProAllianceValueableLevelupInfo{
    int32    BaseID  = 1; //贵重物品id
    int32    OldLevel = 2; //贵重物品老的等级
    int32    NewLevel = 3; //贵重物品新的等级
}

//联盟根据buff生成的额外奖励
message GetAllianceExtrendRewardByBuff{
    int32   AllianceBuff   = 1; //领取奖励的联盟buffid
    int32   AllianceID     = 2;
    int64   UserID         = 3;
    int32   BuffRewardType = 4; // buff领奖类型：0：通过AllianceBuff领取奖励 1：领取联盟时间间隔玩法奖励
    repeated ProBagItem Awards = 5; //奖励信息

}

//时间间隔玩法 可以领取的奖励信息
message CanRewardItemByBuffInfo{
    int32   BuffMode = 1; // buff玩法：8:联盟时间玩法
    repeated ProBagItem AwardItems  = 2; //奖励
}

//个人根据buff可以领取的奖励 推送   暂时用于联盟贵重物品的时间间隔奖励buff
message SyncCanRewardItemByBuffNtf{
    repeated CanRewardItemByBuffInfo CanRewardInfos = 1; //时间间隔buff可以领取的奖励
}


//联盟签到
message GetAllianceSigneInfo{
    int64   UserID = 1; //玩家id 服务器用
    repeated ProBagItem Awards = 2; //签到奖励
    int32   SigneNum  = 3; //当天签到次数
    int32   AllianceLevel = 4;//联盟当前等级
    int64   AllianceActive = 5;//联盟当前经验
    int32   AllianceID = 6; //联盟ID 服务器用
}

//联盟相关的资源变化同步到联盟
message SyncAllianceAboutResChangeInfo{
    int64 UserID = 1; //玩家id
    int32 AsID   = 2; // 联盟id
    repeated ProBagItem  AsItems = 3;	//联盟的道具
    int32 Reason = 4;//原因
    string ReasonExtra = 5;//扩展原因
}


//商店手动刷新按钮信息
message GetCommonShopManualRefreshInfoMsg{
    int32  ShopID  = 1; //商店id
    int32  RefreshNum = 2; //刷新次数
    int32  RefreshMaxNum = 3; //最大刷新次数
    PriceInfo  RefreshPrice = 4; //下一次手动刷新的价格
}


//商店手动刷新
message GetCommonShopManualREfreshActive{
    int32  ShopID = 1;//商店id
}




// 蓝钻信息
message BlueVipInfo
{
    int32 BlueVipLevel = 1; // 蓝钻等级 1:Lv1 2:Lv2 ...
    int32 BlueVipType = 2; // 蓝钻种类 0:非蓝钻 1:普通蓝钻 2:豪华版蓝钻 3:年费蓝钻 4:年费豪华版蓝钻
}

// 蓝钻礼包状态列表
message BlueVipGiftList
{
    repeated BlueVipGiftState DailyGiftList = 1; // 每日礼包
    repeated BlueVipGiftState NewbieGiftList = 2; // 新手礼包
    repeated BlueVipGiftState UpgradeGiftList = 3; // 升级礼包
}

// 蓝钻礼包状态
message BlueVipGiftState
{
    int32 QuestID = 1; // 礼包对应的Quest表里的ID
    int32 State = 2; // 领取状态 0:未完成 1:可领取未领 2:已领取
    int32 Level = 3; // 蓝钻等级或玩家等级
    int32 Kind = 4; // 蓝钻每日礼包板块区分 0:蓝钻等级礼包 1:豪华版蓝钻 2:年费蓝钻
}

// 大厅礼包状态列表
message HallGiftList
{
    repeated HallGiftState HallPrivGiftList = 1; // 大厅特权礼包
    repeated HallGiftState WeeklyGiftList = 2; // 每周礼包
    repeated HallGiftState UpgradeGiftList = 3; // 升级礼包
}

// 大厅礼包状态
message HallGiftState
{
    int32 QuestID = 1; // 礼包对应的Quest表里的ID
    int32 State = 2; // 领取状态 0:未完成 1:可领取未领 2:已领取
    int32 Level = 3; // 玩家等级 大厅升级礼包页面使用
    int32 Kind = 4; // 大厅特权礼包板块区分 0:新手礼包 1:每日登录礼包
    int32 EndTime = 5; // 倒计时结束时间戳 单位为秒 大厅每周礼包页面使用
}

// 聊天文本送检请求
message CheckChatTextReq {
    string Text   = 1;  // 聊天文本
    int64  Uid    = 2;  // 服务器使用
    string OpenID = 3;  // 下面三个参数，客户端填上来
    string OpenKey = 4; //
    string Pf = 5;      //
}

// 聊天文本送检响应
message CheckChatTextAck {
    string ResultText   = 1;  // 返回文本
}
// 小游戏相关
message Match3Target {
    int32  Index        = 1;  // 索引
    int32  MinStep      = 2;  // 完成的最少步数
    int32  GSMinStep    = 3;  // 全服完成该目标最低记录
}

// 三消关卡数据
message Match3GameDungeonInfo {
    int32   DungeonId    = 1;  		// 关卡Id
    int32   Star         = 2;       // 关卡星级
    repeated int32  ComplateTargetIndex = 3;  // 作废
    repeated Match3Target ComplateTarget = 4; // 以完成的目标信息
}

// 三消数据
message Match3GameInfo {
    int32    ConfigId    = 1;        // 小游戏配置ID
    repeated Match3GameDungeonInfo   DungeonInfo = 2;  // 关卡数据
    int32    MaxDungeonId   = 3;     // 通关的最高关卡
    int32    CurScore       = 4;     // 当前已获得的星数
    int32    TotalScore     = 5;     // 总星数
    int64    ExpiredMs      = 6;     // 过期时间戳，毫秒
    int64    RelatedEventObjId = 7;  // 小游戏关联活动得ObjId
    int32    CurBattlepassScore = 8; // 战令积分
    int32    MaxBattlepassScore = 9;    // 战令总积分
    int64    BattlepassSeasonType = 10; // 战令SeasonType
}

message GetSmallGameReq {
    int32    ConfigId  = 1;   		// 小游戏配置ID
}

message GetSmallGameAck {
    int32    ConfigId  = 1;   		// 小游戏配置ID
    Match3GameInfo  Match3Data  = 2;   // 三消小游戏数据
    HelloColorPlay HelloColorPlayInfo  = 3;
}

message HelloColorPlay {
    int64 BeginTime = 1;
    repeated HelloColorTerm HelloColorList = 2;//拼图游戏的信息
}

message HelloColorTerm{
    int32 ID =1;
    int32 Type = 2;
    bool IsAwards = 3;
}

message FinisHelloKitty {
    GetSmallGameAck GameInfo = 1;
    repeated ProBagItem  AwardsItem = 2;
}

message FinishColorStage {
    int32 ID = 1;
    int32 GameID = 2;
}

message GetSmallGameScoreRankReq {
    int32    ConfigId  = 1;   		// 小游戏配置ID
}

message GetSmallGameScoreRankAck {
    int32    ConfigId  = 1;   		  // 小游戏配置ID
    ProEventRankListInfo Info   = 2;  // 活动排行榜数据，活动机制来发奖
}

message GetSmallGameQuestReq {
    int32   ConfigId    = 1;        // 小游戏配置ID
}

message GetSmallGameQuestAck {
    TaskList QuestList  = 1; 		// 任务列表
}

// 拉取更多的三效关卡数据请求
message FetchMatch3GameDungeonListReq {
    int32   ConfigId  = 1;   		// 小游戏配置ID
    int32   BaseDungeonIndex = 2;	// 从哪一个偏移开始取
}

// 拉取更多的三效关卡数据请求
message FetchMatch3GameDungeonListAck {
    repeated Match3GameDungeonInfo   DungeonInfo = 1;  // 关卡数据
}

// 三消关卡挑战请求
message StartMatch3GameDungeonReq {
    int32   ConfigId    = 1;
    int32   DungeonId   = 2;
}

// 三消关卡挑战响应
message StartMatch3GameDungeonAck {
    int32   ConfigId    = 1;
    int32   DungeonId   = 2;
    repeated int32  ComplateTargetIndex = 3;   // 作废
    bool    Refight     = 4;                   // 是否之前已经打打赢过
    int32   ComboCount       = 5;                   // 连胜
    repeated Match3Target ComplateTarget = 6; // 以完成的目标信息
}

// 三消关卡挑战结果请求
message ReportMarth3GameDungeoResultReq {
    bool    Win         = 1;
    repeated ProBagItem  ConsumItems = 2;
    repeated int32  FinishTargetIndex = 3;   // 作废
    repeated Match3Target FinishTarget = 4; //  完成的目标信息
}

// 三消关卡挑战结果响应
message ReportMarth3GameDungeoResultAck {
    bool    Win            = 1;
    int32   ConfigId    	= 2;
    int32   DungeonId   	= 3;
    int32   TotalScore     = 4;     // 总星数
    Match3GameDungeonInfo  DungeoInfo = 5; // 挑战成功后更新对应关卡数据，失败该值为空

    int32    CurBattlepassScore = 6;    // 战令积分
    int32    MaxBattlepassScore = 7;    // 战令总积分

    repeated ProRankInfo RankChangeInfo   = 8; // 排行榜变更数据
    int32    PrevRank              = 9;   // 自己原来排名
    int32    ComboCount       = 10;                   // 连胜
    int32    BattlePassCurLevel  = 11;    // 战令积分
    int32   IgnoreEventRPCResponse  = 12;    // 特殊给客户端处理消息
}

// 获取三消成就统计请求
message March3DungeonTargetStat {
    int32   DungeonId       = 1;   // 关卡Id
    int32   MinStep         = 2;   // 所有玩家完成该关卡所有成就的最少步数
    int32   MineMinStep     = 3;   // 自己关卡所有成就的最少步数
}

message GetMatch3StatReq {
    int32   ConfigId        = 1;   // 小游戏配置Id
}

message GetMatch3StatAck {
    repeated March3DungeonTargetStat StatList = 1;   // 各关卡最小通关统计
}


message Gs2UpdateShareCode2Account{
    ProShareInviteUserTriggerInfo Ntf = 1; //分享邀请同步信息
    int64  ShareInviteTimeMs          = 2; //填写邀请码的时间戳
    bool   IsSameGs                   = 3; // 邀请人和被邀请人是否在相同gs
    int32  BeShareUserServerID        = 4; // 被邀请人的区服id
    int32  ShareUserServerID          = 5; // 邀请人的区服id
}
message EmoticonInfo{
    int64 UserID = 1;                  //玩家ID
    repeated int32 EmoticonIds = 2;    //已解锁表情包ID
}

message EmoticonForUserReq{
    repeated int64 UserIDs = 1;    //玩家ID
    int32 AllianceID = 2;          //联盟ID
}

message EmoticonForUserAck{
    bool IsNeedCheck = 1;               //是否需要检测
    repeated EmoticonInfo List = 2;     //玩家表情包列表
}

//helloKitty活动的当前循环任务请求
message GetHelloKittyCurEventLoopQuestReq{
    int64    EventObjID     = 1;   //任务活动的父活动objID
}

message HelloKittyEventLoopQuestInfo{
    int64        EventObjID = 1;
    int32        EventBaseID = 2;
    TaskInfo     QuestInfo = 3;     //任务信息
    SimpleEventInfo   SimpEventInfo = 4;  //活动信息
}


//helloKitty活动的当前循环任务回复
message GetHelloKittyCurEventLoopQuestAck{
    repeated   HelloKittyEventLoopQuestInfo Infos = 1;  //任务和活动信息
}


message ReportEmoticonReq{
    int64 ReportUserID = 1;             //疑似作弊玩家ID
    string MsgID       = 2;             //疑似作弊消息ID(暂时不需要)
    int32 EmoticonID   = 3;             //疑似作弊表情ID
}

message EmoticonIapInfo{
    int32 ID                    = 1;              //IAPBaseID
    string PlatformProductID    = 2;              //平台商品价格ID
    string Title				= 3;		      // 礼包的说明
}

message EmoticonIapAck{
    repeated EmoticonIapInfo List = 1;
}

message GetSmallGamePageReq {
}

message GetSmallGamePageAck {
    repeated  int32     SmallGameConfigId  = 1;   // 第一个为
}

message GetAnswerQuestionRewardReq{
    int64    EventObjID = 1; //活动objid
    int32    Opt        = 2; //操作id， 0:问卷调查查询奖励邮件发送状态 1: 问卷调查发送奖励邮件 2：新浪关注查询奖励邮件发送状态 3：新浪关注发送奖励邮件
}

message GetAnswerQuestionRewardAck{
    int64    EventObjID = 1; //活动objid
    int32    SendMailStatus = 2; //领奖状态  0: 未发送奖励邮件  1:已发送奖励邮件
    int32    Opt        = 3; //操作id， 0:问卷调查查询奖励邮件发送状态 1: 问卷调查发送奖励邮件 2：新浪关注查询奖励邮件发送状态 3：新浪关注发送奖励邮件
}

message CustomerLeaveReasonReq{
    int32 Reason                    = 1;              //离开原因
    int32 CustomerObjId             = 2;             // 离开顾客的ObjId
}

message FriendsListRes {
    repeated FriendUserInfo  List		 = 1;// 好友列表
}
message FriendUserInfo {
    int64 	UserID           	= 1;  // ID
    string  Name             	= 2;  // 名字
    int32 	Icon             	= 3;  // 玩家头像
    int32 	IconFrame        	= 4;  // 玩家头像框
    int32 	VipLevel         	= 5;  // Vip等级
    int32 	ServerId         	= 6;  // 服务器ID
    int32 	Title            	= 7;  // 称号(爵位)
    string  AllianceName     	= 8;  // 联盟名称
    int64 	TotalProper      	= 9;  // 国力
    bool    IsOnline         	= 10; // 在线状态
    int64   LastLoginMs      	= 11; // 最近登录时间
    int64   LastLogoutMs     	= 12; // 最后离线时间
    int32   Level            	= 13; // 玩家等级(等于餐厅等级)
    UserSkin Skin 						= 14; // 玩家skin
    int32 	ColorfulUserName 	= 15; // deprecated玩家彩色名字
    int32   SLevel          	= 16; // deprecated餐厅等级
    int32	RestaurantStar   		= 17; // deprecated 餐厅星级
    string 	Avatar           	= 18; // deprecated 头像
    int64   ChangeStatusTime 	= 19; // 状态变化时间
    int64   Friendship       	= 20; // 亲密度
    bool    IsPostLike       	= 21; // 是否被我点赞 false：未点赞 true：已点赞
    int32   FriendStatus     	= 22; // 好友状态  0-陌生人  1-已申请  2-被申请  3-好友
    bool    IsPostLiked      	= 23; // 是否点赞我   false：未点赞 true：已点赞
    bool    IsCanHelpGain    	= 24; // deprecated
    bool    IsCanWatering    	= 25; // deprecated
    SimpleAlliance SimpleAS  	= 26; // 联盟简要信息
    SimpleUser User           = 27; // 玩家信息
}

message FriendHandleReq {
    repeated int64 UserIDs 				    = 1;//处理的UIDs
    int32   HandleType						= 2;//处理类型 1-申请 2-同意 3-拒绝 4-删除
}

message FriendHandleResult {
    int64    UserID                         = 1;//UID
    bool     HandleStatus                   = 2;//处理结果 true-成功 false-失败
    int32    FriendStatus                   = 3;//好友状态 0-陌生人  1-已申请  2-被申请  3-好友
    int64    ChangeStatusTime 				= 4;//状态变化时间
    int32    Reason                         = 5;//失败原因[]
}

message FriendHandleRes {
    int32   HandleType						= 1;//处理类型 1-申请 2-同意 3-拒绝 4-删除
    repeated FriendHandleResult  List       = 2;//处理结果列表
}

message RecommendListRes {
    repeated FriendUserInfo  List		    = 1;//推荐玩家列表
}

message FriendsAppliedListRes {
    repeated FriendUserInfo  List		    = 1;//推荐玩家列表
}

message SyncFriendHandleNtf {
    int64   OptUserID                       = 1;//操作发起人
    int32   HandleType						= 2;//处理类型 1-申请 2-同意 3-拒绝 4-删除
    FriendUserInfo UserInfo					= 3;//玩家信息
}

message SearchUserReq {
    int64 Uid = 1;
}

message SearchUserRes {
    FriendUserInfo  User = 1;//查找玩家列表
}

message IapGiftInfoReq{
    int32    HandType                 = 1;//拉取类型 0-赠送列表  1-被赠送列表
    repeated string  OrderIds         = 2;//OrderID
}

message IapGiftInfo {
    FriendUserInfo Sender                    = 1;//赠送者
    FriendUserInfo SendTo                    = 2;//被赠送者
    IAPItemInfo Package                      = 3;//礼包信息
    string OrderID                           = 4;//订单ID
    int64 SendTime                           = 5;//赠送时间
    int32 TemplateID                         = 6;//寄语模板
    int64 ReceiveTime                        = 7;//领取时间(被赠送者才有,可用于判断可领取状态)
}

message IapGiftInfoRes{
    int32    HandType                 = 1;//拉取类型 0-赠送列表  1-收送列表
    int32    PageId                   = 2;//分页(废弃)
    repeated IapGiftInfo List         = 3;//列表
}

message ReceiveIapGiftReq{
    string OrderID                           = 1;//订单ID
}

message ReceiveIapGiftRes{
    int64 ReceiveTime                        = 1;//领取时间(被赠送者才有,可用于判断可领取状态)
}

message FriendEventNtf{
    repeated FriendUserInfo List              = 1;
}

message FriendBanReq {
    int64   UserID                 = 1; // 好友ID
    int32   BanType                = 2; // 屏蔽类型，0 屏蔽、1 解除屏蔽
}

message FriendBanAck {
    int32   				BanType  = 1; // 屏蔽类型，0 屏蔽、1 解除屏蔽
    FriendUserInfo 	UserInfo = 2;
    int64 					DelUid   = 3;
}

message FriendBanList {
    repeated FriendUserInfo List = 1; // 黑名单列表
}

message MiniIapGiftInfo
{
    string OrderID                           = 1;//OrderID
    int64 SendTime                           = 2;//赠送时间
    int64 ReceiveTime                        = 3;//领取时间
}

message IAPReceiveOrderListRes{
    repeated MiniIapGiftInfo SendList        = 1;//赠送列表
    repeated MiniIapGiftInfo ReceiveList     = 2;//收礼列表
}

message CommonGetInviteCodeReq {
    int64   EventObjId      = 1;            // 活动ObjId
    int32   CommonInviteType   = 2;         // 用作扩展，后面有非活动相关的邀请码，用这个区分
}

message CommonGetInviteCodeAck {
    int64   EventObjId      = 1;            // 活动ObjId
    int32   CommonInviteType   = 2;         // 用作扩展，后面有非活动相关的邀请码，用这个区分
    string  Code            = 3;            // 兑换码
}

//老玩家回流
message ComebackEventLinkInviteCodeReq {
    string  Code      = 1;            		// 兑换码
    int64   EventObjId = 2;                 // 活动ObjId
}

message ComebackEventLinkInviteCodeAck {
    repeated ProBagItem AwardItems   = 1;              //
}

message ComebackEventNtf {
    repeated  SimpleEventInfo   SimpleEvent   = 1;
    bool   IsOpen				= 2;	// 是否开放
}

//解锁商品信息
message ProUnlockShopDataInfo{
    int32  ShopDataID = 1; //商品id
    int32  ShopID     = 2; //商店id
    repeated ProBagItem ItemInfos = 3; //商品内容
}

//同步解锁商品信息
message SyncUnlockShopDataInfoList{
    repeated ProUnlockShopDataInfo  UnlockInfos = 1; //解锁的商品列表
}

//center传gm命令到mail server的消息
message SyncCenterGmFuncToMailServer{
    int32   FuncID    = 1;//gm接口的funcid
    repeated int64  Params = 2; //gm接口参数列表
}

//雇员职级信息
message ProStaffOccpationLevelInfo{
    int32  OccLevel = 1; //职级
    int64  OccExp   = 2; //职级经验
}


//雇员扩展信息
message ProStaffExtrandInfo{
    int32  StaffObjID  = 1; //雇员objID
    ProStaffOccpationLevelInfo   OccLevelInfo = 2; //雇员职级信息
}


//同步雇员扩展信息
message SyncProStaffExtrandInfoNtf{
    int64  UserID = 1;
    int32  ProType   = 2; //同步功能类型 0：表示当前雇员信息   1:表示pvp战斗时的信息  2:表示厨弈大赛的信息
    repeated  ProStaffExtrandInfo StaffExtrandInfo = 3; //雇员扩展信息
}

//获取雇员职级信息
message GetStaffOccpationLevelInfoReq{
    int32 StaffObjID = 1;
}

message GetStaffOccpationLevelInfoAck{
    int32 StaffObjID = 1;
    ProStaffOccpationLevelInfo OccLevelInfo = 2;  //雇员职级信息
    repeated  int64   RandExps = 3; //随机经验列表
}

message ResetOccpationLevelAck{
    repeated ProBagItem ItemList = 1;
    int32 StaffObjID = 2;
}

//雇员职级升级
message GetStaffOccpationLevelupReq{
    int32  StaffObjID = 1;
    int32  LevelupNum = 2; //点击升级次数
}

message GetStaffOccpationLevelupAck{
    int32   StaffObjID = 1;
    repeated  int64   RandExps = 2; //随机经验列表
    ProStaffOccpationLevelInfo OccLevelInfo = 3;  //雇员职级信息
    int32   PreOccLevel  = 4;// 升级前的职级等级
    int64   PreScore     = 5; //升级前的厨艺值
    int64   CurScore     = 6; //当前厨艺值
}

message MasterReward{
    int32   Job                 = 1;//职业
    int64   LastReceiveTime     = 2;//最近领取奖励时间
    int64   StartTime           = 3;//计时开始时间
    repeated ProBagItem Reward	= 4;//当前已生成奖励/或者当前领取到的奖励
}

message GetMasterRewardAck{
    repeated MasterReward Infos = 1;//四个职业的奖励信息
}

message ReceiveMasterRewardReq{
    int32   Job = 1;//职业(-1为全部领取)
}

message ReceiveMasterRewardAck{
    repeated MasterReward Info  = 1;
    repeated ProBagItem Reward	= 2;//本次结算得到的奖励
}

message LotteryVipRes{
    bool  IsLotteryVip          = 1; //是否购买会员卡
    int64 LotteryTotalNum       = 2; //扭蛋总次数
    int64 LotteryReceivedNum    = 3; //已领取奖励次数
}

message ReceiveLotteryVipRes{
    int64 LotteryReceivedNum    = 1; //领取奖励次数
}


message PublishWishHelp{
    int32 StaffBaseID = 1;
}
//******************************************************************************
//心愿帮助
message ToHelpWishs {
    repeated WishHelpDo list = 1;//
}

message WishHelpDo{
    int64 PublishUid 	= 1;//接受帮助的玩家ID
    int32 StaffBaseID = 2;//帮助的是哪个staff
    int32 WishID 			= 3;//暂时先准备在这里，帮助的序列号
}

message WishInfosReq{
    int32 Index = 1;//请求的索引（分页）
}

//请求整个心愿单页面
message WishInfosRsponse{
    repeated 	WishTerm WishHelpList = 1;//心愿详情
    int32 		Index = 2;//
    int32 		AllianceRes = 3; //今日获得联盟币
    int32 		TodayGetAwardsCout = 4; //今日完成的心愿数量
    int32 		CanPublishCount = 5;//每天发布和可领取次数
}

message WishTerm{
    int64 PublishUid 				= 1;//需要被帮助的玩家的UID；
    int32 WishId 						= 2;
    int32 Process 					= 3;//进度
    int32 StaffBaseID 			= 4;//
    int32 RelationType			= 5;//0 自己 1 盟友||2好友
    UserShowInfoWish UserInfo = 6;
    int64 PublishTime				= 7;//发布时间
}


message WishFinish{
    repeated int32 WishList = 1;//领取的心愿完成ID
}



//请求帮助或者被帮助列表
message WishRecordReq{
    int32 ReqType = 1;//类型 1帮助，2被帮助
    int32 Index		=2;
}

message WishRecordRsponse{
    repeated 	WishRecord 	List 					= 1;//帮助别人
    int32 		ResponseType							=	2;//列表类型	0帮助，1被帮助
    int32 		Index											= 3;//
}

message WishRecord{
    int64 	UserID 						= 1;//帮助我的玩家ID或者被我帮助的玩家ID
    int64 	Time 	 						= 2; //产生帮助或者被帮助的时间
    int32 	RelationType 			= 3;//关系类型：0 自己 1 盟友||2好友
    UserShowInfoWish UserInfo = 4;
    int32 	StaffBaseID				=	5;
}


message UserShowInfoWish{
    string 	Name 						= 1;//帮助或者被帮助的玩家名字
    int32   Icon						=	2;//玩家头像
    int32 	Level						= 3;//玩家等级
    int32   IconFrame				= 4;
    int32   RestaurantStar  = 5;
    string 	Avatar  				= 6;
    int64 M_UserID = 7;
}

message NewHelpNTF{
    string Name = 1;//帮助我的人的名字
    int32  WishID = 2;//
    int32 Process = 3;//帮助后的进度
}

//安妮皮肤
message ActorDeposeList {
    repeated AcotrWithItem List = 1;//N个皮肤分解之后对应的信息列表
}

message AcotrWithItem {//返回道具和actorID
    repeated ProBagItem ItemList = 1;//获得的物品列表
    int32 ActorID			= 2;//皮肤ID
}


message AllianceAdvertiseSwitchReq{
    bool IsSwitch  = 1;//是否打开开关  打开后每次消耗联盟推广和展会所有次数
}

message AllianceAdvertiseSwitchAck{
    bool IsSwitch  = 1;//是否打开开关  打开后每次消耗联盟推广和展会所有次数
}


message CenterNTFMemberList{
    repeated int64 MemberList = 1;
    int32  AsID = 2;
}

message GetSpecialIapShowDetailReq {
    int32  IAPShowId  = 1;    // ShowId
}

message LimitIapCountInfo  {
    int32  PackageId  = 1;
    int32  PkgCurCount  = 2;    // 当前兑换数量
    int32  PkgTotalCount  = 3;  // 总数量
}

message GetSpecialIapShowDetailAck {
    int32  IAPShowId  = 1;    // 礼包Id
    repeated LimitIapCountInfo LimitInfo = 2;  // 全服限购数量
}



// 新配餐答题
message EventCookPazzleOrder {
    int32     Index              = 1;              // 序号
    int32     EventCookbookId    = 2;              // 活动配餐配置Id
    repeated  int32    LimitItems  = 3;            // 展示的限制物品
    int32     NpcId              = 4;
    string    Desc               = 5;              //
    int32     Status             = 6;              // 状态: 0 - 未完成， 1 - 失败， 2 - 获胜
}

message EventCookPazzleStat {
    int32     DailyTotalWinCount   = 1;            // 单日最高获胜次数
    int32     CurrentWinCount      = 2;            // 当前轮获胜次数
}

message FinishEventCookPazzleReq {
    int32     Index               = 1;             // 序号
    repeated  int32    LimitItems = 2;             // 选择的限定物品
}

message FinishEventCookPazzleAck {
    int32     Index               = 1;             // 序号
    EventCookPazzleStat  Stat     = 2;             // 统计
	// 最后一轮的结算信息
    bool      Finish              = 3;             // 最后一次配餐结束后为true
    repeated  ProBagItem   ShowAward = 4;          // 有奖励就给奖励
    repeated  int32        FinishTargetIndex = 5;  // 最后完成的目标id
    int32     Status       = 6;                   // Index 对应的配餐结果
    repeated  int32        CorrectLimitItemIds   = 7;   // Index 对应的配餐答案ItemId
    repeated  int32        PrevFinishTargetIndex = 8;  //  本次结算之前完成的目标id
    bool M_FinishAllPazzles = 9;
}

message GetEventCookPazzleDataReq {
}

message GetEventCookPazzleDataAck {
    repeated  EventCookPazzleOrder Orders = 1;   // 配餐
    EventCookPazzleStat Stat = 2;    			 // 统计
}


message SyncEventCookPazzleFinalInfo {
}

message SyncEventCookPazzleNtf {
    int32       EventOrderPazzleDailyTotalWin        = 1;       //  单日配餐答题最高胜利次数
    int32       EventOrderPazzleDailyMaxTotalWin     = 2;       //  单日配餐答题最高胜利最高次数
}

message AbordEventCookPazzleReq {
}

message AbordEventCookPazzleAck {
}

message GetEventCookPazzleDailyTargetReq {
}

message GetEventCookPazzleDailyTargetAck {
    repeated  int32        FinishTargetIndex  = 5; // 本轮完成的目标数量
}

message ProSetAllianceBadgeReq{
    repeated int32 M_BadgeList = 1;//设置徽章列表
    int64 M_UserID     = 2;  //服务器用
    int32 M_AllianceID = 3;  //服务器用
}

message ProSetAllianceBadgeAck{
    repeated int32 M_BadgeList = 1;//徽章列表
}

message ProGetAllianceBadgeReq{
    int64 			M_UserID 		= 1; 	// 用户ID 服务器填写
    int32 			M_AllianceID 	= 2; 	// 联盟ID
}

message ProGetAllianceBadgeAck{
    int32 		M_AllianceID 	= 1;
    repeated int32 M_UsedBadgeIDs = 2;//放置的徽章ID
    repeated int32 M_BadgeIDs = 3;//解锁的徽章ID
}

message ProSyncAllianceBadgeNtf{
    int32 	M_AllianceID 	    = 1; 	// 联盟ID
    repeated int32 M_BadgeIDs   = 2;    //解锁的徽章ID
    repeated int32 M_NewBadgeIDs= 3;    //新解锁的徽章ID
    repeated int32 M_UsedBadgeIDs = 4;  //放置的徽章ID
}

message ProGetAllianceDetailNewReq{
    int64 			M_UserID 		= 1; 	// 用户ID 服务器填写
    int32 			M_AllianceID 	= 2; 	// 联盟ID
}

message ProSimpleAllianceNew{
    int32 		M_AllianceID 	= 1;
    string 		M_Name 		= 2; 	//联盟名字
    int32 		M_Level 		= 3; 	//联盟等级
    int32       M_AllianceIcon = 4;
    string      M_Announce     = 5;   //联盟公告
    int32       M_Post         = 6; //职位
    int64       M_Exp          = 7; //联盟经验
    int32       M_AsEntrustNum = 8;  //联盟求助委托个数
    int64       M_JionMiddleNightMs = 9; //玩家加入联盟的下一个零点时间 用于联盟副本判断
    int64       M_AllianceFunsNum = 10; //联盟粉丝数量
    repeated    PropKeyValue  M_AsValueableItemInfo = 11; //联盟贵重物品信息，物品id-》等级  服务器专用 客户端不用管
    repeated int32 M_UsedBadgeIDs = 12;//放置的徽章ID
    repeated int32 M_BadgeIDs = 13;//解锁的徽章ID
    int32 		M_MemberCount = 14;//联盟成员数量
}

message ProGetAllianceDetailNewAck{
    ProSimpleAllianceNew M_Simple 		    = 1; 	// 简要信息
    AllianceMoreInfo M_More 		= 2;  	// 其他信息
    repeated AllianceMember M_MemList 	= 3; 	// 成员列表
}

message ProUserPetSkinInfoList {
    repeated ProUserPetSkinInfo M_UserPetSkins = 1;
}

message ProUserPetSkinInfo {
    int64 M_UserID = 1;
    repeated ProPetSkinInfo M_PetSkins = 2;
}

message ProPetSkinInfo {
    int32 M_PetID = 1;
    int32 M_CurSkinId = 2;
    repeated Skin M_Skins = 3;
}

message ProGetUseUserPetSkin {
    int32 M_PetID = 1;
    int32 M_SkinID = 2;
    bool M_IsTry = 3;
}


//玩家宠物皮肤信息列表
message UserPetSkinInfoList{
    repeated UserPetSkinInfo UserPetSkins = 1; //玩家宠物信息集合
}

//玩家宠物皮肤信息
message UserPetSkinInfo{
    int64 UserID   = 1; //玩家id
    repeated PetSkinInfo PetSkins  = 2; //宠物皮肤信息集合
}

//宠物皮肤信息
message  PetSkinInfo{
    int32  PetID  = 1;   //宠物id
    int32  CurSkinId = 2;  //当前皮肤id
    repeated Skin Skins = 3;
}

//使用宠物皮肤
message GetUseUserPetSkin{
    int32 PetID = 1; //宠物id
    int32 SkinID = 2; //皮肤id
    bool  IsTry  = 3; //true表示试穿，false
}

//弹窗信息
message ProPagePopupInfo{
    int32 M_PageId = 1; // 弹窗id
    SimpleEventInfo M_EventInfo = 2;
}

//同步弹窗信息
message ProSyncPagePopupInfoNtf{
    repeated ProPagePopupInfo   M_PopupInfoList = 1; //弹窗信息列表
}

//弹窗是否被观看
message ProGetPagePopupIs2Watch{
    repeated int32 M_PageId = 1; //弹窗id
}

message ThDataKeyValue{
    string M_KeyName = 1; //数数属性名称
    int64 M_IntValue = 2; //数数数值属性    数值属性和字符串属性二者只能存在一个
    string M_StrValue = 3; //数数字符串属性
}

//从center传到gs的数数协议体
message ProCenter2GsThinkingDataMsg{
    string M_ThEventName    = 1; //数数事件名称
    repeated ThDataKeyValue M_ThEventKvs    = 2; //数数属性
}

message ProSyncCenter2GsThinkingDataMsg{
    int64   M_TargetUserID   = 1; //操作的玩家id
    repeated ProCenter2GsThinkingDataMsg M_ThinkingDataMsgs = 2; //数数事件信息
}

message ProVendingMachineGrid {
    int32 M_GridId=1;
    int32 M_Left=2;
    int32 M_Max=3;
    int32 M_ProductId=4;
    int32 M_Status=5;
}

message ProVendingSaleProductStat {
    int32 M_ProductId = 1;
    int32 M_SaleNumber = 2;
    repeated ProBagItem M_ShowIncome = 3;
}

message ProtoVendingSaleStat {
    repeated ProBagItem M_TotalAwards = 1;
    repeated ProVendingSaleProductStat M_SaleStat = 2;
}

message ProBeforeUseItemReq {
    int32 M_ItemID = 1;
}

message ProBeforeUseItemAck {
    int32 M_ItemID = 1;
    int32 M_OPType = 2;
    repeated ProBagItem M_JobBeachCarIdleAward = 3;
}

message ProMailRedpointCfgMsg {
    int32 M_MailRedpointCfg = 1;
}

message ProGetUserRestaurantImageInfoReq {
    int64 M_TargUserID = 1;
}

message ProtoFarmCarNotify {
    int64 M_UserID = 1;
    int32 M_AllianceID = 2;
    ProtoFarmCarHelp M_FarmCarInfo = 3;
    int64 M_FinishTime = 4;
    bool M_IsQuit = 5;
    AllianceSimpleUser M_User = 6;
}

message ProtoFarmCarHelp {
    repeated ProtoFarmCarTask M_TaskList = 1;
    int64 M_SendHelpTime = 2;
    AllianceSimpleUser M_User = 3;
}

message ProtoFarmCarTask {
    int32 M_TaskBoxId = 1;
    int32 M_ConfId = 2;
    int32 M_Status = 3;
    bool M_CanHelp = 4;
    int64 M_HelperID = 5;
    string M_HelperName = 6;
}

message ProFarmStaffDetailAck {
    int32 M_MaxStaffProgress = 1;
    repeated ProFarmStaffProduce M_DispatchList = 2;
    repeated ProFarmStaffProduceTerms M_CanProduceTerms = 3;
}

message ProtoFarmCarHelpListReq {
    int64 M_UserID = 1;
    int32 M_AllianceID = 2;
}

message ProtoFarmCarHelpListAck {
    repeated ProtoFarmCarHelp M_List = 1;
}

message ProtoFarmLvUpNTF {
    int32 M_Reson = 1;
    repeated int32 M_BuildObjID = 2;
    int64 M_Exp = 3;
    int32 M_Lv = 4;
}

message ProGetUserRestaurantImageInfoAck {
    int64 M_TargUserID = 1;
    repeated ProIconInfo M_RestaurantImages = 2;
    int32 M_CurRestaurantImage = 3;
}

message ProFinishAllEventOrderPazzleReq {

}

message ProtoBuildCommonInfo {
    int32 M_BuildObjID = 1;
    int32 M_BaseID = 2;
    int64 M_BuildTime = 3;
    repeated ProtoLandRes M_OccupyLandInfo = 4;
    int64 M_SpeedTime = 5;

}

message ProtoFarmInfo {
    repeated ProtoFarmLand M_FarmLandList = 1;
}

message ProtoLandRes {
    int32 M_LandPos = 1;
}

message ProtoFarmLand {
    ProtoBuildCommonInfo M_BuildInfo = 1;
    int32 M_CurPlantID = 2;
    int64 M_Speed = 3;
    int64 M_StartTime = 4;
    int32 M_GainSeasonCnt = 5;
    int32 M_WitchSeason = 6;
}

message ProtoOneFactory {
    ProtoBuildCommonInfo M_BuildInfo =1;
    repeated ProtoProduceQueque M_ProductList = 2;
    repeated ProtoProduceQueque M_FinishList = 3;
}

message ProtoFactoryInfo {
    repeated ProtoOneFactory M_FactoryList = 1;
}

message ProtoFarmBuildReq {
    int32 M_BaseID = 1;
    repeated int32 M_OccupyLand = 2;
}

message ProtoFarmPlaneCountNtf {
    int32 M_PlaneCount = 1;
    int64 M_PlaneRecoverTime = 2;
}

message ProtoFactoryProduct {
    int32 M_BuildObjID = 1;
    repeated ProtoProduceInfo M_ProduceList =2;
    int32 M_OpType = 3;
    bool M_IsDiamond = 4;
    int32 M_SpeedType = 5;
}

message ProtoFatoryOpAck {
    int32 M_Optype = 1;
    bool M_IsDiamond = 2;
    repeated ProBagItem M_GainItem = 3;
    ProtoOneFactory M_Factory = 4;

}

message ProtoProduceInfo {
    int64 M_ProduceSerialID = 1;
    int32 M_TermID = 2;
}

message ProtoPlantOprInfo {
    int32 M_BuildObjID = 1;
    int32 M_OpType = 2;
    int32 M_PanltID = 3;
    int32 M_SpeedType = 4;
    bool M_SpeedAll = 5;
}

message ProtoPlantOprRsp {
    int32 M_OpType = 1;
    repeated ProBagItem M_ItemS = 2;
    ProtoFarmLand M_CurLandInfo = 3;
}

message ProtoFarmGainRequest {
    repeated int32 M_BuildObjID = 1;
}

message ProtoFarmGainResp {
    repeated ProtoFarmLand M_FarmLands = 1;
    repeated ProBagItem M_GainItem =2;
}

message ProtoFarmBuild {
    ProtoOneFactory M_Factory = 1;
    ProtoFarmLand M_FarmLand =2;
}

message ProtoBuildSpeed {
    int32 M_BuildObjID = 1;
    int32 M_SpeedType = 2;
    bool M_IsAll = 3;
}

message ProtoResLandList {
    repeated ProtoLandRes M_List = 1;
}

message ProtoProduceQueque {
    int64 M_ProduceSerial = 1;
    int32 M_TermID = 2;
    int64 M_FinishTime = 3;
}

message ProtoFarmCarDetailAck {
    int32 M_TaskLevel = 1;
    int32 M_SendHelpCount=2;
    int32 M_HelpCount=3;
    repeated ProtoFarmCarTask M_TaskList=4;
    int64 M_TaskStartTime=5;
    repeated ProBagItem M_Award=6;
    int32 M_PlaneCount= 7;
    int64 M_PlaneRecoverTime = 8;
}

message ProtoFarmCarOperAck {
    int32 M_SendHelpCount = 1;
    int32 M_HelpCount = 2;
    int32 M_Status = 3;
    bool M_CanHelp = 4;
    int32 M_OPER_TYPE = 5;
    int32 M_TaskBoxId = 6;
    repeated ProBagItem M_Award = 7;
    int32 M_Code = 8;
    int64 M_UserID = 9;
}

message ProFarmStaffProduce {
    int32 M_DispatchID = 1;
    int32 M_StaffObjID = 2;
    int32 M_TermID = 3;
    int64 M_StartTime = 4;
    int64 M_SpeedTime = 5;
    int64 M_FinishTime = 6;
}

message ProFarmStaffProduceTerms {
    int32 M_TermID = 1;
    repeated ProBagItem M_Cost = 2;
    int64 M_ProduceTime = 3;
    repeated ProStaffLimit M_List = 4;
    int64 M_StaffSpeedParam = 5;
}

message ProStaffLimit {
    int32 M_Type = 1;
    int32 M_Value = 2;
}

message ProFarmStaffNtf {
    int32 M_MaxStaffProgress = 1;
    repeated ProFarmStaffProduceTerms M_CanProduceTerms = 2;
}

message FarmMapAllInfo {
    int32 Map_Level = 1;
    int64 Map_Exp = 2;
    repeated ProtoOneFactory M_FactoryList = 3;
    ProtoFarmInfo M_FarmLand = 4;
    repeated ProtoLandRes M_IdleList = 5;
}

message ProtoFarmCarDetailReq {
    int64 M_UserID = 1;
}

message ProtoFarmCarOperReq {
    int64 M_UserID = 1;
    int32 M_OPER_TYPE = 2;
    int32 M_TaskBoxId = 3;
}

message ProtoFarmCarFinishRewardReq {
    int32 M_TaskLevel = 1;

}

message ProtoFarmCarFinishRewardAck {
    int32 M_TaskLevel = 1;
    int64 M_TaskStartTime = 2;
    repeated ProBagItem M_Award = 3;
}

message ProFarmStaffDispatchReq {
    int32 M_StaffObjID = 1;
    int32 M_TermID = 2;
}

message ProFarmStaffReceiveAck {
    ProFarmStaffProduce M_DispatchInfo = 1;
    bool M_IsFinish = 2;
}

message ProFarmStaffReceiveReq {
    int32 M_DispatchID = 1;
    int32 M_SpeedType = 2;
}

message ProFarmStaffDispatchAck {
    ProFarmStaffProduce M_DispatchInfo = 1;
}

message ProFarmStaffCancelReturnReq {
    int32 M_DispatchID = 1;
}

message ProFarmStaffCancelReturnAck {
    int32 M_DispatchID = 1;
    repeated ProBagItem M_Award = 2;
}

message ProFarmStaffCancelReq {
    int32 M_DispatchID = 1;
}

message ProFarmStaffCancelAck {
    int32 M_DispatchID = 1;
}

message ProVendingMachineInfoReq {

}

message ProVendingMachineInfoAck {
    repeated ProVendingMachineGrid GridList = 1;
    int64 M_LastReceiveAwardMs = 2;
    int32 M_CurrentSaleStatNumber = 3;
}

message ProVendingMachineOpReq {
    int32 M_OpType = 1;
    int32 M_GridId = 2;
    int32 M_ProductId = 3;
    int32 M_OnSaleNum = 4;
}

message ProVendingMachineOpAck {
    int32 M_OpType = 1;
    repeated int32 M_GridIds = 2;
    repeated int32 M_LackItemsWhileAuto = 3;
    int32 M_Status = 4;
    ProtoVendingSaleStat M_SaleRecord = 5;
    int64 M_LastReceiveAwardMs = 6;
    repeated ProBagItem M_AwardItems = 7;
}

message ProVendingMachineBuyReq {
    int32 M_GridId = 1;
    int32 M_ObjectID = 2;
}

message ProVendingMachineBuyAck {
    int32 M_Status = 1;
    int32 M_ObjectID = 2;
    repeated ProBagItem M_Awards = 3;
    repeated ProBagItem M_SaledItem = 4;
}

message ProSyncVendingMachineInfoNtf {
    repeated ProVendingMachineGrid GridList = 1;
    int64 M_LastReceiveAwardMs = 2;
    int32 M_CurrentSaleStatNumber = 3;
}

message ProSyncVendingWalletNtf {
    int64 M_Wallet = 1;
}

message EventWechatCircleData {
    int32 SignCnt = 1;
    bool FirstTaken = 2;
    bool IsSignToday = 3;
    string CircleUrl = 4;
    repeated int32 SignTakenDays = 5;
}

message ShareDailyReq {

}

message GetShareDailyNumReq {

}

message JoinGameFromReq {
    int64 FromUid = 1;
    int32 ShareType = 2;
    int64 ShareId = 3;
    int64 ShareResId = 4;
}

message ShareGameStatisticsReq {
    int64 ShareId = 1;
    int64 ShareResId = 2;
    int32 Status = 3;
}

message SyncLeaderPushNtf {
    int64 FromUid = 1;
    int64 ToUid = 2;
    int32 CondType = 3;
    int32 Value = 4;
}

message GetLeaderRegNumReq {

}

message RegLeaderInfoReq {
    int64 UserId = 1;
}

message PageClickStatisticsReq {
    string Txt = 1;
}

message GetMiniCollectInfoReq {

}

message GetMiniCollectInfoAck {
    map<string,bool> Taken = 1;
    map<string,bool> Status = 2;
}

message SetMiniCollectAck {
    bool Success = 1;
    int32 Type = 2;
}

message GetMiniCollectTakeAwardReq {
    int32 Type = 1;
}

message GetMiniCollectTakeAwardAck {
    bool Success = 1;
}

message Get2048MiniGameAwardAck {
    bool Success = 1;
}

message Get2048MiniGameInfoAck {
    bool Taken = 1;
}

message GetCookbookShareAwardReq {
    int32 CookBaseID = 1;
}

message GetCookbookShareAwardAck {
    bool Success = 1;
    repeated ProBagItem AwardsList = 2;
}

message GetH5KittyRedirectUrlAck {
    string Url = 1;
}

message SyncLeaderRegNtf {
    int64 FromUid = 1;
    int64 ToUid = 2;
}

message GetShareDailyNumAck {
    int32 Num = 1;
}

message ShareDailyAck {

}

message RegLeaderInfoAck {
    bool Success = 1;
}

message GetLeaderRegNumAck {
    int32 Num = 1;
}

message SetMiniCollectReq {
    int32 Type = 1;
}

message Get2048MiniGameInfoReq {

}

message SyncPatchH5ZdBillNtf {
    int64 Uid = 1;
    int32 Value = 2;
}

message GetH5KittyRedirectUrlReq {

}

message Get2048MiniGameAwardReq {

}

// ================== 下面是2.0的协议 ================

message IdInt64Data {
    int64 Id = 1; // 通用只需要传int64 id的情况
}

message IdInt32Data {
    int32 Id = 1; // 通用只需要传int32 id的情况
}

// 聊天连接消息
message ChatConnectedInfo {
    int32 server_id = 1; // 聊天服务器ID
}

enum MsgType {
    NONE = 0;
    FRIEND   = 1;
    ALLIANCE = 2;
    WORLD    = 3;
}

enum ChatContentType {
    ContentTypeCustom  = 0; // 客户端自定义内容
    ContentTypeEmoji   = 1; // 收费表情 content必须是表情ID 纯ID 不能有其他转码信息
    ContentTypeMarquee = 2; // 系统跑马灯(消息) 只发全服消息
}


// 聊天消息推送
message ChatMessage {
    MsgType msg_type 					    = 1;
    int64 Sender 		 					    = 2; // 发送方UserID
    int64 Target 							    = 3; // 对象 UserID 私聊
    bytes Content 						    = 4; // 内容
    int64 SendTime 						    = 5; // 默认传递的数据不带 由服务器赋值下发 MS 毫秒
    int64 MsgID       				    = 6; // 消息ID(不传 由服务器赋值 可不处理 用是时间纳秒做成)
    SimpleUser SenderInfo         = 7; // 发送者用户信息 客户端不传 由服务器赋值 另外 只取部分客户端需要的数据 不一定能是SimpleUser的全部信息
    ChatContentType ContentType   = 8; // 前期可以不使用
}

message ChatInnerMessage {
    ChatMessage Message = 1;
    string GroupKey     = 2; // 群组的key 如果是群发
    int32 ServerId      = 3; // 来自的区服ID(服务器赋值)
}

//
message ChatOffDataNtf {
    repeated ChatMessage Messages = 1; // 消息列表
    bool Finish                   = 2; // 是否结束
}

// 主要由gate服发送到chat 用于注册/联盟/变更/
message ChatInnerMsgInfo {
    int32 Api         				= 1;
    int32 ServerID    				= 2; // 服务器ID
    int64 UserID      				= 3; // 注册用户到chat 如果没有 就是全局数据
    repeated string GroupKeys = 4; // 聊天组key 如果有就设置
    bytes Msg         				= 5; // 子消息 根据API
}

message ChatInnerMsgSendOffGroupData {
    MsgType msg_type 	           = 1; // 类型
    int64 FromUserID             = 2; // 来源私聊UID
    string GroupKey              = 3; // 群组key
    repeated ChatMessage Message = 4; // 消息列表
}

// 一次只推送一条消息
message ChatInnerMsgSendOffData {
    int32 ServerID 							      = 1;
    int64 UserID   							      = 2;
    ChatInnerMsgSendOffGroupData Data = 3;
    bool Finish                       = 4; // 最后一个消息 完结
}

message UserPayInfo {
    int64 total_cost 			= 1; // 累计花费
    int64 month_total_cost = 2; // 当月累计花费
}

// 资质升级 每次只升级一次
message StaffTalentSkillUpReq {
    int32 StaffID  = 1;
    int32 TalentID = 2;
    int32 ItemID   = 3; // 使用道具进行升级 现在经验点当做道具使用
}

message StaffTalentSkillUpAck {
    int32 StaffID  = 1;
    int32 TalentID = 2;
    bool  Result   = 3; // true=成功 false=失败 因为有成功率 协议成功 但是升级失败
    int32 Level    = 4; // 升级成功后的等级, 失败也会返回当前等级
}

// 突破请求 材料直接使用 并且通过道具变动下发  不走协议逻辑
message StaffBreakUpReq {
    int32 StaffID  = 1;
}

message StaffBreakUpAck {
    int32 StaffID  = 1;
    int32 Break    = 2; // 突破后的 break等级
}

// 道具表里的所有物品获得时进行推送获得 数据为正 用于弹窗或者tips提示
message SyncAllItemPlusNtf {
    repeated ProItemInfo items = 1; // 用于展示 不用于数据更新
    int32        				Reason = 2; // reason
}


enum RandBookUseInfoUseType {
    RandBookUseInfoUserTypeNone   = 0;
    RandBookUseInfoUserTypeRes    = 1; // 雇员资源类型 读取ItemID
    RandBookUseInfoUserTypeProper = 2; // 雇员属性类型 读取PropKey
}

// 同步随机书籍的使用信息推送
message SyncRandBookUseInfoNtf {
    RandBookUseInfoUseType useType 								= 1;
    int32 IdKey  																	= 2; // 资源ID或属性ID 根据useType 确定
    repeated RandBookUseInfoOneEmployee employees = 3; // 每个雇员的明细
    ProItemInfo UseItemInfo                       = 4; // 道具使用信息
}

message RandBookUseInfoOneEmployee {
    int32 ID = 1; // 雇员ID
    int64 Total = 2; // = (value * count)+++ 所有的加起来
    repeated RandBookUseList list = 3; // 无序  需要客户端按照value值重新排序
}

message RandBookUseList {
    int64 Value = 1; // 获得的数量值
    int32 count = 2; // 获得次数
}

message ChangeUserSkinReq {
    UserSkin skin = 1; // 每次都提交这三个信息 包括称号,style,skinID 切换风格的时候 也需要提交
}

message ChangeUserSkinAck {
    UserSkin skin = 1; // 回复确定
}

message UserFigureInfo {
    int32 id 		 = 1; // 道具表配置id
    int32 count  = 2;
    int64 expire = 3; // 过期时间，-1代表永久
    bool 	Unlock = 4; // 是否解锁
}

message ChangeUserFigureNtf {
    UserFigureInfo info = 1;
}

// 获取雇员章节奖励请求
message GetEmployeeChapterRewardReq {
    int32 StaffID   = 1;
    int32 ChapterId = 2; // 雇员背景章节ID 从1开始 避免0没有数据 计算位数据需要-1
}

// 回复
message GetEmployeeChapterRewardAck {
    int32 StaffID   				= 1;
    int32 ChapterRewards	  = 2; // 当前的所有领取情况返回
}

// 收菜建筑信息
message HarvestBuildingInfo {
    repeated HarvestBuildingData buildings = 1; // 所有的建筑信息
}

message HarvestBuildingData {
    int32 Id = 1; // id
    repeated HarvestSlot Slots = 2; // 驻守雇员槽位ID array[] 每个槽位有确定的ID
    repeated HarvestBuildingCollector collector = 3; // 收取位
}

message HarvestSlot {
    int32 Id 		  = 1; // slot id
    bool Unlock   = 2;
    int32 StaffID = 3; // 驻守雇员ID
}

message HarvestBuildingCollector {
    int32 ResItemId  = 1; // 资源类型ID
    int64 StartTime  = 2; // 对应新的计时开始时间
    int64 Interval   = 3; // 间隔时间 单位秒
    int64 Stock      = 4; // 新计时时间之前的库存数据
    int32 StockTimes = 5; // 库存数据对应的次数
    int64 PerNum     = 6; // 单次数量
    int32 CostItemId = 7; // 消耗的道具ID
    int32 MaxTimes   = 8; // 最大数量
}

message CheckUserHarvestBuildingReq {
    int32 Id 				= 1; // buildingID
}

//
message CollectUserHarvestBuildingReq {
    int32 Id    = 1; // buildingID 为0 => 一键全收
    int32 ResId = 2; // 资源ID
}

//
message CollectUserHarvestBuildingAck {
    repeated CollectUserHarvestBuildingAckData datas = 1;
}

// 数据变动通过ntf传递
message CollectUserHarvestBuildingAckData {
    int32 Id    							 = 1; // buildingID
    repeated ProItemInfo items = 2; // 每个building收到的资源数据
}

// 恋人系统信息
message UserLoverInfo {
    int32 Times 							 = 1; // 当前精力值
    int32 MaxTimes						 = 2; // 最大精力值
    int64 CoolDownStartTime		 = 3; // 冷却开始时间
    int64 Interval 						 = 4; // 冷却间隔时间 回复一次的时间 单位秒
    repeated UserLover Lovers  = 5; // 恋人们数组
    repeated LoverVisit Visits = 6; // 未获得恋人的邂逅进度信息 不会推送次数为0的ID
}

message LoverVisit {
    int32 Id 		= 1; // 未获得的恋人ID
    int32 Times = 2; // 进度
}

// 恋人列表
message UserLoverList {
    repeated UserLover Lovers = 1;
}

// 恋人属性同步
message LoverProperInfo {
    int32 Id  										= 1;
    repeated PropKeyValue Propers = 2; // 属性kV
}

message UserLover {
    int32 Id  										= 1; //
    int32 SkinId 									= 2; // 皮肤ID 暂时=0
    repeated PropKeyValue Propers = 3; // 属性kV
    int64 Point										= 4; // 势力点
    int32 TitlePos								= 5;
    int32 ChildrenNum             = 6; // 子嗣数量
    int32 ChildrenProp            = 7; // 子嗣总属性
    int32 DatingTimes             = 8; // 约会次数
    repeated PropKeyValue Skills 	= 9; // 技能列表
}

message UserLoverEnergyInfo {
    int32 Times 							= 1; // 当前精力值
    int32 MaxTimes						= 2; // 最大精力值
    int64 CoolDownStartTime		= 3; // 冷却开始时间
    int64 Interval 						= 4; // 冷却间隔时间 回复一次的时间 单位秒
}

message LoverGreetingsReq {
    bool All = 1; // false=问候一次, true=一键问候
}

// UserLoverInfo 通过notify信息发送 但是不会发送所有的Lovers
message LoverGreetingsAck {
    bool All 													= 1; // false=问候一次, true=一键问候
    repeated LoverGreetingsInfo infos = 2; // 随机到的情况 一键问候不会生娃 不用处理. 单次问候只需要取一条数据即可
}

message LoverGreetingsInfo {
    int32 Id 											= 1; // 问候到的loverID
    int32 Times 									= 2; // 问候次数
    int64 Point 									= 3; // 获取到的势力点数量
    bool Dating 									= 4; // 是否成功约会. 成功约会有可能会有娃
    repeated PropKeyValue Propers = 5; // 获取到的属性，指定约会的时候获取到的属性
	// 娃的数据后续给
    Child Children             		= 6; // 子嗣数据
}

// 指定约会
message LoverDatingReq {
    int32 Id 		= 1; // loverID
}

message LoverDatingAck {
    LoverGreetingsInfo info = 1; // 只会回复一个信息 并且实例点通过notify推送lover信息
}

// 羁绊技能升级
message LoverSkillUpgradeReq {
    int32 LoverId = 1; // loverID
    int32 Skill   = 2; // 技能ID
}

message LoverSkillUpgradeAck {
    int32 LoverId = 1; // loverID
    int32 Skill   = 2; // 技能ID
    int64 Level  	= 3; // 技能等级
}

message UserStoryReport{
    int32 GroupID				= 1; // 组ID
    int32 Story  				= 2; // 剧情id
    repeated int32 Args = 3; // 扩展参数
    bool Finish         = 4; // 是否完成的剧情
}

message SyncUserStoriesNtf {
    repeated CommonIntKV GroupStory= 1; // key 为groupID,value 为对应组下面的剧情数量
}

message GetUserGroupStoriesReq {
    int32 GroupID = 1; // 组ID
}

message UserGroupStoryInfo {
    int32 					Story  = 1; // 剧情
    repeated int32  Args 	 = 2;
    bool            Finish = 3; // 是否完成的剧情
}

message GetUserGroupStoriesAck {
    int32          									GroupID = 1; // 组ID
    repeated UserGroupStoryInfo Stories = 2; // 剧情列表
}

message StageFightInfo {
    int32 NextStageId 							= 1; // 下次要打的主线关卡ID
    int64 BossPower   							= 2; // 下一关卡如果是BOSS 则会返回BOSS的power 可能是全部可能是一般
    int64 RestoreTime 	  					= 3; // 恢复到的时间 如果为0 则没有恢复时间 表示直接可以打 否则为下一次恢复完成的时间
    repeated StageFightEvent Events = 4; // 事件列表
}

// 事件获取推送
message StageFightEventNtf {
    repeated StageFightEvent Events = 1; // 获取到的新的事件列表 一般都是一个
}

// 关卡事件数据
message StageFightEvent {
    int32 Id 			= 1; // 序列ID 从1开始++
    int32 EventId = 2; // 事件ID 配表中的
}

message StageFightReq {
    int32 StageId = 1; // 要打关卡
}

message StageFightAck {
    int32 Result       = 1; // 0=OK >0表示具体的失败情况
    int32 NextStageId  = 2; // 下一关卡ID 如果成功了 则返回. 奖励展示直接读表, 具体数据通过相关的推送.
    int64 BossPower    = 3; // 如果失败了 则返回BOSS剩余的血量和相关的恢复时间
    int64 RestoreTime  = 4; // 恢复到的时间 如果为0 则没有恢复时间 表示直接可以打 否则为下一次恢复完成的时间
}

message StageFightEventDealReq {
    int32 Id 			= 1; // 事件ID 一键处理传id=0 基本上就是一个空结构传过来就行了
    int32 Option 	= 2; // 选择类的选项 下标从0开始 0=1 1=2 没有其他 一键处理不用传
}

// 原样返回的数据 奖励通过其他推送
message StageFightEventDealAck {
    int32 Id 			= 1; // 事件ID 一键处理传id=0 基本上就是一个空结构传过来就行了
    int32 Option 	= 2; // 选择类的选项 下标从0开始 0=1 1=2 没有其他 一键处理不用传
    int32 LastId  = 3; // 最后处理完的ID
}

// 雇员资源数据同步
message SyncStaffResNtf {
    int32 Id 										= 1; // staffID 雇员ID
    repeated 	StaffResData Res  = 2; // 同步资源 只同步变动的资源ID 剩余全部数据
}

// 雇员属性变动同步 吃书/其他培养
message SyncStaffProperNtf {
    int32 Id 										= 1; // staffID 雇员ID
    int64 Power 							  = 2; // 战力
    StaffProperShow ProperShow  = 3; // 属性显示数据
}

// 恋人位份变更
message LoverTitleChangeReq {
    int32 LoverId 		= 1; // loverID
    int32 TitlePosId 	= 2; // 位份ID
}

// 子嗣事件类型
enum ChildrenEventType{
    ChildrenEventTypeNone 	 = 0; //
    ChildrenEventTypeConfirm = 1; // 确定事件
    ChildrenEventTypeChoose  = 2; // 选择事件
}

// 子嗣结算类型
enum ChildrenBreakALegType {
    ChildrenBreakALegTypeNone  = 0; // 无
    ChildrenBreakALegTypeLeave = 1; // 离开
    ChildrenBreakALegTypeMarry = 2; // 结婚
}

// 子嗣系统信息
message UserChildrenInfo {
    repeated Child Children 					= 1; // 子嗣列表
    repeated MiniChild LeaveChildren 	= 2; // 离家子嗣列表
    UserChildrenEnergyInfo EnergyInfo = 3; // 精力值信息
    int32 Slot 								        = 4; // 子嗣槽位数量
}

message UserChildrenEnergyInfo {
    int32 Energy      = 1; // 当前精力值
    int32 MaxEnergy   = 2; // 最大精力值
    int64 StartTime  	= 3; // 冷却开始时间
    int64 Interval   	= 4; // 冷却间隔时间 回复一次的时间 单位秒
}

// 子嗣信息
message Child {
    int64  Id                       = 1;
    int32  Parent                   = 2;
    int32  Sex                      = 3;  // 性别
    string Name                     = 4;  // 名字
    repeated int32 Talent           = 5; // 天赋(选择的天赋)
    repeated int32 ChooseTalent     = 6; // 可选择的天赋列表
    repeated PropKeyValue Propers   = 7; // 属性
    repeated PropKeyValue Aptitudes = 8; // 资质
    repeated ChildrenEvent Events   = 9; // 事件列表
    int32 ChooseEventId 						= 10; // 选择事件ID,没有选择事件触发的时候为0
    bool	 IsMaxLevel  							= 11; // 是否满级
}

// 子嗣事件信息
message ChildrenEvent {
    int32 Id                     			= 1; // 事件id
    int64 Age                       	= 2; // 年龄
    repeated PropKeyValue ProperAward = 3; // 属性奖励
    repeated PropKeyValue ItemAward 	= 4; // 道具奖励
    bool IsTalent											= 5; // 是否是天赋事件
    repeated int32 TalentIds          = 6; // 触发的天赋id列表
}

message MiniChild {
    int64  Id                       = 1;
    int32  Parent                   = 2;
    int32  Sex                      = 3;  // 性别
    string Name                     = 4;  // 名字
    repeated PropKeyValue Propers   = 5; // 属性
    repeated PropKeyValue Aptitude  = 6; // 资质
    int32 GraduateId								= 7; // 毕业ID
}

// 出生选择天赋请求
message ChildrenChooseTalentReq {
    int64           Id     = 1; // 子嗣ID
    repeated int32  Talent = 2; // 天赋(选择多个)
    string          Name   = 3; // 子嗣名称
}

// 成长
message ChildrenGrowReq {
    int64  	Id  = 1; // 子嗣ID
}

message ChildrenGrowAck {
    int64 									Id    		= 1; // 子嗣ID
    repeated 	ChildrenEvent Events 		= 2; // 事件
    int32  									ChoiceId	= 4; // 奇遇事件id
    bool	          				MaxLevel  = 5; // 是否满级
    repeated int32 					Talents 	= 6; // 触发的天赋
    repeated PropKeyValue 	Propers   = 7; // 属性
}

// 事件抉择
message ChildrenEventChooseReq {
    int64 ChildId = 1; // 子嗣ID
    int32 EventId = 2; // 事件，选项对应的事件id
}

// 事件抉择回复
message ChildrenEventChooseAck {
    int64 ChildId      						= 1; // 子嗣ID
    ChildrenEvent Event						= 2; // 事件
    bool	MaxLevel  							= 3; // 是否满级
    repeated PropKeyValue Propers = 4; // 属性
}

// 结算请求
message ChildrenBreakALegReq {
    int64	Id	= 1; // 子嗣ID
}

// 结算请求
message ChildrenBreakALegAck {
    int64 								Id  				= 1; // 子嗣ID
    ChildrenBreakALegType Type 				= 2; // 结算类型
    int32 								GraduateId	= 3; // 毕业ID
    int32 								Rank        = 4;
}

message ChildrenAddSlotAck{
    int32 Slot  = 1; // 子嗣槽位数量
}

message MarryAdultChild {
    int64 	  Id 	        			  = 1; // 子嗣ID
    string 	  Name        			  = 2;
    int32 	  Sex         			  = 3; // male=1 female=2
    int32 	  Rank        			  = 4; // 称号排名 (第几公主、第几王子....)
    int64  	  ProperValue 			  = 5; // 属性值
    MarryInfo MarryInfo   			  = 6; // 联姻信息
    MarryAdultSimpleInfo Mate     = 7; // 配偶信息
    int64     MarryTime				    = 8; // 联姻时间 单位秒
    repeated PropKeyValue Propers = 9; // 四维属性
    repeated int32 Talent         = 10; // 天赋(选择的天赋)
    int32 StoreId 								= 11; // 驻守的店铺ID(目前只支持一个)if==0 无驻守(不消耗)>0,读表消耗
}

message MarryAdultSimpleInfo {
    int64  Id           					= 1; // 子嗣ID
    int64  Uid          					= 2; // 配偶玩家UID 通过接口请求获取相应的玩家信息
    string Name         					= 3; // 配偶名称
    int32  Rank         					= 4; // 配偶品级
    int64  ProperValue  					= 5; // 属性值
    int32  Sex          					= 6; // male=1 female=2
    repeated PropKeyValue Propers = 7; // 四维属性
    repeated int32 Talent         = 8; // 天赋(选择的天赋)
}

// 联姻类型
enum MarryType {
    MarryTypeNone     = 0; // 未操作
    MarryTypeAll      = 1; // 全服联姻
    MarryTypeAssign   = 2; // 指定联姻
}

enum MarryStatus {
    MarryStatusNone  = 0; // 未联姻
    MarryStatusIn    = 1; // 联姻中
    MarryStatusWait  = 2; // 等待联姻确定
    MarryStatusOK    = 3; // 联姻OK
}

message MarryInfo {
    MarryStatus Status 					= 1;
    MarryType   Type 						= 2;
    int64       TargetUid       = 3; // 指定联姻的UID
    int64 			MarryEndTime 	  = 4; // 联姻等待结束时间
}

// 联姻
message UserMarryData {
    repeated MarryAdultChild Adults = 1; // 子嗣列表数据
}

// 联姻发起请求
message MarryReq {
    int64 			Id 					= 1; // 子嗣ID
    MarryType  	Type 				= 2;
    int64 			TargetUid 	= 3; // 指定联姻UID
    int32   		ItemId 			= 4; // 道具ID
    int32 		  ShareData   = 5; // 全服联姻的分享数据 客户端自己组装 透传返回
}

message MarryAck {
    int64 			Id 						  = 1;
    MarryType  	Type 						= 2;
    int64 			MarryEndTime 	  = 3; // 联姻等待结束时间 单位秒
    int32 		  ShareData   		= 4; // 全服联姻的分享数据 客户端自己组装 透传返回
}

message MarryGoWay {
    repeated int32 ChildIds = 1;
}

// 远行成就消息推送
message MarryGoWayAchievementNtf {}

message MarrySearchReq {
    int64 Id 			 = 1; // 自己子嗣的ID 用于计算rank
    bool Force     = 2; // 使用道具强制刷新 如果倒计时已经完了 可以不用
}

message MarrySearchAck {
    int64 Id 			 										  = 1; // 自己子嗣的ID 返回信息
    repeated MarryAdultSimpleInfo Infos = 2; // 搜索到的联姻子嗣的信息 如果是空列表 表示目前没有在联姻的信息
    int64 NextSearchTime                = 3; // 下次能够搜索的时间 非道具搜索
}

// 联姻通知消息
message SyncMarryNoticeNtf {
    repeated MarryNotice Notices = 1; // 增加的notice
    repeated int64 DelIds		 		 = 2; // 删除的消息 比如某个联姻消息的取消 子嗣ID 拒绝后也会推送
}

message MarryNotice {
    MarryAdultSimpleInfo  Info = 2; // 联姻信息 这里的info是自己子嗣的信息 可以直接用ID做显示 操作也是按照子嗣ID做操作
    int64 			MarryEndTime 	 = 3; // 联姻等待结束时间
    int64       Timestamp			 = 4; // 消息的时间戳
}

// 确定结婚请求  如果是通知 会自动删除并且推送信息
message MarryDoReq {
    int64 Id 								 = 1; // 我的子嗣ID
    int64 TargetId           = 2; // 对方子嗣ID
}

// 获取某个联姻子嗣信息
message MarryGetMarchInfoReq {
    int64 Id 								  = 1; // 子嗣ID
}

message SyncMarryStatusNtf {
    MarryAdultChild Adult = 1; // 状态会有	MarryStatusWait 或者 MarryStatusOK 会带mate
}

message MarryStatusEnsureReq {
    int64 Id 								  = 1; // 子嗣ID
}

// 活动内部消息请求
message EventInnerMsg {
    int32 ServerID = 1; //
    string call    = 2; // call function name
    int64 UserID   = 3; // 操作用户
    bytes	Msg			 = 4; // 消息内容 消息体根据模块不同而不同 通过 DecodeMsg
    int64 Sequence = 5; // 消息序列号
    int32	Api			 = 6; // 通过API处理
    int32 EventId  = 7; // 活动ID
}

message EventInnerMsgAck {
    int32	Code     = 1;
    bytes Msg      = 2;
    int64 Sequence = 3; // 消息序列号
    int32	Api			 = 4;
}

// ======================== Event内部消息 START =======================

message EventRankUpdateData {
    string RankId = 1; // 活动rank类型ID 可能为大ID.小ID
    int64 Score   = 2; // 入榜分数
}

message EventStoreRankUpdateReq {
    int64 Uid 												 = 1; // 用户ID
    repeated EventRankUpdateData Datas = 2; // 同时更新多个rank
    int64 Ts      										 = 3; // 入榜时间
}

message EventActivityStageStatusNtf {
    int32 Id                           = 1;
    int32 Status                       = 2; // 状态 这个状态后续定义枚举
    int64 Timestamp                    = 3; // 具体时间戳 避免同步的时间延迟
    ActivityInfo Info                  = 4; // 组装好的活动信息 用于直接返回信息
}

message EventActivityRankAwardPrizeMsg {
    int32 ServerId                     = 1; // 服务器ID
    int32 ActivityId                   = 2; // 活动ID
    int64 Version                      = 3; // 版本或者轮次号
    string Key                         = 4; // 榜单key
    int32 Action                       = 5; // action==0发送奖励数据 ==1开始将奖励做成邮件
    int32 RankId                       = 6; // 排行榜配置ID
    int64 EndTime                      = 7; // 结束时间 ts
}

message EventActivityDayWorldBossSettleMsg {
    int32 ServerId                          = 1; // 服务器ID
    int32 ActivityId                        = 2; // 活动ID
    int32 BossLevel                         = 3; // boss等级
    SyncActivityDailyWorldBossStatusNtf ntf = 4; // 活动数据
}

message ActivityInnerOpReq {
    int32 Op             = 4; // 请求操作类型
    bytes Payload        = 5; // 请求参数 string类型 内部转成对应的具体类型
}

message ActivityInnerOpAck {
    ActivityInnerOpReq Req = 1;
    int32 Code             = 2; // 回复的code信息 如果!=OK 那么直接返回错误
    bytes Payload          = 3; // 回复的数据 根据req.op来解析
}

message ActivityOpReq {
    int32 Op             = 4; // 请求操作类型
    repeated string Args = 5; //
}

message ActivityOpAck {
    ActivityOpReq Req 		 = 1;
    int32 Code             = 2; // 回复的code信息 如果!=OK 那么直接返回错误
    bytes Payload          = 3; // 回复的数据 根据req.op来解析
}


// ======================== Event内部消息 END =======================

// 巡游数据
message CircuitInfo {
    CircuitMap Map 			 							= 1; // 地图数据
    int32 Lover    			 							= 2; // LoverID 没有绑定=0
    CircuitEnergy Energy 							= 3; // 巡游能力/体力信息
    int32 Skin           							= 4; // 皮肤ID  目前=0 默认皮肤吧
//	repeated ProItemInfo RoundRewards = 5; // 圈数奖励 累计的
    int32 RoundRewardCount            = 5; // 圈数奖励次数
}

message CircuitEnergy {
    int32 Max			  				= 1; // 最大体力值 根据等级和其他加成 服务器直接给
    int32 Energy    				= 2; // 当前体力值 未超过max的时候 需要客户端自己通过冷却来计算 超过max之后 不需要下面的计算
    int64 RestoreStartTime  = 3; // 上一次恢复的开始时间 // 计算公式为 [(当前时间 - RestoreStartTime) / 冷却(配表)] = 恢复了多少的体力 需要做超出判断
}

message CircuitMap {
    int32 MapId 												= 1; // 当前地图ID
    int32 PosId 												= 2; // 当前格子位置ID  0==起始点/终点  0->1->N(最大格子数)->0
    CircuitEvent CurrentEvent 					= 3; // 当前事件 有未处理的事件
    repeated CircuitPosItems PosItems   = 4; // 随机空地资源
    int32 Round 								        = 5; // 当前圈数
    int32 Steps													= 6; // 当前地图走过的总步数
}

// 巡游事件信息 处理的事件
message CircuitEvent {
    int32 EventId 			= 1; // 事件ID 就是具体的事件类型 按配表
    repeated int32 args = 2; // 事件参数 待定  根据类型来定
}

// 格子事件 随机的数据
message CircuitPosItems {
    int32 PosId   		= 1; // 空地位置
    ProItemInfo item 	= 2; // 对应道具ID
}

// 检查体力恢复情况 只在从0到1的时候请求一次
message CheckCircuitEnergyAck {
    CircuitEnergy Energy = 1; // 巡游能力/体力信息
}

message CircuitRollAck {
    int32 Step 					 	 = 1; // 行动步数 丢出的点数
    int32 PosId 				 	 = 2; // 到达格子位置ID 0=终点/起点 到0之后自行处理展示逻辑 根据格子位置得到格子配置 来解析是否有事件或者获取道具 道具自行显示 有通用获取的接口推送
    CircuitEvent Event   	 = 3; // 如果触发了事件 则返回事件信息 事件有随机
    CircuitMap Map       	 = 4; // 新的地图信息 如果到达终点 会影响重新随机或者升级
    bool Upgrade         	 = 5; // 是否触发升级 触发升级则按照新的地图信息的map进行展示
    CircuitEnergy Energy 	 = 6; // 精力信息
    int32 RoundRewardCount = 7; // 圈数奖励次数
}

message CircuitReplaceLoverReq {
    int32 Id = 1; // loverid
}

message CircuitReplaceLoverAck {
    int32 Id = 1; // loverid 返回信息
}

message CircuitDealEventReq {
    // ******* 这里定义了所有巡游相关事件的参数 ******* //
	// 具体类型ID 根据配表来定
	// 1. 确定按钮事件/选择事件N选一   参数[ 0] = 0,1,2,3..N 表示选择的选项 确定按钮可以不传args 或者[0]=1也可以 0表示失败 所有选择类通用.
	// 2. 参数[1]=1 表示是否获得好感度 如果有这个参数
	// 3. 各种选择类和小游戏类通用
    repeated int32 args = 1; // 事件处理参数 根据类型来定
}

message CircuitDealEventAck {
    repeated int32 args = 1; // 事件处理结果信息
}

message SyncCircuitLoverInfoNtf {
    int32 Id 					 	 = 1; // LoverID 有可能是自己没有的LOVER  下面的功能就是判定是否拥有
    PropKeyValue proper  = 2; // 属性值变动 如果没有获得好感度 则不推送 这里推送的是变动值
    int32 Visit          = 3; // 访问次数  未获得的进度 满进度后 直接发放妹子
}

// 剩余次数
message CircuitGetRoundRewardAck {
    int32 RoundRewardCount = 1; // 圈数奖励次数
}

// 新的店铺功能的info 不是一个店铺
message UserNewStoreInfo {
    repeated NewStoreData Stores 					 		 = 1; // 店铺列表
    repeated UserNewStoreDecoItem  DecoItems   = 2; // 装饰物背包道具
    repeated int32 FoodId                      = 3; // 已解锁的食材的ID
    repeated int32 SkinIds                     = 4; // 已拥有的设备皮肤
    repeated NewStoreIncome Incomes            = 5; // 店铺收益数据 作为客户端显示
    int32 OnlineStoreId                        = 6; // 在线店铺ID 登录的时候默认返回第一个店铺ID 后续通过切换ID 离线的店铺根据离线计算收益 不会推送客人信息
    int32 Grade                                = 7; // 店铺功能统一的评级等级 (默认1级) 店铺自身的grade弃用
    repeated NewStoreAffair  Affairs           = 8; // 店铺事件(全局信息)
}

// 3.0店铺事件
message NewStoreAffair {
    int64 Id 			= 1; // 唯一ID 用于后续请求完成奖励
    int32 BaseId 	= 2; // 配置ID(奖励显示根据配置去)
    int32 StoreId = 3; // 挂在的店铺ID
}

message NewStoreIncome {
    int32 Id 										  					 = 1; // 店铺ID
    repeated NewStoreResIncomeData ResIncome = 2; // 资源收益值 资源ID->对应的数值
}

message NewStoreResIncomeData {
    int32 ResId    = 1;
    int64 ResValue = 2;
    int64 MinuteValue = 3;
}

message SyncNewStoreIncomeNtf {
    repeated NewStoreIncome Incomes            = 1; // 变动的店铺的收益数据
}

// 同步店铺数据
message SyncNewStoreDataNtf {
    repeated NewStoreData Stores 					 		 = 1;
}

// 店铺槽位解锁推送
message SyncNewStorePosUnlockNtf {
    int32 StoreId = 1; // 店铺ID
    int32 PosId   = 2; // 位置ID 唯一ID
}

// 装饰物的唯一物品结构
message UserNewStoreDecoItem {
    int64 EntityId              = 1; // 物品唯一ID
    int32 Id 										= 2; // 配置ID
    int32 PutStoreId            = 3; // 已经放置在某个店铺了(用于计算使用 0==表示没有使用)
}

// 单个店铺信息
message NewStoreData {
    int32 Id 																		= 1; // 店铺ID 配表
    string Name 																= 2; // 店铺名字,默认配表,可自定义
    int32 Grade 													      = 3; // (弃用)评级等级使用 默认1级 (不再使用)
    repeated NewStoreObject Objects 						= 4; // 物品列表 包括所有设备和放置的装饰物 在计算坐标可以统一计算(3.0+)
    repeated int32 CookBooks                    = 5; // (弃用)解锁的菜谱ID
    repeated NewStoreCookBookSlot CookBookSlots = 6; // (弃用)菜谱槽位列表 当前上阵槽位的信息
    repeated NewStorePointPos PointPos          = 7; // 上阵点位(3.0+)
    repeated NewStoreCustomer Customers         = 8; // 客人列表 当前同步回来的客人 新客人直 接走客人同步
    repeated NewStoreResCollector ResCollectors = 9; // 资源采集值 所有客人收入会先入这里 后续点击统一收入 进入店铺的时候 需要刷新 离线收益也会存入
    repeated NewStoreAttrData AttrDatas 				= 10; // 属性值数组(3.0+)
    repeated CookBookInfo CookBookInfos         = 11; // 菜谱等级信息 如果有就表示解锁了(3.0+)
    int32 ExtendLevel                           = 12; // 扩建等级 默认1
    NewStoreGreeter Greeter                     = 13; // 揽客牛牛
}

// 店铺招待(揽客)  上限直接读常量表
message NewStoreGreeter {
    int32 Times 			    = 1; // 剩余可使用次数
    int64 NextRefreshTime = 2; // 下次刷新次数时间 times==0才会返回 用于倒计时
}

message NewStoreGreeterStoreInfo {
    int32 Id 								 = 1; // 店铺ID
    NewStoreGreeter Greeter  = 2; // 揽客牛牛
}

// 揽客请求客人
message NewStoreGreeterCustomerReq {
    int32 Id 								 = 1; // 店铺ID
}

message CookBookInfo {
    int32 CookBookId  = 1; // 菜谱ID
    int32 Level			  = 2; // 等级,解锁的菜谱默认1级,并且会同步新菜谱CookBookInfo信息
}

message NewStoreResCollector {
    int32 ResId       = 1; // 资源类型 查看道具表 两种资源
    int32 CustomerNum = 2; // 服务客人数量 用于显示
    int64 ResValue		= 3; // 资源值 用于真实收集到的数值
    int64 StartTime   = 4; // 资源计算开始时间 用于计算最大上限的时间
}

enum NewStoreCustomerStage {
    NewStoreCustomerStageLine    = 0; // 排队 未进店 这个时候 没有离店时间
    NewStoreCustomerStageGetIn   = 1; // 进店了 等待上餐 进店的时候发送 表示进店开始等待上餐 不管是否座位
    NewStoreCustomerStageServer  = 2; // 已经被服务了 表示这个客人走的时候会结算钱 否则就直接走
}

message NewStoreCustomer {
    int64 CustomerId 				    = 1; // 客人唯一ID 为了统一后续的客人ID 唯一ID统一为CustomerId
    int32 BaseId  					    = 2; // 客人形象ID 配置ID 修改为baseID
    NewStoreCustomerStage Stage = 3; // 客人阶段 发放客人都是0 后续客人上报状态 必须按照 1->2 的顺序上报
    int64 LeaveTs               = 4; // 这个客人需要离开的时间
    int32 Flag                  = 5; // flag==0 表示正常客人 1==新手引导的客人 只会在第一次注册的时候刷新2个
}

message NewStorePointPos {
    int32 Id    									 = 1; // 点位ID, 全局唯一ID 配表
    int32 StaffID									 = 2; // 上阵雇员ID 0=没有雇员 >0=>雇员ID 没有机器人 也没有点位类型
    bool Unlock                    = 3; // 是否解锁 false=没有解锁(请求req里不需要带)
    bool Bought                    = 4; // 是否已购买 购买过的才能上雇员(请求req里不需要带)
}

// 请求数据里不用传递unlock
message NewStoreCookBookSlot {
    int32 Index      	= 1; // 槽位index 就从1-4 数组下标+1就行 如果没有CookBookId的 不会返回
    int32 CookBookId  = 2; // 菜谱ID
}

enum NewStoreObjectType {
    NewStoreObjectTypeNone  = 0;
    NewStoreObjectTypeEquip = 1; // 设备
    NewStoreObjectTypeDecor = 2; // 装饰
}

enum NewStorePhyLayer {
    NewStorePhyLayerNone 					= 0;
    NewStorePhyLayerFloor 				= 1; // 地面 主要用于地板装饰
    NewStorePhyLayerWall 					= 2; // 墙面 主要用于墙纸装饰
    NewStorePhyLayerOverGround 		= 3; // 地上物品 设备和装饰物品
    NewStorePhyLayerOverWallLeft 	= 4; // 墙上物品 装饰物品 左边墙上
    NewStorePhyLayerOverWallRight = 5; // 墙上物品 装饰物品 右边墙上
    NewStorePhyLayerOnObject      = 6; // 叠在其他物品上
}

// (3.0+)
// 店铺放置物品(设备/装饰) 主要是能放置到店铺中
// 1. 当设备解锁后, 会进入到对应的设备列表中 包含了放置和所有解锁的设备
// 2. 装饰物在同一的装饰背包里. 如果放置了 则按照放置的数量计算可放置数量
message NewStoreObject {
    NewStoreObjectType Type 		= 1;
    int64 EntityId              = 2; // 物品唯一ID 个人物品ID会全局生成唯一
    int32 Id 										= 3; // 配置ID
    bool Own 										= 4; // 是否拥有, 设备解锁即存在, 但是购买后才能算own 可以不放置
    NewStorePhyLayer PlaceLayer = 5; // 放置的层 会按照具体层进行坐标计算
    TilePos  LBPos   					  = 6; // 对角坐标1
    TilePos  RTPos   					  = 7; // 对角坐标2
    int32 SkinId								= 8; // 皮肤ID
	// 下面是客户端透传的数据 不做处理 纯返回
    int32    Side      		  	  = 9; // 朝向 客户端自定义
    TilePos  SrcPos   				  = 10; // 家具中心点坐标，始终用来同步，不改置
    int32    OldEntityID			 	= 11; // 客户端使用 原来接口的实体ID
    bool Placed                 = 12; // 是否放置在店铺中(如果没有在店铺中,可以放置)
    int32 Level                 = 13; // 特殊设备等级,只有属性加成设备才能升级,影响对应配置属性的加成
    int64 ParentId              = 14; // NewStorePhyLayerOnObject的装饰物品才有, 表示在某个Object上面. 这样pos相关的信息 都是相对parent的位置
}

// 获取店铺信息 这里不会对店铺进行离线收益计算和客人实时状态 只有切换店铺online状态才会
message GetUserNewStoreDataReq {
    int64 UserId  = 1; // 请求user 如果是自己 就传0即可 后面可能需要传别人
    int32 StoreId = 2; // 店铺ID
}

message UserNewStoreDataInfo {
    int64 UserId  		= 1; // 店铺对应的玩家ID 为0就是自己
    NewStoreData data = 2; // 店铺信息
}

message NewStoreRenameReq {
    int32 Id 		= 1;
    string Name = 2;
}

message NewStoreRenameAck {
    int32 Id 		= 1;
    string Name = 2;
}

message NewStoreSetCookBookReq {
    int32 StoreId 										 					= 1; // 店铺ID
	// 上阵的槽位信息 传每个index=1,2,3,4对应的菜品ID ID=0表示去掉了
	// 必须传所有的index 1-4 cookID可以为0 表示取下
    repeated NewStoreCookBookSlot CookBookSlots = 2;
}

message NewStoreSetCookBookAck {
    int32 StoreId 										 					= 1; // 返回req的参数
    repeated NewStoreCookBookSlot CookBookSlots = 2; // 返回req的参数
}

// NewStorePointPos里只传ID和雇员ID
message NewStoreSetPosReq {
    int32 StoreId 										 = 1; // 店铺ID
    NewStorePointPos PointPos          = 2; // 点位信息 change的点位 只传变动的即可
}

message NewStoreSetPosAck {
    repeated NewStoreSetPosData datas = 1;
}

message NewStoreSetPosData {
    int32 StoreId 										 = 1; // 返回req的参数
    NewStorePointPos PointPos          = 2; // 返回req的参数
}

// 评级  任务的进度走统一的任务逻辑 在确认任务都满足后 可请求升级请求
message NewStoreUpGradeReq {
    int32 StoreId 										 = 1; // 店铺ID
}

message NewStoreUpGradeAck {
    int32 StoreId 										 = 1; // 店铺ID
    int32 Grade 								       = 2; // 评级后的等级
    repeated NewStoreObject Equips     = 3; // 解锁的设备
}

// 新客户推送
message SyncNewStoreCustomerNtf {
    int32 StoreId 											= 1; // 店铺ID
    repeated NewStoreCustomer Customers = 2; // 客人信息
}

// 这个协议改成设置客人阶段 从stage=1开始 设置1表示进店 设置2表示服务了
message NewStoreCustomerStageOperReq {
    int32 StoreId 							= 1; // 店铺ID
    int64 CustomerId 						= 2; // 客人ID
    int32 Auto									= 3; // 0=手动 1=自动
    NewStoreCustomerStage Stage = 4; // 1=进店 2=服务
}

message NewStoreCustomerStageOperAck {
    int32 StoreId 							= 1; // 店铺ID
    int64 CustomerId 						= 2; // 客人ID
    NewStoreCustomerStage Stage = 3; // 客人下一个阶段
    int64 LeaveTs               = 4; // 这个客人需要离开的时间(后续都会给)
}

// 客人未操作前的强行离开请求 客户端发送消息
message NewStoreCustomerForceLeaveReq {
    int32 StoreId 							= 1; // 店铺ID
    int64 CustomerId 						= 2; // 客人ID
}

// 回复请求的数据
message NewStoreCustomerForceLeaveAck {
    int32 StoreId 															= 1; // 店铺ID
    int64 CustomerId 														= 2; // 客人ID
    repeated NewStoreResCollector Res           = 3; // 客人的资源产出(没有产生收益的客人直接为空的)
}


enum NewStorePlaceObjectAction {
    NewStorePlaceObjectActionPlace  = 0; // 添加摆放
    NewStorePlaceObjectActionMove   = 1; // 移动
    NewStorePlaceObjectActionRemove = 2; // 收回(只有装饰才能收回)
    NewStorePlaceObjectActionSkin   = 3; // 换皮肤 只有设备并且已经购买放置才能切换 如果使用批量修改的协议 就可以不用这个action
}

message NewStorePlaceObjectReq {
    NewStorePlaceObjectAction Action = 1; // 操作类型 默认是摆放==0/购买摆放/二次摆放
    int32 StoreId 									 = 2; // 店铺ID
    NewStoreObject Object						 = 3; // 放置的物品 不用传own 如果是换肤 就传ID和skinID即可
    bool Buy						 						 = 4; // 设备摆放的同时 需要购买/二次摆放需要buy=false
    bool Place                       = 5; // 设备是否摆放(配合buy, 可以只购买, 不摆放)/二次摆放必须设置为true
}

// 数据同步返回 如果不可放 会通用返回失败
message NewStorePlaceObjectAck {
    NewStorePlaceObjectAction Action = 1; // 操作类型 默认是摆放==0
    int32 StoreId 								   = 2; // 店铺ID
    NewStoreObject Object 				   = 3; // 放置的物品 成功后直接放回 购买成功后会带own,摆放成功的会带有Placed
    bool Buy						   				   = 4; // 未获得的设备同步购买 会判断消耗
    NewStoreObject PutBackObject     = 5; // 被放回的物品(只会带type和ID) 比如装饰的墙纸和地板 会因为替换而去掉放置 其他情况为nil 只为了做库存计算判断可用
}

// 收取资源点的数据 直接显示置为0即可 会有其他协议推送资源点数据变动
message NewStoreCollectResStockReq {
    int32 StoreId = 1; // 店铺ID
    int32 Count   = 2; // 自定义收取个数
}

message NewStoreCollectResStockAck {
    int32 StoreId 			= 1; // 店铺ID
    int32 Count					= 2; // 自定义收取个数(请求的参数回复)
    int64 StartTime     = 3; // 资源计算开始时间 用于计算最大上限的时间 当收取完全的时候会重置 其他时间不会重置
}

message NewStoreCreateCustomerReq {
    int32 StoreId 			= 1; // 店铺ID
}

message NewStoreCreateCustomerAck {
    int32 StoreId 			  = 1; // 店铺ID
    int32 Result 					= 2; // 0=成功 (成功会推送客人信息 不在这里回复)	1=失败
    int64 NextCustomerTs 	= 3; // 下一个客人来的时间 现在这个点不对
    bool  Full					  = 4; // 是否是满了客人 如果满了 上面的ts可能=0
}

// 进入自己的店铺 需要使用这个协议 看别人的店铺直接使用获取店铺信息即可
message NewStoreEnterStoreSceneReq {
    int32 StoreId = 1; // 店铺ID
}

// 返回进入的店铺ID 表示切换完成了 店铺info的online信息会变动
// 只会有一个店铺会online 请记录当前online的店铺 从其他界面回来的时候 需要重新进入指定的店铺
message NewStoreEnterStoreSceneAck {
    NewStoreData data = 1; // 店铺信息 这里会重新计算收益信息和客人信息
}

// 在获得收益的时候 会推送资源点信息 点击资源获取的时候不会推送 根据点击 自己清空即可
// 在店铺切换的时候 也会同步资源点信息
message SyncNewStoreResCollectorNtf {
    int32 StoreId 													 = 1; // 店铺ID
    repeated NewStoreResCollector Collectors = 2; // 资源点信息
}

enum NewStoreAttr {
    NewStoreAttrNone 		 = 0;
    NewStoreAttrCustomPerMin = 1; // 每分钟来客人次(来客速度)
    NewStoreAttrMaxOffCount  = 2; // 最大挂机人次(挂机人次)
    NewStoreAttrServerPerMin = 3; // 每分钟服务人次(员工效率)
}

message NewStoreAttrData {
    NewStoreAttr AttrType = 1; // 属性类型
    int32 Level           = 2; // (弃用)等级 默认开始是1级
    int64 Value           = 3; // 根据属性类型和配置返回相关的数值(小数,%的都是万分位)
}

message NewStoreAttrUpgradeReq {
    int32 StoreId    			= 1; // 店铺ID
    NewStoreAttr AttrType = 2; // 属性类型 (自动等级+1)
}

message NewStoreAttrUpgradeAck {
    int32 StoreId    					= 1; // 店铺ID
    NewStoreAttrData AttrData = 2; // 属性数据 直接这个更新 跟店铺下发数据一致
}

// 店铺事务信息推送 如果没有任何的事务 会推送下次的时间
message SyncNewStoreEventsNtf {
    repeated NewStoreEvent Events = 1; // 现在的事务和新的事务推送
    int64 NextEventTs             = 2; // 下次事务的推送时间 如果没有事务会推送
    int64 MaxNum                  = 3; // 最大事务数量 每次都会带
}

message NewStoreEvent {
    int64 Id 											 = 1; // 唯一ID 用于交互信息
    int32 StoreId   							 = 2; // 店铺ID
    int32 StaffID									 = 3; // 雇员ID 一定有 当前定位的雇员
    int32 EventId                  = 4; // 事件配置ID 因为奖励是动态的 直接读表 不返回奖励信息
}

// 一键处理 可以不用带任何参数 表示都是0
message NewStoreEventHandleReq {
    int64 Id 		 = 1; // 唯一ID 用于交互信息 id = 0 表示一键处理 即可以不传这两个参数
    int32 Option = 2; // 选择奖励的下标 index=0开始 即选择第一个 一键处理默认0选择第一个
}

message NewStoreEventHandleAck {
    int64 Id 							= 1; // 请求发送的消息 如果==0 一键处理 则自行删除本地所有即可
    int64 NextEventTs     = 2; // 下次事务的推送时间 如果没有事务会推送
}

// 请求这个就一定是成功做菜之后的请求 只有食材不足的情况会返回通用失败
message NewStoreCookbookUnlockReq {
    int32 CookBookId      = 1; // 菜谱ID
    repeated int32 FoodId = 2; // 食材ID
}

// 菜谱解锁回复
message NewStoreCookbookUnlockAck {
    bool Result 								 							= 1; // 是否解锁成功
    int32 CookbookId      			 							= 2; // 菜谱ID
    repeated int32 FoodId 			 							= 3; // 正确的食材ID
    int32 Level			  					 							= 4; // 解锁成功后的等级==1 默认1级
    repeated NewStoreResIncomeData OldIncome 	= 5; // 解锁前的收益
    repeated NewStoreResIncomeData ResIncome 	= 6; // 解锁后的收益
}

message GetCookbookBingoRecipeAck {
    repeated CookbookBingoRecipeInfo List = 1; // 菜谱食谱信息列表
}

// 菜谱的拼图信息
message CookbookBingoRecipeInfo {
    int32 CookbookId      = 1; // 菜谱ID
    repeated int32 FoodId = 2; // 正确的食材ID
}


// 店铺扩店升级
message NewStoreExtendUpgradeReq {
    int32 StoreId 											= 1; // 店铺ID
    repeated NewStoreObject Objects 	  = 2; // 扩店以后,需要更换位置的店铺内的物品新的信息(如果有就传,只接受位置的变动,放置在设备上的装饰不需要变动)
}

message NewStoreExtendUpgradeAck {
    int32 StoreId 			             			= 1; // 店铺ID
    int32 ExtendLevel 	             			= 2; // 扩建等级 返回升级后的等级
    repeated NewStoreObject Objects  			= 3; // 请求的返回
    repeated NewStoreObject UnlockEquips  = 4; // 解锁的设备
}

message NewStoreCookbookUpgradeReq {
    int32 CookBookId  = 1; // 菜谱ID
    int32 StoreId     = 2; // 店铺ID
}

message NewStoreCookbookUpgradeAck {
    int32 CookBookId  = 1; // 菜谱ID
    int32 StoreId     = 2; // 店铺ID
    int32 Level			  = 3; // 等级,升级后的等级
}

message NewStorePointPosBuyReq {
    int32 StoreId 			= 1; // 店铺ID
    int32 Id    			  = 2; // 点位ID, 全局唯一ID 配表
}

// 请求的参数返回
message NewStorePointPosBuyAck {
    int32 StoreId 			= 1; // 店铺ID
    int32 Id    			  = 2; // 点位ID, 全局唯一ID 配表
}

message NewStoreAttrEquipUpgradeReq {
    int32 StoreId 			= 1; // 店铺ID
    int32 Id            = 2; // 设备配置ID(设备配置唯一)
}

message NewStoreAttrEquipUpgradeAck {
    int32 StoreId 			= 1; // 店铺ID
    int32 Id            = 2; // 设备配置ID(设备配置唯一)
    int32 Level         = 3; // 特殊设备等级,只有属性加成设备才能升级,影响对应配置属性的加成
    int64 Value         = 4; // 升级后对应属性变动后的值 只做刷新展示 真实值请通过SyncNewStoreAttrNtf下发处理
}

// 在线新增推送 一般情况下一次只有一个
message SyncNewStoreAffairsNtf {
    repeated NewStoreAffair  Affairs  = 1; // 店铺事件
}

// 有造成属性变动的行为(设备,装饰,其他...)会进行推送, 仅推送变动的属性.
message SyncNewStoreAttrNtf {
    repeated NewStoreAttrData AttrDatas  = 1; // 属性值数组
    int32 StoreId 											 = 2; // 店铺ID(需要店铺ID)
}

// 可通用批量和全部,单个皮肤的替换也可以用这个协议
message NewStoreMultiChangeSkinReq {
    int32 StoreId              = 1; // 店铺ID
    int32 SkinId               = 2; // 皮肤ID
    repeated int64 EntityIds   = 3; // 设备唯一ID列表(在店铺内的所有同类设备的ID) 统一换到皮肤ID
}

// 请求参数全数返回
message NewStoreMultiChangeSkinAck {
    int32 StoreId              = 1; // 店铺ID
    int32 SkinId               = 2; // 皮肤ID
    repeated int64 EntityIds   = 3; // 设备唯一ID列表(在店铺内的所有同类设备的ID) 统一换到皮肤ID
}

message NewStoreHarvestInfo {
    int32 StoreId     = 1; // 店铺ID
    int32 CustomerNum = 2; // 服务客人数量
}

message NewStoreGetAllHarvestInfoAck {
    repeated NewStoreHarvestInfo infos = 1; // 店铺ID和对应的显示人数(不关心资源数, 收取按照通用下发, 一键收取直接全部清零就行)
}

message SyncNewStoreDecoItemNtf {
    repeated UserNewStoreDecoItem DecoItems = 1; // 同步新的装饰数据(可能多个)
}

message NewStoreMarryChildAppointAck {
    int64 Id 			= 1; // childID 子嗣ID 请求的回复ID
    int32 StoreId = 2; // 店铺ID 分配到的店铺ID(店铺数据变动由店铺处理)
}


// =========== 店铺3.0 OVER ============

// 公用 string:int key=>value 结构
message CommonStrKV {
    string Key  = 1;
    int64 Value = 2;
}

// 公用 int:int key=>value 结构
message CommonIntKV {
    int32 Key   = 1;
    int64 Value = 2;
}

// 任务模块类型
enum TaskModeType {
    TaskModeTypeNone 					= 0;
    TaskModeTypeMain 					= 1; // 主线
    TaskModeTypeDaily 				= 2; // 每日
    TaskModeTypeAchievement 	= 3; // 成就
    TaskModeTypeStoreGrade  	= 4; // 店铺评级任务
    TaskModeTypeLoginTask   	= 5; // 登录任务(七日签到)
    TaskModeTypeActivityTask  = 6; // 活动任务
    TaskModeTypeCard  				= 7; // 卡牌任务
    TaskModeTypeServerTask  	= 8; // 全服任务
    TaskModeTypeSevenDayTask  = 9; // 7日任务
    TaskModeTypeUnlockTask  	= 10; // 模块解锁类型任务(及时类)
}


message TaskPoolInfo {
    TaskModeType Type = 1; // 任务类型
    int32 TaskId 	 		= 2; // 任务池的任务id
    int64 Progress 		= 3; // 任务进度
    bool  Get 		 		= 4; // 是否领取
}

message TaskPoolInfoList {
    repeated TaskPoolInfo TaskPools = 1; // 任务
}

// 任务进度数据
message TaskProgressData {
    repeated CommonStrKV Progress = 1; // key为定义的枚举值
}

enum MainTaskStatus {
    MainTaskStatusNone 		= 0;
    MainTaskStatusProceed = 1; // 进行中
    MainTaskStatusFinish 	= 2; // 全部完成
}

message MainTaskInfo {
    int32 MainTaskId 			= 1; // 领取过后，用户当前的主线任务ID
    MainTaskStatus Status = 2; // 主线任务状态
}

message TaskReceiveId {
    TaskModeType Type = 1; // 领取任务类型
    int32 			Id 	  = 2; // 领取任务id
}

message TaskReceiveIds {
    repeated TaskReceiveId Ids = 1;
}

// 任务领取
message TaskGetReq {
    repeated int32 	Ids = 1; // 任务id
    TaskModeType 		Type = 2; // 任务类型
}

// 每日任务数据
message DailyTaskData {
    repeated int32 Tasks 	= 1; // 任务列表
}

message DailyTaskGetReq {
    repeated int32 ids = 1; // 领取的任务id
}

message LimitTaskGet {
    repeated int32 	Ids 	= 1; // 领取的任务id
    TaskModeType 		Type 	= 2; // 任务类型
    repeated int32 	Args 	= 3; // 额外参数，活动模块的时候，传活动id，[201]
}

// 全服先达任务
message ServerHeadTask {
    int32 Id 									   = 1; // 全服任务的ID
    repeated SimpleUser TopUsers = 2; // 先达的用户的信息(按顺序) // check自己是否在里面 判断领取
}

// 登录推送全量, 有变动推送变动
message SyncServerTaskNtf {
    repeated ServerHeadTask HeadTaskList = 1; // 全服先达任务的列表
}

// 新手引导信息
message GuideInfo {
    int32 TriggerId 					= 1; // 事件id，
    int32 GuideId  						= 2; // 步骤id
    repeated int32 TriggerIds = 3; // 已完成的事件id列表
}

message GuideReport {
    int32 TriggerId = 1; // 事件id，
    int32 GuideId  	= 2; // 步骤id
    bool  Finish    = 3; // 是否完成
}

// ============= 活动相关协议 ================

// 活动信息同步 如果不能参加的活动 是不会返回的
// 通用活动信息返回 具体的活动信息 在具体活动数据获取
// 登录的时候会同步  状态改变的时候会同步 这个activity是固定活动信息 运营活动走新协议
message SyncActivityListNtf {
    repeated ActivityInfo Activities = 1; // 活动同步 移除的活动id的info会把stage置置为ActivityStageNone
    repeated int32 RemoveIds         = 2; // 活动移除的id列表 表示活动结束了 不用显示 也可以不处理 点击的时候就显示活动已结束就行
}

enum ActivityStage {
    ActivityStageNone   = 0; // 未开启/结束的状态 表示整个活动不可用
    ActivityStageClosed = 1; // 关闭状态
    ActivityStageOpen   = 2; // 开放状态
    ActivityStageSettle = 3; // 结算状态
    ActivityStageAward  = 4; // 领奖期状态
}

// 活动的状态说明:
// 1. 未开启(开启是指活动可以看到, 没有开启的活动不会下发)
// 2. 关闭(活动某些功能不能使用,没有正式开放功能, 比如预告期在开放之前,或者活动开放期过了,活动关闭功能等待结算)
// 3. 开放(功能开放可以使用)
// 4. 结算中(基本所有功能不能使用结算数据)
// 5. 领奖期(可以领取结算后的奖励)
// 6. 活动结束(未开启, 同1)
// 7. 2-5的状态可能会来还切换 不一定是线性的到结束
// 固定活动直接读表去处理时间 不会下发时间相关 只有在具体时间到的时候下发状态更改
message ActivityInfo {
    int32 Id 					  				= 1; // 活动ID
    ActivityStage Stage 				= 2; // 状态
    ActivityComponent Component = 3; // 活动组件
    int64 Version               = 4; // 版本(客户端可以不关心)
    bool RedDot									= 5; // 入口是否有红点
    int64 EndTime								= 6; // 结束时间
}

message ActivityComponent {
    ActivityRanks Ranks = 1; // 活动排行榜
	// TODO 后续其他的活动任务/活动商店/...等在组件里配置
}

// 活动的排行榜不跟活动其他相关 后续只按照活动ID和排行榜的key获取数据
message ActivityRanks {
    repeated ActivityRankKeyData RankKeyDatas = 1; // 排行榜keydata信息
	// 1. 分店排行榜 就是 1.1-1.7 表示从1-7的店铺 具体的店铺显示 直接读取店铺的表
    bool  Award              = 2; // 是否有奖励没有领 用于在外部判断是否可以领奖 true=有 false=没有
}

message ActivityRankKeyData {
    int32 RankId    = 1; // 排行榜配置ID 主要用来适配动态数据 其实从活动配置里就可以读取到的
    string RankKey  = 2; // 排行榜key 请根据配置的活动类型 进行活动排行榜的展示效果 基本结构是 "活动ID.功能ID"
}


// 排行榜预览数据获取 即活动所有排行榜的TOP1信息
message GetActivityRankPreviewReq {
    int32 ActivityId  = 1; // 活动ID 只传活动ID即可
}

message GetActivityRankPreviewAck {
    int32 ActivityId  													 = 1; // 活动ID
    repeated ActivityRankPreviewData PreviewData = 2; // 预览数据
}

message ActivityRankPreviewData {
    ActivityRankKeyData RankKeyData  	= 1; // 排行榜Key信息
    RankingUser Top  					   			= 2; // 排行榜top1的数据
    int32  AwardStatus                = 3; // 奖励状态 0=没有奖励 1=有奖励未领取 2=有奖励已领取
}

// 获取活动排行榜信息
message GetActivityRankListReq {
    int32 ActivityId  = 1; // 活动ID
    string RankKey    = 2; // 排行榜Key 在活动返回数据里或者配置里返回 一般是[活动ID+期数+排行榜ID]
    int32  Num 			  = 3; // 榜单数量，拉取前多少个排名
}

// 获取活动排行榜信息
message GetActivityRankListAck {
    int32 ActivityId 											= 1; // 活动ID
    ActivityRankKeyData RankKeyData   		= 2; // 排行榜Keydata
    repeated RankingUser RankUsers 				= 3; // 排行榜数据
    bool								 IsInRank					=	4; // 是否进榜 (进榜的情况下，客户端根据ranking数据判断排名显示)
    RankingUser 				 OneSelf  				= 5; // 玩家自己的数值，根据条件不同，可能为空(就是为入榜)
    int32  AwardStatus                    = 6; // 奖励状态 0=没有奖励 1=有奖励未领取 2=有奖励已领取
}

// 奖励会通过通用推送发放
message ActivityRankAwardReq {
    int32 ActivityId = 1; // 活动ID
    bool All         = 2; // 是否领取全部奖励 true=领取全部 false=领取单个 false需要传RankKey
    string RankKey   = 3; // 排行榜ID 在活动返回数据里或者配置里返回 一般是[活动ID+期数+排行榜ID]
}

// 就回复了传递的参数
message ActivityRankAwardAck {
    int32 ActivityId  							= 1; // 活动ID
    bool All          							= 2; // 是否领取全部奖励 true=领取全部 false=领取单个 true将不会返回下面的信息(RankKey,RankAwardId)
    string RankKey   								= 3; // 排行榜ID 在活动返回数据里或者配置里返回 一般是[活动ID+期数+排行榜ID]
}

// 请在打开页面的时候请求一次随后在游戏内 每5-10秒请求一次
message GetActivityDailyWorldBossStatusReq {
    int32 ActivityID  = 1; // 活动ID
}

// 1. 使用GetReq会同步 2. BOSS挂掉会同步 3. 活动结束会同步
message SyncActivityDailyWorldBossStatusNtf {
    int32 ActivityID                            = 1; // 活动ID
    int32 Status                                = 2; // 1=开启中 BOSS活着 2=BOSS死了/结算中 3=结束 (结束的时候通用活动也会推送活动结束 所以状态3可以不用处理)
    int64 MaxHp                                 = 3; // BOSS最大血量 就是一开始的血量 用于计算%
    int64 Hp                                    = 4; // BOSS的当前血量 hp==0 就是死掉了
    ActivityDailyWorldBossSettleInfo SettleInfo = 5; // 只有状态2的情况下才会出现结算信息
    int32 BossLevel                             = 6; // BOSS等级 配表相关
}

// 世界BOSS结算信息
message ActivityDailyWorldBossSettleInfo {
    bool Finish     		= 1; // 是否结算完成 可能还在结算中...
    SimpleUser MvpUser  = 2; // mvp
    int64 MvpDamage 		= 3; // mvp的伤害
    int32 Rank          = 4; // 我的名次 rank=0 表示没有我
    int64 Points        = 5; // 我获得的积分 没有名次 也没有我 points=0
}

// 每日世界BOSS进行fight请求
message ActivityDailyWorldBossFightReq {
    int32 ActivityID  = 1; // 活动ID
    int32 EmployeeID  = 2; // 上阵雇员ID
}

// 每日世界BOSS进行fight返回  积分和代币的获得走通用获得提示
message ActivityDailyWorldBossFightAck {
    bool Result       = 1; // result==true 表示这次的进攻是有效的 其他的情况比如(活动已经结束,体力不足会通过通用报错返回. 这里仅提供比如BOSS血量==0的情况 这个情况不需要报错)
    int32 ActivityID  = 2; // 活动ID
    int32 EmployeeID  = 3; // 上阵雇员ID
    int64 Hp          = 4; // BOSS的剩余血量 hp==0 就是死掉了
    int64 Damage      = 5; // 当前的伤害
    int32 BossLevel   = 6; // bossLevel
}

// 每日世界BOSS高伤害推送
message SyncActivityDailyWorldBossDamageNtf {
    int32 ActivityID  = 1; // 活动ID
    int64 Uid         = 2; // uid
    string Name       = 3; // name
    int64 Damage      = 4; // 伤害
}

// 同步活动中雇员状态 如果使用了道具 会通过这个协议同步新的信息 对应活动取对应activityID的数据即可
// 登录的第一次和使用道具同步
message SyncActivityFightUserEmployeeStatusNtf {
    repeated ActivityFightUserEmployeeStatusData Datas = 1;
}

message ActivityFightUserEmployeeStatusData {
    int32 ActivityID                   = 1; // 活动ID
    repeated int32 CooldownEmployeeIds = 2; // 冷却中的雇员IDS(上过阵的)
    int64 NextResetTs                  = 3; // 冷却到下一次刷新的时间戳(ts 秒) 不显示可以不使用
}

// 活动相关的通用请求 后续按照其他协议给出op操作和参数说明 操作结构根据op去接入ack的回调协议
message ActivityCommonOperReq {
    int32 ActivityID     = 1; // 活动ID
    int32 Op             = 2; // 操作类型 具体查看后续的协议说明
    repeated string Args = 3; // 操作参数 为了满足扩展string 直接按照string来做参数传递
}

// 竞技场个人数据下发 请使用op=1请求 会进行下发
message SyncActivityArenaInfoNtf {
    int32 ActivityID     						 = 1;
    int32 Score   			 						 = 2; // 当前赛季积分 每日不清零 赛季结算清零
    int64 EndTime 			 						 = 3; // 赛季结束时间
    int32 FreeFightTimes 						 = 4; // 免费战斗已经使用的次数 max-他=剩余 每日清零
    ActivityArenaMatchInfo MatchInfo = 5; // 匹配信息 如果没有 表示没有在匹配状态 (跨天重置)
    int32 LeftItemFightTimes         = 6; // 道具参赛剩余次数 目前上限为1 并且只在有免费次数没有情况下
}

// 竞技场匹配信息下发
message ActivityArenaMatchInfo {
    int32 EmployeeID  										  = 1; // 上阵雇员
    int64 Power       										  = 2; // 战力属性(基础值)
    int32 buffTimes   										  = 3; // 额外buff已买次数
    int32 buffPlus    										  = 4; // buff加成比例(万分位)
    repeated ActivityArenaPlayer Competitor = 5; // 对手列表
}

// 竞技场对手信息
message ActivityArenaPlayer {
    SimpleUser User = 1; // 玩家信息
    int32 Score     = 2; // 积分
    int64 Power     = 3; // 战力属性(雇员总值)
    int32 ScorePlus = 4; // 积分加成(万分位)
}

// 竞技场匹配成功的匹配信息
message SyncActivityArenaMatchNtf {
    int32 ActivityID     						 = 1;
    ActivityArenaMatchInfo MatchInfo = 2; // 匹配信息
}

// 竞技场购买BUFF回复
message ActivityArenaBuyBuffAck {
    int32 ActivityID     = 1;
    int32 buffTimes   	 = 2; // 额外buff已买次数
    int32 buffPlus    	 = 3; // buff加成比例(万分位)
}

// 竞技场战斗结算信息
message SyncActivityArenaFightNtf {
    int32 ActivityID                      = 1; // 活动ID
    int64	TargetUserID	                  = 2; // 对手UID
    repeated SimpleEmployeeInfo Employees = 3; // 雇员数据
    int32 Win                             = 4; // 胜利场次
    int32 Score                           = 5; // 获得积分
    int32 RankScore                       = 6; // 当前的总积分(可用于更新)
    int32 FightEmployeeID                 = 7; // 出战雇员ID
    int64 Power                           = 8; // 出战雇员总战力
}

// 竞技场战斗记录 uid相关请结合List发送中的userInfos来解析
message ActivityArenaFightLog {
    int64 FightLogID  = 1; // 日志ID (日志ID大的排前面,即越后的排前面)
    int64 AttackerUid = 2; // 进攻者UID
    int64 DefenseUid  = 3; // 防守者UID
    int32 EmployeeID  = 4; // 出阵雇员
    bool Complete     = 5; // 全胜
    int32 Win         = 6; // 胜场
    int64 Timestamp   = 7; // 战斗时间戳(秒)
}

// 因为可能在多个log有相同的user信息 所以userInfos单独发送
message SyncActivityArenaFightLogNtf {
    int32 ActivityId  									= 1; // 活动ID
    repeated ActivityArenaFightLog Logs = 2; // 战斗记录
    repeated SimpleUser UserInfos 			= 3; // 玩家信息
}

// 获取活动用户排名 可以用来做获取自己的排名信息 也可以用来做获取别人的排名信息
message GetActivityUserRankReq {
    int32 ActivityId  = 1; // 活动ID
    string RankKey    = 2; // 排行榜Key 在活动返回数据里有key信息
    int64 Uid         = 3; // 玩家UID(默认==0 不传 就是获取自己的)
}

message GetActivityUserRankAck {
    int32 ActivityId  = 1; // 活动ID
    string RankKey    = 2; // 排行榜Key 在活动返回数据里有key信息
    int64 Uid         = 3; // 玩家UID(默认==0 不传 就是获取自己的)
    int32 Rank        = 4; // 排名 0==没有入榜 1==第一名
    int64 Value    	  = 5; // 分数(跟LIST统一)
    SimpleUser User   = 6; // 如果是获取的不是自己, 则返回一个玩家信息
}

// 道具使用 参赛都有可能推送这个信息 全量信息 直接替换对应数据信息
message SyncActivityArenaMatchTimesNtf {
    int32 ActivityId  			 = 1; // 活动ID
    int32 FreeFightTimes 		 = 2; // 免费战斗已经使用的次数 max-他=剩余 每日清零
    int32 LeftItemFightTimes = 3; // 道具参赛剩余次数 目前上限为1 并且只在有免费次数没有情况下
}

message SyncActivityHuntHorseInfoNtf {
    int32 ActivityId  			 = 1; // 活动ID
    int32 Id 								 = 2; // 马儿的ID 表里从1开始 id==0并且hp==0表示都死完了
    int64 Hp 								 = 3; // 剩余HP 最大HP读表
}

message ActivityHuntHorseFightAck {
    int32 ActivityId  			 			 								 = 1; // 活动ID
    repeated ActivityHuntHorseFightDetail Details  = 2; // 明细
}

message ActivityHuntHorseFightDetail {
    int32 EmpId 	= 1; // 雇员ID
    int64 Damage 	= 2; // 伤害
    int32 Id 		  = 3; // (打的)马儿的ID(打的)
    int64 Hp 		  = 4; // (打的)剩余HP(打死的剩余==0)
}



message ActivityGiftPackBuyReq {
    int32  ActivityID = 1;
    int32  PackID     = 2; // 礼包id
}

message ActivityMiniGameStageInfo {
    int32 Stage = 1; // 当前阶段，依次累加
    int32 Score = 2; // 当前阶段的积分
}

message ActivityMiniGameEnergyInfo {
    int32 Energy      = 1; // 当前体力值
    int32 MaxEnergy   = 2; // 最大体力值
    int64 StartTime  	= 3; // 冷却开始时间
    int64 Interval   	= 4; // 冷却间隔时间 恢复一次的时间 单位秒
}

message ActivityMiniGameInfo {
    int32                   		ActivityID    = 1;
    int64                   		Score         = 2; // 总积分
    int64                   		CurrentScore  = 3; // 当前积分
    string          						GameData      = 4; // 游戏数据，后续小游戏通用
    ActivityMiniGameEnergyInfo  Energy        = 5; // 体力数据
    ActivityMiniGameStageInfo		Stage					= 6; // 阶段信息
}

//  小游戏活动信息推送
message SyncActivityMiniGameInfoNtf {
    repeated ActivityMiniGameInfo Games = 1;
}

// 数据上报请求，走一步上报一次
message ActivityMiniGameReportReq {
    int32  ActivityID    = 1;
    int64  Score  			 = 2; // 当前步骤获得积分
    string GameData      = 3; // 游戏数据，后续小游戏通用
    int32  Multiple      = 4; // 倍数
    bool 	 Start				 = 5; // 开始当局游戏(用于初始化数据)
}

message ActivityMiniGameReportAck {
    int32                   		ActivityID    = 1;
    int64                   		Score         = 2; // 总积分
    int64                   		CurrentScore  = 3; // 当前积分
    string          						GameData      = 4; // 游戏数据，后续小游戏通用
    ActivityMiniGameEnergyInfo  Energy        = 5; // 体力数据
    ActivityMiniGameStageInfo		Stage					= 6; // 阶段信息
}

// 小游戏活动道具使用请求
message ActivityMiniGameItemUse {
    int32 ActivityID = 1;
    int32 ItemId 		 = 2; // 消耗的道具id
    int64 ItemNum 	 = 3;
}

// 小游戏精力变化推送
message ActivityMiniGameEnergyChangeNtf {
    int32 											ActivityID = 1;
    ActivityMiniGameEnergyInfo  Energy     = 2; // 体力数据
}

message ActivityMiniGameStageRewardGetReq {
    int32 ActivityID = 1;
}

message ActivityMiniGameStageRewardGetAck {
    int32 										ActivityID 	= 1; //
    ActivityMiniGameStageInfo StageInfo 	= 2; // 阶段信息
}

message ActivityMiniGameTaskRewardGet{
    int32 ActivityID 	= 1; //
    int32 TaskId			= 2; // 任务id
}

message ActivityLimitTimeRankPreviewInfo {
    int32  					ActivityID 	= 1;
    int32 					RankId    	= 2; // 排行榜配置ID
    string 					RankKey  		= 3; // 排行榜key
    RankingUser 		TopUser 		= 4; // 榜首用户信息，类型为用户榜时返回
    SimpleAlliance 	TopAlliance = 5; // 榜首联盟信息，类型为联盟榜时返回
    int32  					AwardStatus = 6; // 奖励状态 0=没有奖励 1=有奖励未领取 2=有奖励已领取
    RankingUser 		OneSelf 		= 7; // 自己的排行榜信息
}

message GetActivityLimitTimeRankPreviewAck {
    repeated ActivityLimitTimeRankPreviewInfo RankPreviewDatas = 1; // 排行榜预览信息
}

message SyncActivityRankSettleRewardNtf {
    int32  	ActivityID 	= 1;
    string 	RankKey  		= 2; // 排行榜key
    int32  	AwardStatus = 3; // 奖励状态 0=没有奖励 1=有奖励未领取 2=有奖励已领取
}

// 兑换消耗功能
message ActivityItemConsumeReq {
    int32 ActivityID = 1;
    int32 ItemId 		 = 2; // 消耗的道具id
    int64 ItemNum 	 = 3;
}

message ActivityItemConsumeAck {
    int32 ActivityID = 1;
    int32 ItemId 		 = 2; // 消耗的道具id
    int64 ItemNum 	 = 3;
}

message SyncActivityRankPersonalChangeNtf {
    int32		ActivityID 	= 1;
    string  RankKey			= 2; // 排行榜key
    int32   RankId			= 3; // 排行榜id
    int64		Rank				= 4; // 新排名
    int64		Score				= 5; // 分数
}

message ActivityTotalPayInfo {
    int32 				 ActivityID 	= 1;
    int64 				 Cost 			 	= 2; // 总支付金额
    int64 				 TodayVipExp	= 3; // 今日获得的VIP经验
    int64 				 TotalVipExp	= 4; // 活动期间累计获得的VIP经验
    int32 				 Day					= 5; // 活动期间累计充值天数
    repeated int32 Receives 		= 6; // 已领取过奖励ID
    int64 				 LastPayTime 	= 7; // 最后一次充值时间
}

message SyncActivityTotalPayInfoNtf {
    repeated ActivityTotalPayInfo Pays = 1; // 总支付信息
}

message ActivityTotalPayGetReward {
    int32 ActivityID 	= 1;
    int32 ID 					= 2; // 奖励ID
}

// ============= 活动相关协议[END] ================

// 雇员简单信息
message SimpleEmployeeInfo {
    int32 EmployeeID = 1; // 雇员ID
    int64 Power      = 2; // 雇员总属性战力
}

message GetFriendPreviewReq {
    int64 Uid = 1; // 拜访的uid
}

message MiniLover {
    int32 Id  										= 1; //
    int32 SkinId 									= 2; // 皮肤ID 暂时=0
    repeated PropKeyValue Propers = 3; // 属性kV
    repeated CommonIntKV Skills 	= 4; // 技能列表
}

message GetFriendPreviewLoversAck{
    repeated MiniLover Lovers = 1; // 知己列表
    int64 						 Uid 		= 2; // 玩家ID

}

message MiniEmployee {
    int32 								ID 					= 1; // 雇员ID
    int32 								Level				= 2; // 雇员等级
    repeated 	StaffSkill 	Skills 			= 3; // 技能
    StaffProperShow 			ProperShow 	= 4; // 属性显示数据
    repeated StaffTalent 	Talents     = 5; // 资质/天赋
    int32 								Break 			= 6; // 突破等级 默认=1级
}

message GetFriendPreviewEmployeesAck{
    repeated MiniEmployee Employees = 1; // 雇员列表
    int64 								Uid 			= 2; // 玩家ID
}

message GetFriendNewStoresReq {
    int64  Uid 		= 1; // 对象玩家ID
}

message FriendNewStoreData {
    int32 Id 																		= 1; // 店铺ID 配表
    string Name 																= 2; // 店铺名字,默认配表,可自定义,为空就读取配置
    int32 Grade 													      = 3; // 评级等级使用 默认1级
    repeated NewStoreObject Objects 						= 4; // 物品列表 包括所有设备和放置的装饰物 在计算坐标可以统一计算 只会展示拥有的设备
    repeated NewStoreCookBookSlot CookBookSlots = 5; // 菜谱槽位列表 当前上阵槽位的信息
    repeated FriendNewStorePointPos PointPos    = 6; // 上阵点位
    repeated NewStoreAttrData AttrDatas 				= 7; // 属性值数组
}

message FriendNewStorePointPos {
    int32 Id    									 = 1; // 点位ID, 全局唯一ID 配表
    MiniEmployee Employee 				 = 2; // 上阵雇员 如果为null 就是没有上阵
    bool Unlock                    = 3; // 是否解锁 false=没有解锁
}

message GetFriendNewStoresAck {
    repeated FriendNewStoreData Stores  = 1; // 店铺列表
}

message UserFigureUnlock {
    int32 ID = 1;
}

// 推送商店信息
// 在登录或者在刷新的时候 会推送对应的ID 请按照repeated的ID加入到本地IDmap里 可能是add可能是update
message SyncUserNormalShopInfoNtf {
    repeated UserNormalFixShopInfo FixShops   = 1; // 固定商店信息
    repeated UserNormalRandShopInfo RandShops = 2; // 随机商店信息
}

// 固定商店信息
message UserNormalFixShopInfo {
    int32 ID 					  				 				 = 1; // 商店ID
    int64 NextRefreshTs 				 				 = 2; // 下次刷新时间
    repeated NormalShopGoodsInfo Bought  = 3; // 商品购买情况 这里的ID是商品ID count是购买数量 用于固定商店计算库存
}

// 随机商店信息
message UserNormalRandShopInfo {
    int32 ID 					  				 					 = 1; // 商店ID
    int64 NextRefreshTs 				 					 = 2; // 下次刷新时间
    repeated NormalShopGoodsInfo Goods 	   = 3; // 全商品信息 因为随机商店的商品是随机生成的 所以这里要返回商品信息
}

// 随机商店商品信息  单独做结构 如果需要扩展#TODO
message NormalShopGoodsInfo {
    int32 GoodsId 			= 1; // 商品ID
    int32 BoughtCount   = 2; // 已购买数量
}

// 商店购买商品请求
message UserNormalShopBuyGoodsReq {
    int32 ShopId  = 1; // 商店ID
    int32 GoodsId = 2; // 商品ID
    int32 Count   = 3; // 购买数量  BoughtCount + Count <= max读取配表 请先判断
}


message UserNormalShopBuyGoodsAck {
    int32 ShopId  		  = 1; // 商店ID
    int32 GoodsId 		  = 2; // 商品ID
    int32 Count   			= 3; // 购买数量
	// 以上是请求的返回信息
    int32 BoughtCount   = 4; // 该商品已购买的数量 按照这个数量去刷新数据
}

message SignScratchCard {
    int32 ID 	= 1; // 今日刮刮乐的奖励ID,无论是否挂奖，都会返回
    bool 	Get = 2; // 是否刮奖
}

message UserEmployeeTrainInfo {
    int32 EmployeeID 	= 1; // 雇员ID
    int32 SlotId 			= 2; // 槽位ID
    int64 EndTime 		= 3; // 培训结束时间
}

message SyncUserTrainNtf {
    repeated UserEmployeeTrainInfo Infos = 1; // 雇员培训信息
    int32 												 Slot  = 2; // 最大槽位数量
}

message UserEmployeeTrainInfos {
    repeated UserEmployeeTrainInfo Trains = 1; // 雇员培训信息
}

message UserTrainFinishReq{
    repeated int32 EmployeeIDs = 1; // 雇员ID 列表
}

message UserTrainAddSlotAck{
    int32 Slot = 1; // 最大槽位数量
}

// ========= 派对相关 ===========

// 1. 派对的协议 大部分都是公共信息 不包含个人信息 即同一个派对的信息 所有人看到的信息都是一样的
// 2. 除了登录推送给user的信息是个人独有的
// 派对预览信息 列表 同步相关
message PartyPreviewInfo {
    int64 ID           = 1; // 派对ID 唯一ID 全局
    int32 ServerID     = 2; // 服务器ID (先不用管 后续适配跨服)
    int64 CreatorUid   = 3; // 创建者UID 判定是否==自己 用于权限判断
    SimpleUser Creator = 4; // 创建者信息 展示使用
    int32 ConfigBaseId = 5; // 配置ID 根据配表确认类型的信息 (最大人数按照配表来读取)
    int64 EndTime      = 6; // 到期时间(秒)
    int32 Hot          = 7; // 热度/人气
    int32 GuestNum     = 8; // 客人数量
    PartySetUp SetUp   = 9; // 设置信息(创建者可以修改设置)
    bool  Open         = 10; // 是否在举办中, 结束后, 就变成false 不会再返回这个字段
    int64 CreateTime   = 11; // 创建时间(秒)
}

// 派对详情信息 进入之后看到所有的人信息
message PartyDetailInfo {
    PartyPreviewInfo Preview   = 1; // 预览信息
	// guests.lenght 就是人数 请判定自己是否在creator或者guest里面
    repeated SimpleUser Guests = 2; // 所有的客人信息 从第一个客人开始 不包含创建者 请单独处理创建者信息
}

// 派对设置信息
message PartySetUp {
    string Msg 				= 1; // 留言信息(原文显示)
    int32  ConfigByte = 2; // 配置信息(二进制转数字) 1<<0 金币赴约 1<<1 私人宴会 取|并集 后续如果增加 就往后面增加1<<N处理
}

// 登录推送我的派对相关信息
// 这个数据在登录推送外 其他的信息 不会返回跟user自身相关的任何信息 都是公共信息
message SyncUserPartyNtf{
    PartyPreviewInfo Mine      = 1; // 正在举办中我创建的派对 如果==null表示没有派对
    int32 GoldUseTimes         = 2; // 当天金币赴宴次数 第二天清0
    repeated int64 JoinIds     = 4; // 我正在参加的派对ID列表 请结合参与LIST数据做判断 推送结束数据 请自行处理
    repeated int64 UnRewardIds = 5;	// 我有未领取的奖励ID列表 请结合奖励LIST数据做判断 领取成功后 请自行处理 (也可用作红点展示)
}

message UserHostPartyReq{
    int32 ConfigBaseId = 1; // 配置ID 根据配表确认类型的信息 (最大人数按照配表来读取)
    PartySetUp SetUp   = 2; // 设置信息(创建者可以修改设置)
}

message UserHostPartyAck{
    PartyPreviewInfo Preview = 1; // 预览信息
}

// 打开界面请求 切换和筛选 不请求 自行处理筛选数据
message GetServerPartyListReq{
    int64 CursorId = 1; // 开始ID 获取此ID之后 > ID的派对列表 每次20条  每次开始从0开始请求
}

//
message ServerPartyList{
    repeated PartyPreviewInfo List = 1; // 列表数据 // 获取历史记录数据的返回 列表数据(我举办的不会返回正在举办中的,我参与的判断举办中的显示,领取奖励按照推送的奖励未领取的记录去展示)
    int64 CursorId                 = 2; // 一般情况下 CursorId=list最后一个最大的ID 表示后续还有; 如果CursorId==0 表示后续没有了 每次从0开始请求
}

message UserJoinPartyReq{
    int64 PartyID    = 1; // 派对ID
    int32 GiftItemId = 2; // 选择礼物ID
}

// 加入成功后 会返回派对详情信息
message UserJoinPartyAck{
    PartyDetailInfo Info = 1; // 派对详情信息 直接使用信息刷新
}

// 赴约调用 加入前请先调用获取派对详情信息
message GetPartyDetailReq{
    int64 Uid     = 1; // 举办者UID (必须传)
    int64 PartyID = 2; // 派对ID (可不传 则直接使用uid进入 传了 可做检查判断)
}

message GetPartyDetailAck{
    PartyDetailInfo Info = 1; // 派对详情信息
}

message UserSetUpPartyReq{
    PartySetUp SetUp   = 1; // 设置信息(创建者可以修改设置)
}

message UserSetUpPartyAck{
    PartySetUp SetUp   = 1; // 设置信息
}

// 获取派对记录的请求的结构通用 通过协议号区分功能
message GetPartyHistoryListReq{}

message GetPartyGuestListReq{
    int64 PartyID = 1; // 派对ID
}

message PartyGuestInfo {
    SimpleUser User = 1; // 用户信息
    int32 ItemId    = 2; // 礼物ID
    int32 Hot       = 3; // 提供热度/人气
}

message GetPartyGuestListAck{
    repeated PartyGuestInfo List = 1; // 列表数据
}

message UserGetPartyRewardReq{
    int32 OneKeyType = 1; //  1=领取我举办的 2=领取我参与的
    int64 PartyID    = 2; // 派对ID 如果上面的OneKeyType==0 就要传这个指定的奖励的派对ID
}

// 返回请求的数据 如果一键领取到了任意一个奖励 则返回OK 否则返回错误码
message UserGetPartyRewardAck{
    int32 OneKeyType = 1; //  1=领取我举办的 2=领取我参与的
    int64 PartyID    = 2; // 派对ID 如果上面的OneKeyType==0 就要传这个指定的奖励的派对ID
}

message GetPartyUserRelationListReq{}

message PartyUserRelationInfo {
    SimpleUser User = 1; // 用户信息
    int32 Invite    = 2; // 邀请次数
    int32 Join      = 3; // 参加次数
}

message GetPartyUserRelationListAck{
    repeated PartyUserRelationInfo List = 1; // 列表数据
}

message UserPartyInviteReq {
    repeated int64 Uids = 1; // 邀请的UID列表
    bool InviteAlliance = 2; // 是否邀请联盟
}

message UserPartyInviteAck {
    repeated int64 Uids = 1; // 邀请的UID列表
    bool InviteAlliance = 2; // 是否邀请联盟
}

// 结束后请自行将ID放置到没有领取奖励的列表中
message SyncPartyFinishNtf{
    int64 PartyID  = 1; // 派对ID
    int32 Hot      = 2; // 结算的热度 用于计算奖励box样式 请自行计算 目前一定会有奖励
    int32 Reason   = 3; // reason==1 自动结束 2 满员提前结束 (用不到也没关系)
}

// 推送我举办访客数量
message SyncMyPartyGuestNumNtf {
    int32 GuestNum     = 1; // 客人数量
}


// 觐见相关
message UserVisitMainInfo {
    repeated CommonIntKV TitleList = 1; // 主界面爵位情况  k=>v,titleId => 1,为1时表示有人获得
}

message GetUserVisitTitleReq {
    int32 TitleId = 1; // 爵位id
}

message UserTitle {
    int64	  UserID				= 1; // 用户UID
    string  Name					= 2; // 名称
    int32 	ServerID 			= 3; // 当前所在服务器
    int32 	AllianceID 		= 4; // 联盟ID
    string  AllianceName 	= 5;// 联盟名称
    int64 	Timestamp 		= 7; // 爵位获得时间
    int32 	Score 				= 8; // 人气值
    int32 	Skin					= 9; // 皮肤
}

message TitleHistoryInfo {
    int64	  UserID				= 1; // 用户UID
    string  Name					= 2; // 名称
    int32 	AllianceID 		= 4; // 联盟ID
    string  AllianceName 	= 5;// 联盟名称
    int64   Timestamp     = 6; // 爵位最新获得时间
    int32   Times         = 7; // 获得次数
}

message GetUserVisitTitleAck {
    int32 		TitleId 						 				 = 1; // 爵位id
    repeated 	UserTitle UserTitles 				 = 2; // 爵位拥有的列表信息
    repeated  TitleHistoryInfo HistoryList = 3; // 历史获得爵位的列表信息
    bool 			IsVisit 										 = 4; // 是否已经访问过
    int64 		FlushTime 									 = 5; // 刷新时间
}

message UserVisitReq {
    int32 TitleId = 1; // 爵位id
    int64 UserId 	= 2; // 用户id
}

message UserVisitAck {
    int32 TitleId = 1; // 爵位id
    int64 UserId 	= 2; // 用户id
    int32 Score 	= 3; // 觐见过后的人气值
}

message GetSimpleRankReq {
    int32 					SimpleRankType 	= 1; // 排行榜类型，具体参数服务器告知
    int64 					TargetId 			 	= 2; // 目标id,用户排行榜为uid，
    repeated int32 	Args  					= 3; // 扩展参数，需要用额外参数的时候使用
    int64        		Num		 					= 4; // 榜单数量，拉取前多少个排名
}

message SimpleRankInfo {
    int32				Rank 	= 1; // 排名
    int64				Score = 2; // 分数
    SimpleUser 	User 	= 3; // 用户信息，最底部自己的排行榜信息不返
}

message GetSimpleRankAck {
    repeated SimpleRankInfo RankList = 1; // 排行榜列表
    SimpleRankInfo 					Oneself = 2; // 自己的排行信息
}

message NewGsServerInfo {
    int64 Timestamp = 1; // 服务器当前时间
    int32 OpenDay 	= 2; // 当前服务器开服天数
    int64 OpenTime 	= 3; // 当前服务器开服时间
}

message AcrossDayInfo {
    NewGsServerInfo ServerInfo = 1; // 服务器信息
}

message SyncNewBattlePassInfoNtf {
    int32 ActivityID  = 1;
    int64 Exp 			  = 2; // 经验值
    bool  Pay 			  = 3; // 是否购买通行证
    int32 RewardLevel = 4; // 已领取到的奖励等级
}

message NewBattlePassBuyExpReq {
    int32 ActivityID = 1;
    int64 Count 		 = 2; // 需要购买的经验数量
}

message NewBattlePassBuyExpAck {
    int32 ActivityID = 1;
}

message NewBattlePassGetRewardReq {
    int32 ActivityID = 1;
}

message NewBattlePassGetRewardAck {
    int32  ActivityID = 1;
}

message UserActivityRes {
    repeated CommonIntKV Res = 1; // 用户活动资源，后续所有的活动相关资源都放在这里
}



